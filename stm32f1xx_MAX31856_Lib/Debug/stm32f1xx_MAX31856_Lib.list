
stm32f1xx_MAX31856_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006da0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08006eb0  08006eb0  00016eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071f8  080071f8  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  080071f8  080071f8  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071f8  080071f8  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080071f8  080071f8  000171f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08007208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000129c  20000350  08007558  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200015ec  08007558  000215ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b978  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005871  00000000  00000000  0004bcf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009799  00000000  00000000  00051562  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000e28  00000000  00000000  0005ad00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000014d8  00000000  00000000  0005bb28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00020079  00000000  00000000  0005d000  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000129ef  00000000  00000000  0007d079  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00097c4f  00000000  00000000  0008fa68  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001276b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003310  00000000  00000000  00127734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e98 	.word	0x08006e98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	08006e98 	.word	0x08006e98

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <_ZN8MAX31856D1Ev>:
#include "MAX31856.h"

MAX31856::~MAX31856()
{
    // TODO Auto-generated destructor stub
}
 8000fe4:	4770      	bx	lr

08000fe6 <_ZN8MAX31856D0Ev>:
MAX31856::~MAX31856()
 8000fe6:	b510      	push	{r4, lr}
 8000fe8:	4604      	mov	r4, r0
}
 8000fea:	2110      	movs	r1, #16
 8000fec:	f003 fe6a 	bl	8004cc4 <_ZdlPvj>
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	bd10      	pop	{r4, pc}

08000ff4 <_ZN8MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
 @param  spi_mosi Bitbang SPI MOSI
 @param  spi_miso Bitbang SPI MISO
 @param  spi_clk Bitbang SPI Clock
 */
/**************************************************************************/
MAX31856::MAX31856( SPI_HandleTypeDef * spi, GPIO_TypeDef * gpio_cs,
 8000ff4:	b530      	push	{r4, r5, lr}
        uint16_t pinx_cs )
 8000ff6:	4d04      	ldr	r5, [pc, #16]	; (8001008 <_ZN8MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0x14>)
{
    hspi = spi;
    port_cs = gpio_cs;
 8000ff8:	e9c0 1201 	strd	r1, r2, [r0, #4]
        uint16_t pinx_cs )
 8000ffc:	6005      	str	r5, [r0, #0]
 8000ffe:	2500      	movs	r5, #0
    pin_cs = pinx_cs;
 8001000:	8183      	strh	r3, [r0, #12]
        uint16_t pinx_cs )
 8001002:	7385      	strb	r5, [r0, #14]

}
 8001004:	bd30      	pop	{r4, r5, pc}
 8001006:	bf00      	nop
 8001008:	08006ec8 	.word	0x08006ec8

0800100c <_ZN8MAX3185613readRegisterNEhPht>:

    return ret;
}

void MAX31856::readRegisterN( uint8_t addr, uint8_t * buffer, uint16_t n )
{
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	b085      	sub	sp, #20
    uint8_t pTxData[1];

    pTxData[0] = addr;
    pTxData[0] &= 0x7F; // MSB=0 for read, make sure top bit is not set
 8001010:	ad04      	add	r5, sp, #16
 8001012:	f001 017f 	and.w	r1, r1, #127	; 0x7f
{
 8001016:	4604      	mov	r4, r0
    pTxData[0] &= 0x7F; // MSB=0 for read, make sure top bit is not set
 8001018:	f805 1d04 	strb.w	r1, [r5, #-4]!
{
 800101c:	4617      	mov	r7, r2
 800101e:	461e      	mov	r6, r3
    HAL_GPIO_WritePin( port_cs, pin_cs, GPIO_PIN_RESET );
 8001020:	8981      	ldrh	r1, [r0, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	6880      	ldr	r0, [r0, #8]
 8001026:	f000 fd73 	bl	8001b10 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive( hspi, pTxData, buffer, n + 1, 1000 );
 800102a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800102e:	1c73      	adds	r3, r6, #1
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	463a      	mov	r2, r7
 8001036:	4629      	mov	r1, r5
 8001038:	6860      	ldr	r0, [r4, #4]
 800103a:	f001 ffca 	bl	8002fd2 <HAL_SPI_TransmitReceive>
//    HAL_SPI_Transmit(hspi, &pTxData[0], n, 1000);
//    HAL_SPI_Transmit(hspi, buffer, n, 1000);

    HAL_GPIO_WritePin( port_cs, pin_cs, GPIO_PIN_SET );
 800103e:	2201      	movs	r2, #1
 8001040:	89a1      	ldrh	r1, [r4, #12]
 8001042:	68a0      	ldr	r0, [r4, #8]
 8001044:	f000 fd64 	bl	8001b10 <HAL_GPIO_WritePin>

    //spi_dev.write_then_read(&addr, 1, buffer, n);
}
 8001048:	b005      	add	sp, #20
 800104a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800104c <_ZN8MAX3185613readRegister8Eh>:
    uint8_t buffer[2] =
 800104c:	2300      	movs	r3, #0
{
 800104e:	b507      	push	{r0, r1, r2, lr}
    uint8_t buffer[2] =
 8001050:	aa02      	add	r2, sp, #8
 8001052:	f822 3d04 	strh.w	r3, [r2, #-4]!
    readRegisterN( addr, buffer, 1 );
 8001056:	2301      	movs	r3, #1
 8001058:	f7ff ffd8 	bl	800100c <_ZN8MAX3185613readRegisterNEhPht>
}
 800105c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001060:	b003      	add	sp, #12
 8001062:	f85d fb04 	ldr.w	pc, [sp], #4

08001066 <_ZN8MAX3185618conversionCompleteEv>:
{
 8001066:	b508      	push	{r3, lr}
    if ( conversionMode == CONV_CONTINUOUS ) return true;
 8001068:	7bc3      	ldrb	r3, [r0, #15]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d007      	beq.n	800107e <_ZN8MAX3185618conversionCompleteEv+0x18>
    return !( readRegister8( MAX31856_CR0_REG ) & MAX31856_CR0_1SHOT );
 800106e:	2100      	movs	r1, #0
 8001070:	f7ff ffec 	bl	800104c <_ZN8MAX3185613readRegister8Eh>
 8001074:	f080 0040 	eor.w	r0, r0, #64	; 0x40
 8001078:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
 800107c:	bd08      	pop	{r3, pc}
    if ( conversionMode == CONV_CONTINUOUS ) return true;
 800107e:	2001      	movs	r0, #1
 8001080:	e7fc      	b.n	800107c <_ZN8MAX3185618conversionCompleteEv+0x16>

08001082 <_ZN8MAX3185614readRegister16Eh>:
    uint8_t buffer[3] =
 8001082:	2300      	movs	r3, #0
{
 8001084:	b507      	push	{r0, r1, r2, lr}
    uint8_t buffer[3] =
 8001086:	f8ad 3004 	strh.w	r3, [sp, #4]
 800108a:	f88d 3006 	strb.w	r3, [sp, #6]
    readRegisterN( addr, buffer, 2 );
 800108e:	aa01      	add	r2, sp, #4
 8001090:	2302      	movs	r3, #2
 8001092:	f7ff ffbb 	bl	800100c <_ZN8MAX3185613readRegisterNEhPht>
 8001096:	f8bd 0005 	ldrh.w	r0, [sp, #5]
 800109a:	ba40      	rev16	r0, r0
}
 800109c:	b280      	uxth	r0, r0
 800109e:	b003      	add	sp, #12
 80010a0:	f85d fb04 	ldr.w	pc, [sp], #4

080010a4 <_ZN8MAX3185617readCJTemperatureEv>:
{
 80010a4:	b508      	push	{r3, lr}
    return readRegister16( MAX31856_CJTH_REG ) / 256.0;
 80010a6:	210a      	movs	r1, #10
 80010a8:	f7ff ffeb 	bl	8001082 <_ZN8MAX3185614readRegister16Eh>
 80010ac:	f7ff f9aa 	bl	8000404 <__aeabi_i2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <_ZN8MAX3185617readCJTemperatureEv+0x1c>)
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	f7ff fce6 	bl	8000a88 <__aeabi_d2f>
}
 80010bc:	bd08      	pop	{r3, pc}
 80010be:	bf00      	nop
 80010c0:	3f700000 	.word	0x3f700000

080010c4 <_ZN8MAX3185614readRegister24Eh>:
    uint8_t buffer[4] =
 80010c4:	2300      	movs	r3, #0
{
 80010c6:	b507      	push	{r0, r1, r2, lr}
    uint8_t buffer[4] =
 80010c8:	aa02      	add	r2, sp, #8
 80010ca:	f842 3d04 	str.w	r3, [r2, #-4]!
    readRegisterN( addr, buffer, 3 );
 80010ce:	2303      	movs	r3, #3
 80010d0:	f7ff ff9c 	bl	800100c <_ZN8MAX3185613readRegisterNEhPht>
 80010d4:	f8bd 3005 	ldrh.w	r3, [sp, #5]
    ret |= buffer[3];
 80010d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80010dc:	ba5b      	rev16	r3, r3
 80010de:	b29b      	uxth	r3, r3
}
 80010e0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80010e4:	b003      	add	sp, #12
 80010e6:	f85d fb04 	ldr.w	pc, [sp], #4

080010ea <_ZN8MAX3185614writeRegister8Ehh>:

void MAX31856::writeRegister8( uint8_t addr, uint8_t data )
{
 80010ea:	b513      	push	{r0, r1, r4, lr}
 80010ec:	4604      	mov	r4, r0
    addr |= 0x80; // MSB=1 for write, make sure top bit is set
 80010ee:	f061 017f 	orn	r1, r1, #127	; 0x7f

    uint8_t buffer[2] =
    { addr, data };
 80010f2:	f88d 1004 	strb.w	r1, [sp, #4]
 80010f6:	f88d 2005 	strb.w	r2, [sp, #5]
    HAL_GPIO_WritePin( port_cs, pin_cs, GPIO_PIN_RESET );
 80010fa:	8981      	ldrh	r1, [r0, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	6880      	ldr	r0, [r0, #8]
 8001100:	f000 fd06 	bl	8001b10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit( hspi, buffer, 2, 1000 );
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	a901      	add	r1, sp, #4
 800110a:	2202      	movs	r2, #2
 800110c:	6860      	ldr	r0, [r4, #4]
 800110e:	f001 feb5 	bl	8002e7c <HAL_SPI_Transmit>
    //spi_dev.write(buffer, 2);
    HAL_GPIO_WritePin( port_cs, pin_cs, GPIO_PIN_SET );
 8001112:	2201      	movs	r2, #1
 8001114:	89a1      	ldrh	r1, [r4, #12]
 8001116:	68a0      	ldr	r0, [r4, #8]
 8001118:	f000 fcfa 	bl	8001b10 <HAL_GPIO_WritePin>

}
 800111c:	b002      	add	sp, #8
 800111e:	bd10      	pop	{r4, pc}

08001120 <_ZN8MAX3185617setConversionModeE17conversion_mode_t>:
{
 8001120:	b510      	push	{r4, lr}
 8001122:	4604      	mov	r4, r0
    conversionMode = mode;
 8001124:	73c1      	strb	r1, [r0, #15]
    uint8_t t = readRegister8( MAX31856_CR0_REG ); // get current register value
 8001126:	2100      	movs	r1, #0
 8001128:	f7ff ff90 	bl	800104c <_ZN8MAX3185613readRegister8Eh>
    if ( conversionMode == CONV_CONTINUOUS )
 800112c:	7be3      	ldrb	r3, [r4, #15]
    writeRegister8( MAX31856_CR0_REG, t ); // write value back to register
 800112e:	2100      	movs	r1, #0
    if ( conversionMode == CONV_CONTINUOUS )
 8001130:	2b02      	cmp	r3, #2
 8001132:	bf0a      	itet	eq
 8001134:	f000 02bf 	andeq.w	r2, r0, #191	; 0xbf
        t &= ~MAX31856_CR0_AUTOCONVERT; // turn off automatic
 8001138:	f000 027f 	andne.w	r2, r0, #127	; 0x7f
        t &= ~MAX31856_CR0_1SHOT;      // turn off one-shot
 800113c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    writeRegister8( MAX31856_CR0_REG, t ); // write value back to register
 8001140:	4620      	mov	r0, r4
}
 8001142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        t |= MAX31856_CR0_1SHOT;        // turn on one-shot
 8001146:	bf18      	it	ne
 8001148:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
    writeRegister8( MAX31856_CR0_REG, t ); // write value back to register
 800114c:	f7ff bfcd 	b.w	80010ea <_ZN8MAX3185614writeRegister8Ehh>

08001150 <_ZN8MAX318565beginE18thermocoupletype_t15averageSample_t17conversion_mode_t>:
{
 8001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001152:	4604      	mov	r4, r0
 8001154:	460e      	mov	r6, r1
 8001156:	4617      	mov	r7, r2
 8001158:	461d      	mov	r5, r3
    HAL_GPIO_WritePin( port_cs, pin_cs, GPIO_PIN_SET );
 800115a:	8981      	ldrh	r1, [r0, #12]
 800115c:	2201      	movs	r2, #1
 800115e:	6880      	ldr	r0, [r0, #8]
 8001160:	f000 fcd6 	bl	8001b10 <HAL_GPIO_WritePin>
    writeRegister8( MAX31856_MASK_REG, 0x0 );
 8001164:	4620      	mov	r0, r4
 8001166:	2200      	movs	r2, #0
 8001168:	2102      	movs	r1, #2
 800116a:	f7ff ffbe 	bl	80010ea <_ZN8MAX3185614writeRegister8Ehh>
    writeRegister8( MAX31856_CR0_REG,
 800116e:	4620      	mov	r0, r4
 8001170:	2210      	movs	r2, #16
 8001172:	2100      	movs	r1, #0
 8001174:	f7ff ffb9 	bl	80010ea <_ZN8MAX3185614writeRegister8Ehh>
    writeRegister8( MAX31856_CR1_REG, averageSamples | typeThermo );
 8001178:	ea47 0206 	orr.w	r2, r7, r6
 800117c:	4620      	mov	r0, r4
 800117e:	2101      	movs	r1, #1
 8001180:	f7ff ffb3 	bl	80010ea <_ZN8MAX3185614writeRegister8Ehh>
    writeRegister8( MAX31856_CJTO_REG, 0x0 );
 8001184:	2200      	movs	r2, #0
 8001186:	4620      	mov	r0, r4
 8001188:	2109      	movs	r1, #9
 800118a:	f7ff ffae 	bl	80010ea <_ZN8MAX3185614writeRegister8Ehh>
    setConversionMode( convMode );
 800118e:	4629      	mov	r1, r5
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff ffc5 	bl	8001120 <_ZN8MAX3185617setConversionModeE17conversion_mode_t>
    HAL_Delay( 1 );
 8001196:	2001      	movs	r0, #1
 8001198:	f000 fb58 	bl	800184c <HAL_Delay>
}
 800119c:	2001      	movs	r0, #1
 800119e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011a0 <_ZN8MAX3185614triggerOneShotEv>:
    if ( conversionMode == CONV_CONTINUOUS ) return;
 80011a0:	7bc3      	ldrb	r3, [r0, #15]
{
 80011a2:	b510      	push	{r4, lr}
    if ( conversionMode == CONV_CONTINUOUS ) return;
 80011a4:	2b02      	cmp	r3, #2
{
 80011a6:	4604      	mov	r4, r0
    if ( conversionMode == CONV_CONTINUOUS ) return;
 80011a8:	d00c      	beq.n	80011c4 <_ZN8MAX3185614triggerOneShotEv+0x24>
    uint8_t t = readRegister8( MAX31856_CR0_REG ); // get current register value
 80011aa:	2100      	movs	r1, #0
 80011ac:	f7ff ff4e 	bl	800104c <_ZN8MAX3185613readRegister8Eh>
    t &= ~MAX31856_CR0_AUTOCONVERT;              // turn off autoconvert
 80011b0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    writeRegister8( MAX31856_CR0_REG, t );       // write value back to register
 80011b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011b8:	4620      	mov	r0, r4
}
 80011ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeRegister8( MAX31856_CR0_REG, t );       // write value back to register
 80011be:	2100      	movs	r1, #0
 80011c0:	f7ff bf93 	b.w	80010ea <_ZN8MAX3185614writeRegister8Ehh>
}
 80011c4:	bd10      	pop	{r4, pc}

080011c6 <_ZN8MAX3185627readThermocoupleTemperatureEv>:
{
 80011c6:	b538      	push	{r3, r4, r5, lr}
    if ( conversionMode == CONV_ONESHOT )
 80011c8:	7bc3      	ldrb	r3, [r0, #15]
{
 80011ca:	4604      	mov	r4, r0
    if ( conversionMode == CONV_ONESHOT )
 80011cc:	b98b      	cbnz	r3, 80011f2 <_ZN8MAX3185627readThermocoupleTemperatureEv+0x2c>
        triggerOneShot();
 80011ce:	f7ff ffe7 	bl	80011a0 <_ZN8MAX3185614triggerOneShotEv>
        uint32_t start = HAL_GetTick();
 80011d2:	f000 fb35 	bl	8001840 <HAL_GetTick>
 80011d6:	4605      	mov	r5, r0
        while ( !conversionComplete() )
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff ff44 	bl	8001066 <_ZN8MAX3185618conversionCompleteEv>
 80011de:	b940      	cbnz	r0, 80011f2 <_ZN8MAX3185627readThermocoupleTemperatureEv+0x2c>
            if ( HAL_GetTick() - start > 250 ) return 0;
 80011e0:	f000 fb2e 	bl	8001840 <HAL_GetTick>
 80011e4:	1b40      	subs	r0, r0, r5
 80011e6:	28fa      	cmp	r0, #250	; 0xfa
 80011e8:	d816      	bhi.n	8001218 <_ZN8MAX3185627readThermocoupleTemperatureEv+0x52>
            HAL_Delay( 10 );
 80011ea:	200a      	movs	r0, #10
 80011ec:	f000 fb2e 	bl	800184c <HAL_Delay>
        while ( !conversionComplete() )
 80011f0:	e7f2      	b.n	80011d8 <_ZN8MAX3185627readThermocoupleTemperatureEv+0x12>
    int32_t temp24 = readRegister24( MAX31856_LTCBH_REG );
 80011f2:	210c      	movs	r1, #12
 80011f4:	4620      	mov	r0, r4
 80011f6:	f7ff ff65 	bl	80010c4 <_ZN8MAX3185614readRegister24Eh>
    if ( temp24 & 0x800000 )
 80011fa:	0203      	lsls	r3, r0, #8
        temp24 |= 0xFF000000; // fix sign
 80011fc:	bf48      	it	mi
 80011fe:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000
    return temp24 * 0.0078125;
 8001202:	1140      	asrs	r0, r0, #5
 8001204:	f7ff f8fe 	bl	8000404 <__aeabi_i2d>
 8001208:	2200      	movs	r2, #0
 800120a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800120e:	f7ff f963 	bl	80004d8 <__aeabi_dmul>
 8001212:	f7ff fc39 	bl	8000a88 <__aeabi_d2f>
}
 8001216:	bd38      	pop	{r3, r4, r5, pc}
            if ( HAL_GetTick() - start > 250 ) return 0;
 8001218:	2000      	movs	r0, #0
 800121a:	e7fc      	b.n	8001216 <_ZN8MAX3185627readThermocoupleTemperatureEv+0x50>

0800121c <_ZN5PrintC1Ev>:
using namespace std;

/**
 *  Constructor
 */
Print::Print()
 800121c:	4b01      	ldr	r3, [pc, #4]	; (8001224 <_ZN5PrintC1Ev+0x8>)
 800121e:	6003      	str	r3, [r0, #0]
{

}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	08006ed8 	.word	0x08006ed8

08001228 <_ZN5Print5printEPKcz>:
 * @param format  contiene una cadena de formato que sigue las mismas
 *        especificaciones que el formato en printf
 * @note  la funcion que utiliza para el formato es sprintf
 */
void Print::print( const char * format, ... )
{
 8001228:	b40e      	push	{r1, r2, r3}
 800122a:	b510      	push	{r4, lr}
 800122c:	b0b5      	sub	sp, #212	; 0xd4
 800122e:	aa37      	add	r2, sp, #220	; 0xdc
 8001230:	f852 1b04 	ldr.w	r1, [r2], #4
 8001234:	4604      	mov	r4, r0

    /* va_start es una macro que acepta dos argumentos, un va_list y el nombre
     de la variable que precede directamente a la elipsis ("..."). */
    va_start( argp, format );

    if ( 0 < vsprintf( string, format, argp ) ) // build string
 8001236:	a802      	add	r0, sp, #8
    va_start( argp, format );
 8001238:	9201      	str	r2, [sp, #4]
    if ( 0 < vsprintf( string, format, argp ) ) // build string
 800123a:	f004 fb13 	bl	8005864 <vsiprintf>
 800123e:	2800      	cmp	r0, #0
 8001240:	dd04      	ble.n	800124c <_ZN5Print5printEPKcz+0x24>
    {
        write( (uint8_t*) string );  // funcion virtual
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	a902      	add	r1, sp, #8
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4620      	mov	r0, r4
 800124a:	4798      	blx	r3
    }

    va_end( argp );

}
 800124c:	b035      	add	sp, #212	; 0xd4
 800124e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001252:	b003      	add	sp, #12
 8001254:	4770      	bx	lr

08001256 <_ZN5Print5printEPh>:
 * @param text_in dato de tipo uint8_t a transmitir
 */
void Print::print( uint8_t * bytes_in )
{

    write( bytes_in );
 8001256:	6803      	ldr	r3, [r0, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4718      	bx	r3

0800125c <_ZN6Serial5writeEPh>:
            }
        }
}

void Serial::write( uint8_t * text )
{
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	4605      	mov	r5, r0

    HAL_UART_Transmit( uart, text, strlen( (char*) text ), 1000 );
 8001260:	4608      	mov	r0, r1
{
 8001262:	460c      	mov	r4, r1
    HAL_UART_Transmit( uart, text, strlen( (char*) text ), 1000 );
 8001264:	f7fe ff74 	bl	8000150 <strlen>
 8001268:	4621      	mov	r1, r4
 800126a:	b282      	uxth	r2, r0
 800126c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001270:	68a8      	ldr	r0, [r5, #8]

}
 8001272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit( uart, text, strlen( (char*) text ), 1000 );
 8001276:	f002 b82d 	b.w	80032d4 <HAL_UART_Transmit>
	...

0800127c <_ZN6SerialC1EP20__UART_HandleTypeDef>:
Serial::Serial( UART_HandleTypeDef * uartx )
 800127c:	b538      	push	{r3, r4, r5, lr}
 800127e:	4604      	mov	r4, r0
 8001280:	460d      	mov	r5, r1
 8001282:	f7ff ffcb 	bl	800121c <_ZN5PrintC1Ev>
 8001286:	4b02      	ldr	r3, [pc, #8]	; (8001290 <_ZN6SerialC1EP20__UART_HandleTypeDef+0x14>)
    uart = uartx;
 8001288:	60a5      	str	r5, [r4, #8]
Serial::Serial( UART_HandleTypeDef * uartx )
 800128a:	6023      	str	r3, [r4, #0]
}
 800128c:	4620      	mov	r0, r4
 800128e:	bd38      	pop	{r3, r4, r5, pc}
 8001290:	08006ee4 	.word	0x08006ee4

08001294 <_ZN3Usb5writeEPh>:
{

}

void Usb::write( uint8_t * text )
{
 8001294:	b510      	push	{r4, lr}

    CDC_Transmit_FS( text, strlen( (char*) text ) );
 8001296:	4608      	mov	r0, r1
{
 8001298:	460c      	mov	r4, r1
    CDC_Transmit_FS( text, strlen( (char*) text ) );
 800129a:	f7fe ff59 	bl	8000150 <strlen>
 800129e:	b281      	uxth	r1, r0
 80012a0:	4620      	mov	r0, r4
}
 80012a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CDC_Transmit_FS( text, strlen( (char*) text ) );
 80012a6:	f003 bb37 	b.w	8004918 <CDC_Transmit_FS>
	...

080012ac <_ZN3UsbC1Ev>:
Usb::Usb()
 80012ac:	b510      	push	{r4, lr}
 80012ae:	4604      	mov	r4, r0
 80012b0:	f7ff ffb4 	bl	800121c <_ZN5PrintC1Ev>
 80012b4:	4b01      	ldr	r3, [pc, #4]	; (80012bc <_ZN3UsbC1Ev+0x10>)
}
 80012b6:	4620      	mov	r0, r4
Usb::Usb()
 80012b8:	6023      	str	r3, [r4, #0]
}
 80012ba:	bd10      	pop	{r4, pc}
 80012bc:	08006ef0 	.word	0x08006ef0

080012c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	2414      	movs	r4, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	2610      	movs	r6, #16
{
 80012c6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c8:	4622      	mov	r2, r4
 80012ca:	2100      	movs	r1, #0
 80012cc:	a80c      	add	r0, sp, #48	; 0x30
 80012ce:	f003 fd61 	bl	8004d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d2:	4622      	mov	r2, r4
 80012d4:	eb0d 0004 	add.w	r0, sp, r4
 80012d8:	2100      	movs	r1, #0
 80012da:	f003 fd5b 	bl	8004d94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012de:	4632      	mov	r2, r6
 80012e0:	2100      	movs	r1, #0
 80012e2:	a801      	add	r0, sp, #4
 80012e4:	f003 fd56 	bl	8004d94 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e8:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f4:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fe:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001300:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f001 f9f3 	bl	80026ec <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001308:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800130e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001312:	4629      	mov	r1, r5
 8001314:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001316:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131c:	f001 fbbe 	bl	8002a9c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001320:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001322:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001324:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001326:	f001 fc75 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800132a:	b014      	add	sp, #80	; 0x50
 800132c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001330 <_Z7filter1f>:
}

/* USER CODE BEGIN 4 */

float filter1( float signal )
{
 8001330:	b570      	push	{r4, r5, r6, lr}
    float alpha = 0.07; // alpha = 2/(n+1) -- n es el numero de muestras a promediar
    static float s = signal;
 8001332:	4d10      	ldr	r5, [pc, #64]	; (8001374 <_Z7filter1f+0x44>)
{
 8001334:	4606      	mov	r6, r0
    static float s = signal;
 8001336:	782b      	ldrb	r3, [r5, #0]
 8001338:	4c0f      	ldr	r4, [pc, #60]	; (8001378 <_Z7filter1f+0x48>)
 800133a:	f013 0f01 	tst.w	r3, #1
 800133e:	f3bf 8f5b 	dmb	ish
 8001342:	d107      	bne.n	8001354 <_Z7filter1f+0x24>
 8001344:	4628      	mov	r0, r5
 8001346:	f003 fcbf 	bl	8004cc8 <__cxa_guard_acquire>
 800134a:	b118      	cbz	r0, 8001354 <_Z7filter1f+0x24>
 800134c:	4628      	mov	r0, r5
 800134e:	6026      	str	r6, [r4, #0]
 8001350:	f003 fcc6 	bl	8004ce0 <__cxa_guard_release>
    // EMA = (alpha * ValorActual) + (( 1 - alpha) * EMA_anterior)
    s = ( alpha * signal ) + ( ( 1 - alpha ) * s );
 8001354:	6820      	ldr	r0, [r4, #0]
 8001356:	4909      	ldr	r1, [pc, #36]	; (800137c <_Z7filter1f+0x4c>)
 8001358:	f7ff fcf4 	bl	8000d44 <__aeabi_fmul>
 800135c:	4908      	ldr	r1, [pc, #32]	; (8001380 <_Z7filter1f+0x50>)
 800135e:	4605      	mov	r5, r0
 8001360:	4630      	mov	r0, r6
 8001362:	f7ff fcef 	bl	8000d44 <__aeabi_fmul>
 8001366:	4601      	mov	r1, r0
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff fbe3 	bl	8000b34 <__addsf3>
 800136e:	6020      	str	r0, [r4, #0]
    return s;
}
 8001370:	bd70      	pop	{r4, r5, r6, pc}
 8001372:	bf00      	nop
 8001374:	2000036c 	.word	0x2000036c
 8001378:	20000374 	.word	0x20000374
 800137c:	3f6e147b 	.word	0x3f6e147b
 8001380:	3d8f5c29 	.word	0x3d8f5c29

08001384 <_Z7filter2f>:

float filter2( float signal )
{
 8001384:	b570      	push	{r4, r5, r6, lr}
    float alpha = 0.07; // alpha = 2/(n+1) -- n es el numero de muestras a promediar
    static float s = signal;
 8001386:	4d10      	ldr	r5, [pc, #64]	; (80013c8 <_Z7filter2f+0x44>)
{
 8001388:	4606      	mov	r6, r0
    static float s = signal;
 800138a:	782b      	ldrb	r3, [r5, #0]
 800138c:	4c0f      	ldr	r4, [pc, #60]	; (80013cc <_Z7filter2f+0x48>)
 800138e:	f013 0f01 	tst.w	r3, #1
 8001392:	f3bf 8f5b 	dmb	ish
 8001396:	d107      	bne.n	80013a8 <_Z7filter2f+0x24>
 8001398:	4628      	mov	r0, r5
 800139a:	f003 fc95 	bl	8004cc8 <__cxa_guard_acquire>
 800139e:	b118      	cbz	r0, 80013a8 <_Z7filter2f+0x24>
 80013a0:	4628      	mov	r0, r5
 80013a2:	6026      	str	r6, [r4, #0]
 80013a4:	f003 fc9c 	bl	8004ce0 <__cxa_guard_release>
    // EMA = (alpha * ValorActual) + (( 1 - alpha) * EMA_anterior)
    s = ( alpha * signal ) + ( ( 1 - alpha ) * s );
 80013a8:	6820      	ldr	r0, [r4, #0]
 80013aa:	4909      	ldr	r1, [pc, #36]	; (80013d0 <_Z7filter2f+0x4c>)
 80013ac:	f7ff fcca 	bl	8000d44 <__aeabi_fmul>
 80013b0:	4908      	ldr	r1, [pc, #32]	; (80013d4 <_Z7filter2f+0x50>)
 80013b2:	4605      	mov	r5, r0
 80013b4:	4630      	mov	r0, r6
 80013b6:	f7ff fcc5 	bl	8000d44 <__aeabi_fmul>
 80013ba:	4601      	mov	r1, r0
 80013bc:	4628      	mov	r0, r5
 80013be:	f7ff fbb9 	bl	8000b34 <__addsf3>
 80013c2:	6020      	str	r0, [r4, #0]
    return s;
}
 80013c4:	bd70      	pop	{r4, r5, r6, pc}
 80013c6:	bf00      	nop
 80013c8:	20000370 	.word	0x20000370
 80013cc:	20000378 	.word	0x20000378
 80013d0:	3f6e147b 	.word	0x3f6e147b
 80013d4:	3d8f5c29 	.word	0x3d8f5c29

080013d8 <main>:
{
 80013d8:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	2710      	movs	r7, #16
{
 80013dc:	b088      	sub	sp, #32
  HAL_Init();
 80013de:	f000 fa11 	bl	8001804 <HAL_Init>
  SystemClock_Config();
 80013e2:	f7ff ff6d 	bl	80012c0 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	463a      	mov	r2, r7
 80013e8:	2100      	movs	r1, #0
 80013ea:	eb0d 0007 	add.w	r0, sp, r7
 80013ee:	f003 fcd1 	bl	8004d94 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	4b4c      	ldr	r3, [pc, #304]	; (8001524 <main+0x14c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013fa:	484b      	ldr	r0, [pc, #300]	; (8001528 <main+0x150>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fc:	433a      	orrs	r2, r7
 80013fe:	619a      	str	r2, [r3, #24]
 8001400:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001404:	403a      	ands	r2, r7
 8001406:	9201      	str	r2, [sp, #4]
 8001408:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	f042 0220 	orr.w	r2, r2, #32
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	f002 0220 	and.w	r2, r2, #32
 800141c:	9202      	str	r2, [sp, #8]
 800141e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	f042 0204 	orr.w	r2, r2, #4
 8001426:	619a      	str	r2, [r3, #24]
 8001428:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	9303      	str	r3, [sp, #12]
 8001432:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001434:	f000 fb6c 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	4639      	mov	r1, r7
 800143c:	483b      	ldr	r0, [pc, #236]	; (800152c <main+0x154>)
 800143e:	f000 fb67 	bl	8001b10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001446:	eb0d 0107 	add.w	r1, sp, r7
 800144a:	4837      	ldr	r0, [pc, #220]	; (8001528 <main+0x150>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f000 fa76 	bl	8001944 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DRDY_Pin;
 8001458:	2308      	movs	r3, #8
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 800145a:	eb0d 0107 	add.w	r1, sp, r7
 800145e:	4833      	ldr	r0, [pc, #204]	; (800152c <main+0x154>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 8001466:	f000 fa6d 	bl	8001944 <HAL_GPIO_Init>
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800146a:	eb0d 0107 	add.w	r1, sp, r7
 800146e:	482f      	ldr	r0, [pc, #188]	; (800152c <main+0x154>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	e9cd 4506 	strd	r4, r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	e9cd 7604 	strd	r7, r6, [sp, #16]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001478:	f000 fa64 	bl	8001944 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800147c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8001480:	482b      	ldr	r0, [pc, #172]	; (8001530 <main+0x158>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001482:	4a2c      	ldr	r2, [pc, #176]	; (8001534 <main+0x15c>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001484:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001488:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800148c:	2318      	movs	r3, #24
 800148e:	e9c0 1306 	strd	r1, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001492:	230a      	movs	r3, #10
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001494:	e9c0 4604 	strd	r4, r6, [r0, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001498:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800149c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a4:	f001 fc92 	bl	8002dcc <HAL_SPI_Init>
  huart1.Init.BaudRate = 115200;
 80014a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80014ac:	4822      	ldr	r0, [pc, #136]	; (8001538 <main+0x160>)
  huart1.Init.BaudRate = 115200;
 80014ae:	4e23      	ldr	r6, [pc, #140]	; (800153c <main+0x164>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80014b4:	e9c0 6300 	strd	r6, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b8:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014bc:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c2:	f001 fed9 	bl	8003278 <HAL_UART_Init>
  MX_USB_DEVICE_Init();
 80014c6:	f003 f9e7 	bl	8004898 <MX_USB_DEVICE_Init>
    sensor.begin( TC_TYPE_K, AVG_4_SAMPLES, CONV_CONTINUOUS );
 80014ca:	462b      	mov	r3, r5
 80014cc:	2220      	movs	r2, #32
 80014ce:	2103      	movs	r1, #3
 80014d0:	481b      	ldr	r0, [pc, #108]	; (8001540 <main+0x168>)
 80014d2:	f7ff fe3d 	bl	8001150 <_ZN8MAX318565beginE18thermocoupletype_t15averageSample_t17conversion_mode_t>
        while ( HAL_GPIO_ReadPin( DRDY_GPIO_Port, DRDY_Pin ) == GPIO_PIN_SET )
 80014d6:	4e15      	ldr	r6, [pc, #84]	; (800152c <main+0x154>)
                filter1( sensor.readCJTemperature() ) );
 80014d8:	4d19      	ldr	r5, [pc, #100]	; (8001540 <main+0x168>)
        serial.print( "temperatura CJT %.2f grados celcius ----",
 80014da:	4c1a      	ldr	r4, [pc, #104]	; (8001544 <main+0x16c>)
        while ( HAL_GPIO_ReadPin( DRDY_GPIO_Port, DRDY_Pin ) == GPIO_PIN_SET )
 80014dc:	2108      	movs	r1, #8
 80014de:	4630      	mov	r0, r6
 80014e0:	f000 fb10 	bl	8001b04 <HAL_GPIO_ReadPin>
 80014e4:	2801      	cmp	r0, #1
 80014e6:	d0f9      	beq.n	80014dc <main+0x104>
                filter1( sensor.readCJTemperature() ) );
 80014e8:	4628      	mov	r0, r5
 80014ea:	f7ff fddb 	bl	80010a4 <_ZN8MAX3185617readCJTemperatureEv>
 80014ee:	f7ff ff1f 	bl	8001330 <_Z7filter1f>
        serial.print( "temperatura CJT %.2f grados celcius ----",
 80014f2:	f7fe ff99 	bl	8000428 <__aeabi_f2d>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4620      	mov	r0, r4
 80014fc:	4912      	ldr	r1, [pc, #72]	; (8001548 <main+0x170>)
 80014fe:	f7ff fe93 	bl	8001228 <_ZN5Print5printEPKcz>
                filter2( sensor.readThermocoupleTemperature() ) );
 8001502:	4628      	mov	r0, r5
 8001504:	f7ff fe5f 	bl	80011c6 <_ZN8MAX3185627readThermocoupleTemperatureEv>
 8001508:	f7ff ff3c 	bl	8001384 <_Z7filter2f>
        serial.print( "temperatura %.2f grados celcius \r\n",
 800150c:	f7fe ff8c 	bl	8000428 <__aeabi_f2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4620      	mov	r0, r4
 8001516:	490d      	ldr	r1, [pc, #52]	; (800154c <main+0x174>)
 8001518:	f7ff fe86 	bl	8001228 <_ZN5Print5printEPKcz>
        HAL_Delay( 100 );
 800151c:	2064      	movs	r0, #100	; 0x64
 800151e:	f000 f995 	bl	800184c <HAL_Delay>
    while ( 1 )
 8001522:	e7db      	b.n	80014dc <main+0x104>
 8001524:	40021000 	.word	0x40021000
 8001528:	40011000 	.word	0x40011000
 800152c:	40010800 	.word	0x40010800
 8001530:	2000037c 	.word	0x2000037c
 8001534:	40013000 	.word	0x40013000
 8001538:	200003d4 	.word	0x200003d4
 800153c:	40013800 	.word	0x40013800
 8001540:	20000414 	.word	0x20000414
 8001544:	20000424 	.word	0x20000424
 8001548:	08006ef4 	.word	0x08006ef4
 800154c:	08006f1d 	.word	0x08006f1d

08001550 <CDC_ReceiveCallBack>:

void CDC_ReceiveCallBack( uint8_t * Buf, uint16_t Len )
{
 8001550:	b510      	push	{r4, lr}
 8001552:	4604      	mov	r4, r0
    HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 );
 8001554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <CDC_ReceiveCallBack+0x1c>)
 800155a:	f000 fade 	bl	8001b1a <HAL_GPIO_TogglePin>
    usb.print( Buf );
 800155e:	4621      	mov	r1, r4
}
 8001560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usb.print( Buf );
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <CDC_ReceiveCallBack+0x20>)
 8001566:	f7ff be76 	b.w	8001256 <_ZN5Print5printEPh>
 800156a:	bf00      	nop
 800156c:	40011000 	.word	0x40011000
 8001570:	20000430 	.word	0x20000430

08001574 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001574:	4770      	bx	lr
	...

08001578 <_GLOBAL__sub_I_hspi1>:
 8001578:	b510      	push	{r4, lr}
Usb usb;
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <_GLOBAL__sub_I_hspi1+0x20>)
 800157c:	f7ff fe96 	bl	80012ac <_ZN3UsbC1Ev>
Serial serial( &huart1 );
 8001580:	4906      	ldr	r1, [pc, #24]	; (800159c <_GLOBAL__sub_I_hspi1+0x24>)
 8001582:	4807      	ldr	r0, [pc, #28]	; (80015a0 <_GLOBAL__sub_I_hspi1+0x28>)
 8001584:	f7ff fe7a 	bl	800127c <_ZN6SerialC1EP20__UART_HandleTypeDef>
}
 8001588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
MAX31856 sensor( &hspi1, CS_GPIO_Port, CS_Pin );
 800158c:	2310      	movs	r3, #16
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <_GLOBAL__sub_I_hspi1+0x2c>)
 8001590:	4905      	ldr	r1, [pc, #20]	; (80015a8 <_GLOBAL__sub_I_hspi1+0x30>)
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <_GLOBAL__sub_I_hspi1+0x34>)
 8001594:	f7ff bd2e 	b.w	8000ff4 <_ZN8MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 8001598:	20000430 	.word	0x20000430
 800159c:	200003d4 	.word	0x200003d4
 80015a0:	20000424 	.word	0x20000424
 80015a4:	40010800 	.word	0x40010800
 80015a8:	2000037c 	.word	0x2000037c
 80015ac:	20000414 	.word	0x20000414

080015b0 <_GLOBAL__sub_D_hspi1>:
 80015b0:	4801      	ldr	r0, [pc, #4]	; (80015b8 <_GLOBAL__sub_D_hspi1+0x8>)
 80015b2:	f7ff bd17 	b.w	8000fe4 <_ZN8MAX31856D1Ev>
 80015b6:	bf00      	nop
 80015b8:	20000414 	.word	0x20000414

080015bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_MspInit+0x3c>)
{
 80015be:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	619a      	str	r2, [r3, #24]
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	f002 0201 	and.w	r2, r2, #1
 80015ce:	9200      	str	r2, [sp, #0]
 80015d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	69da      	ldr	r2, [r3, #28]
 80015d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015d8:	61da      	str	r2, [r3, #28]
 80015da:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e6:	6853      	ldr	r3, [r2, #4]
 80015e8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	b002      	add	sp, #8
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010000 	.word	0x40010000

08001600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001600:	b510      	push	{r4, lr}
 8001602:	4604      	mov	r4, r0
 8001604:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	2210      	movs	r2, #16
 8001608:	2100      	movs	r1, #0
 800160a:	a802      	add	r0, sp, #8
 800160c:	f003 fbc2 	bl	8004d94 <memset>
  if(hspi->Instance==SPI1)
 8001610:	6822      	ldr	r2, [r4, #0]
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_SPI_MspInit+0x6c>)
 8001614:	429a      	cmp	r2, r3
 8001616:	d126      	bne.n	8001666 <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001618:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800161c:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001620:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001624:	619a      	str	r2, [r3, #24]
 8001626:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	4811      	ldr	r0, [pc, #68]	; (8001670 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800162a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800162e:	9200      	str	r2, [sp, #0]
 8001630:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	699a      	ldr	r2, [r3, #24]
 8001634:	f042 0204 	orr.w	r2, r2, #4
 8001638:	619a      	str	r2, [r3, #24]
 800163a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f000 f978 	bl	8001944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f000 f96f 	bl	8001944 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001666:	b006      	add	sp, #24
 8001668:	bd10      	pop	{r4, pc}
 800166a:	bf00      	nop
 800166c:	40013000 	.word	0x40013000
 8001670:	40010800 	.word	0x40010800

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b510      	push	{r4, lr}
 8001676:	4604      	mov	r4, r0
 8001678:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	2210      	movs	r2, #16
 800167c:	2100      	movs	r1, #0
 800167e:	a802      	add	r0, sp, #8
 8001680:	f003 fb88 	bl	8004d94 <memset>
  if(huart->Instance==USART1)
 8001684:	6822      	ldr	r2, [r4, #0]
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_UART_MspInit+0x70>)
 8001688:	429a      	cmp	r2, r3
 800168a:	d128      	bne.n	80016de <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800168c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001690:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001694:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001698:	619a      	str	r2, [r3, #24]
 800169a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	4812      	ldr	r0, [pc, #72]	; (80016e8 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800169e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016a2:	9200      	str	r2, [sp, #0]
 80016a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	699a      	ldr	r2, [r3, #24]
 80016a8:	f042 0204 	orr.w	r2, r2, #4
 80016ac:	619a      	str	r2, [r3, #24]
 80016ae:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f000 f93d 	bl	8001944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ce:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	4805      	ldr	r0, [pc, #20]	; (80016e8 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d2:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f000 f933 	bl	8001944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016de:	b006      	add	sp, #24
 80016e0:	bd10      	pop	{r4, pc}
 80016e2:	bf00      	nop
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40010800 	.word	0x40010800

080016ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016ec:	4770      	bx	lr

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler>

080016f6 <SVC_Handler>:
 80016f6:	4770      	bx	lr

080016f8 <DebugMon_Handler>:
 80016f8:	4770      	bx	lr

080016fa <PendSV_Handler>:
 80016fa:	4770      	bx	lr

080016fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fc:	f000 b894 	b.w	8001828 <HAL_IncTick>

08001700 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001700:	4801      	ldr	r0, [pc, #4]	; (8001708 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001702:	f000 bab9 	b.w	8001c78 <HAL_PCD_IRQHandler>
 8001706:	bf00      	nop
 8001708:	200012fc 	.word	0x200012fc

0800170c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800170c:	2001      	movs	r0, #1
 800170e:	4770      	bx	lr

08001710 <_kill>:

int _kill(int pid, int sig)
{
 8001710:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001712:	f003 fb05 	bl	8004d20 <__errno>
 8001716:	2316      	movs	r3, #22
 8001718:	6003      	str	r3, [r0, #0]
	return -1;
}
 800171a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800171e:	bd08      	pop	{r3, pc}

08001720 <_exit>:

void _exit (int status)
{
 8001720:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001722:	f003 fafd 	bl	8004d20 <__errno>
 8001726:	2316      	movs	r3, #22
 8001728:	6003      	str	r3, [r0, #0]
 800172a:	e7fe      	b.n	800172a <_exit+0xa>

0800172c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <_sbrk+0x30>)
{
 800172e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001730:	6819      	ldr	r1, [r3, #0]
{
 8001732:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001734:	b909      	cbnz	r1, 800173a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001736:	490a      	ldr	r1, [pc, #40]	; (8001760 <_sbrk+0x34>)
 8001738:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	4909      	ldr	r1, [pc, #36]	; (8001764 <_sbrk+0x38>)
 800173e:	4c0a      	ldr	r4, [pc, #40]	; (8001768 <_sbrk+0x3c>)
 8001740:	4402      	add	r2, r0
 8001742:	1b09      	subs	r1, r1, r4
 8001744:	428a      	cmp	r2, r1
 8001746:	d906      	bls.n	8001756 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001748:	f003 faea 	bl	8004d20 <__errno>
 800174c:	230c      	movs	r3, #12
 800174e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001754:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001756:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001758:	e7fc      	b.n	8001754 <_sbrk+0x28>
 800175a:	bf00      	nop
 800175c:	20000434 	.word	0x20000434
 8001760:	200015f0 	.word	0x200015f0
 8001764:	20005000 	.word	0x20005000
 8001768:	00000400 	.word	0x00000400

0800176c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176c:	4770      	bx	lr
	...

08001770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001770:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001772:	e003      	b.n	800177c <LoopCopyDataInit>

08001774 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001776:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001778:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800177a:	3104      	adds	r1, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800177c:	480a      	ldr	r0, [pc, #40]	; (80017a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001780:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001782:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001784:	d3f6      	bcc.n	8001774 <CopyDataInit>
  ldr r2, =_sbss
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001788:	e002      	b.n	8001790 <LoopFillZerobss>

0800178a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800178c:	f842 3b04 	str.w	r3, [r2], #4

08001790 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001792:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001794:	d3f9      	bcc.n	800178a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001796:	f7ff ffe9 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179a:	f003 fac7 	bl	8004d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800179e:	f7ff fe1b 	bl	80013d8 <main>
  bx lr
 80017a2:	4770      	bx	lr
  ldr r3, =_sidata
 80017a4:	08007208 	.word	0x08007208
  ldr r0, =_sdata
 80017a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017ac:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 80017b0:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 80017b4:	200015ec 	.word	0x200015ec

080017b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC1_2_IRQHandler>
	...

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_InitTick+0x3c>)
{
 80017c0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c2:	7818      	ldrb	r0, [r3, #0]
 80017c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_InitTick+0x40>)
 80017ce:	6810      	ldr	r0, [r2, #0]
 80017d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80017d4:	f000 f8a0 	bl	8001918 <HAL_SYSTICK_Config>
 80017d8:	4604      	mov	r4, r0
 80017da:	b958      	cbnz	r0, 80017f4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017dc:	2d0f      	cmp	r5, #15
 80017de:	d809      	bhi.n	80017f4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	4602      	mov	r2, r0
 80017e2:	4629      	mov	r1, r5
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e8:	f000 f854 	bl	8001894 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ec:	4620      	mov	r0, r4
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_InitTick+0x44>)
 80017f0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80017f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017f4:	2001      	movs	r0, #1
 80017f6:	e7fc      	b.n	80017f2 <HAL_InitTick+0x36>
 80017f8:	20000004 	.word	0x20000004
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000008 	.word	0x20000008

08001804 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_Init+0x20>)
{
 8001806:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001812:	f000 f82d 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff ffd0 	bl	80017bc <HAL_InitTick>
  HAL_MspInit();
 800181c:	f7ff fece 	bl	80015bc <HAL_MspInit>
}
 8001820:	2000      	movs	r0, #0
 8001822:	bd08      	pop	{r3, pc}
 8001824:	40022000 	.word	0x40022000

08001828 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001828:	4a03      	ldr	r2, [pc, #12]	; (8001838 <HAL_IncTick+0x10>)
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <HAL_IncTick+0x14>)
 800182c:	6811      	ldr	r1, [r2, #0]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	440b      	add	r3, r1
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000664 	.word	0x20000664
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001840:	4b01      	ldr	r3, [pc, #4]	; (8001848 <HAL_GetTick+0x8>)
 8001842:	6818      	ldr	r0, [r3, #0]
}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000664 	.word	0x20000664

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b538      	push	{r3, r4, r5, lr}
 800184e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff fff6 	bl	8001840 <HAL_GetTick>
 8001854:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001856:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001858:	bf1e      	ittt	ne
 800185a:	4b04      	ldrne	r3, [pc, #16]	; (800186c <HAL_Delay+0x20>)
 800185c:	781b      	ldrbne	r3, [r3, #0]
 800185e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001860:	f7ff ffee 	bl	8001840 <HAL_GetTick>
 8001864:	1b40      	subs	r0, r0, r5
 8001866:	42a0      	cmp	r0, r4
 8001868:	d3fa      	bcc.n	8001860 <HAL_Delay+0x14>
  {
  }
}
 800186a:	bd38      	pop	{r3, r4, r5, pc}
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001872:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001876:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800187e:	041b      	lsls	r3, r3, #16
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800188a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800188c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b570      	push	{r4, r5, r6, lr}
 8001898:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a2:	f1c4 0507 	rsb	r5, r4, #7
 80018a6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	bf28      	it	cs
 80018ae:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b0:	2b06      	cmp	r3, #6
 80018b2:	bf98      	it	ls
 80018b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	bf88      	it	hi
 80018bc:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018be:	ea21 0303 	bic.w	r3, r1, r3
 80018c2:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	fa06 f404 	lsl.w	r4, r6, r4
 80018c8:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80018cc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ce:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	bfa8      	it	ge
 80018d4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80018d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	bfb8      	it	lt
 80018de:	4a06      	ldrlt	r2, [pc, #24]	; (80018f8 <HAL_NVIC_SetPriority+0x64>)
 80018e0:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	bfab      	itete	ge
 80018e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
 80018f4:	e000ed00 	.word	0xe000ed00
 80018f8:	e000ed14 	.word	0xe000ed14

080018fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80018fc:	2800      	cmp	r0, #0
 80018fe:	db08      	blt.n	8001912 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001900:	2301      	movs	r3, #1
 8001902:	0942      	lsrs	r2, r0, #5
 8001904:	f000 001f 	and.w	r0, r0, #31
 8001908:	fa03 f000 	lsl.w	r0, r3, r0
 800190c:	4b01      	ldr	r3, [pc, #4]	; (8001914 <HAL_NVIC_EnableIRQ+0x18>)
 800190e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100

08001918 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	3801      	subs	r0, #1
 800191a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800191e:	d20a      	bcs.n	8001936 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001948:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800194a:	4626      	mov	r6, r4
 800194c:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800194e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001af4 <HAL_GPIO_Init+0x1b0>
 8001952:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001af8 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	680a      	ldr	r2, [r1, #0]
 8001958:	fa32 f506 	lsrs.w	r5, r2, r6
 800195c:	d102      	bne.n	8001964 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800195e:	b003      	add	sp, #12
 8001960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001964:	f04f 0801 	mov.w	r8, #1
 8001968:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001970:	4590      	cmp	r8, r2
 8001972:	d17e      	bne.n	8001a72 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8001974:	684d      	ldr	r5, [r1, #4]
 8001976:	2d12      	cmp	r5, #18
 8001978:	f000 80a9 	beq.w	8001ace <HAL_GPIO_Init+0x18a>
 800197c:	f200 8082 	bhi.w	8001a84 <HAL_GPIO_Init+0x140>
 8001980:	2d02      	cmp	r5, #2
 8001982:	f000 80a1 	beq.w	8001ac8 <HAL_GPIO_Init+0x184>
 8001986:	d876      	bhi.n	8001a76 <HAL_GPIO_Init+0x132>
 8001988:	2d00      	cmp	r5, #0
 800198a:	f000 8088 	beq.w	8001a9e <HAL_GPIO_Init+0x15a>
 800198e:	2d01      	cmp	r5, #1
 8001990:	f000 8098 	beq.w	8001ac4 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001994:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001998:	2aff      	cmp	r2, #255	; 0xff
 800199a:	bf93      	iteet	ls
 800199c:	4682      	movls	sl, r0
 800199e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80019a2:	3d08      	subhi	r5, #8
 80019a4:	f8d0 b000 	ldrls.w	fp, [r0]
 80019a8:	bf92      	itee	ls
 80019aa:	00b5      	lslls	r5, r6, #2
 80019ac:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80019b0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b2:	fa09 f805 	lsl.w	r8, r9, r5
 80019b6:	ea2b 0808 	bic.w	r8, fp, r8
 80019ba:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019be:	bf88      	it	hi
 80019c0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c4:	ea48 0505 	orr.w	r5, r8, r5
 80019c8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019cc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80019d0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80019d4:	d04d      	beq.n	8001a72 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d6:	4f44      	ldr	r7, [pc, #272]	; (8001ae8 <HAL_GPIO_Init+0x1a4>)
 80019d8:	f026 0803 	bic.w	r8, r6, #3
 80019dc:	69bd      	ldr	r5, [r7, #24]
 80019de:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80019e2:	f045 0501 	orr.w	r5, r5, #1
 80019e6:	61bd      	str	r5, [r7, #24]
 80019e8:	69bd      	ldr	r5, [r7, #24]
 80019ea:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80019ee:	f005 0501 	and.w	r5, r5, #1
 80019f2:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019f4:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019f8:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019fa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80019fe:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a02:	fa09 f90b 	lsl.w	r9, r9, fp
 8001a06:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a0a:	4d38      	ldr	r5, [pc, #224]	; (8001aec <HAL_GPIO_Init+0x1a8>)
 8001a0c:	42a8      	cmp	r0, r5
 8001a0e:	d063      	beq.n	8001ad8 <HAL_GPIO_Init+0x194>
 8001a10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a14:	42a8      	cmp	r0, r5
 8001a16:	d061      	beq.n	8001adc <HAL_GPIO_Init+0x198>
 8001a18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a1c:	42a8      	cmp	r0, r5
 8001a1e:	d05f      	beq.n	8001ae0 <HAL_GPIO_Init+0x19c>
 8001a20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a24:	42a8      	cmp	r0, r5
 8001a26:	bf0c      	ite	eq
 8001a28:	2503      	moveq	r5, #3
 8001a2a:	2504      	movne	r5, #4
 8001a2c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001a30:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001a34:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001a38:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3e:	bf14      	ite	ne
 8001a40:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a42:	4395      	biceq	r5, r2
 8001a44:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001a46:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a48:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001a4c:	bf14      	ite	ne
 8001a4e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a50:	4395      	biceq	r5, r2
 8001a52:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a54:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a56:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	bf14      	ite	ne
 8001a5c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5e:	4395      	biceq	r5, r2
 8001a60:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a62:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a64:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a68:	bf14      	ite	ne
 8001a6a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a6c:	ea25 0202 	biceq.w	r2, r5, r2
 8001a70:	60da      	str	r2, [r3, #12]
	position++;
 8001a72:	3601      	adds	r6, #1
 8001a74:	e76f      	b.n	8001956 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001a76:	2d03      	cmp	r5, #3
 8001a78:	d022      	beq.n	8001ac0 <HAL_GPIO_Init+0x17c>
 8001a7a:	2d11      	cmp	r5, #17
 8001a7c:	d18a      	bne.n	8001994 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a7e:	68cc      	ldr	r4, [r1, #12]
 8001a80:	3404      	adds	r4, #4
          break;
 8001a82:	e787      	b.n	8001994 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001a84:	4f1a      	ldr	r7, [pc, #104]	; (8001af0 <HAL_GPIO_Init+0x1ac>)
 8001a86:	42bd      	cmp	r5, r7
 8001a88:	d009      	beq.n	8001a9e <HAL_GPIO_Init+0x15a>
 8001a8a:	d812      	bhi.n	8001ab2 <HAL_GPIO_Init+0x16e>
 8001a8c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001afc <HAL_GPIO_Init+0x1b8>
 8001a90:	454d      	cmp	r5, r9
 8001a92:	d004      	beq.n	8001a9e <HAL_GPIO_Init+0x15a>
 8001a94:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001a98:	454d      	cmp	r5, r9
 8001a9a:	f47f af7b 	bne.w	8001994 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a9e:	688c      	ldr	r4, [r1, #8]
 8001aa0:	b1c4      	cbz	r4, 8001ad4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aa2:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001aa4:	bf0c      	ite	eq
 8001aa6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001aaa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aae:	2408      	movs	r4, #8
 8001ab0:	e770      	b.n	8001994 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001ab2:	4565      	cmp	r5, ip
 8001ab4:	d0f3      	beq.n	8001a9e <HAL_GPIO_Init+0x15a>
 8001ab6:	4575      	cmp	r5, lr
 8001ab8:	d0f1      	beq.n	8001a9e <HAL_GPIO_Init+0x15a>
 8001aba:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001b00 <HAL_GPIO_Init+0x1bc>
 8001abe:	e7eb      	b.n	8001a98 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ac0:	2400      	movs	r4, #0
 8001ac2:	e767      	b.n	8001994 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac4:	68cc      	ldr	r4, [r1, #12]
          break;
 8001ac6:	e765      	b.n	8001994 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ac8:	68cc      	ldr	r4, [r1, #12]
 8001aca:	3408      	adds	r4, #8
          break;
 8001acc:	e762      	b.n	8001994 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ace:	68cc      	ldr	r4, [r1, #12]
 8001ad0:	340c      	adds	r4, #12
          break;
 8001ad2:	e75f      	b.n	8001994 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ad4:	2404      	movs	r4, #4
 8001ad6:	e75d      	b.n	8001994 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad8:	2500      	movs	r5, #0
 8001ada:	e7a7      	b.n	8001a2c <HAL_GPIO_Init+0xe8>
 8001adc:	2501      	movs	r5, #1
 8001ade:	e7a5      	b.n	8001a2c <HAL_GPIO_Init+0xe8>
 8001ae0:	2502      	movs	r5, #2
 8001ae2:	e7a3      	b.n	8001a2c <HAL_GPIO_Init+0xe8>
 8001ae4:	40010400 	.word	0x40010400
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010800 	.word	0x40010800
 8001af0:	10210000 	.word	0x10210000
 8001af4:	10310000 	.word	0x10310000
 8001af8:	10320000 	.word	0x10320000
 8001afc:	10110000 	.word	0x10110000
 8001b00:	10220000 	.word	0x10220000

08001b04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b04:	6883      	ldr	r3, [r0, #8]
 8001b06:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001b08:	bf14      	ite	ne
 8001b0a:	2001      	movne	r0, #1
 8001b0c:	2000      	moveq	r0, #0
 8001b0e:	4770      	bx	lr

08001b10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b10:	b10a      	cbz	r2, 8001b16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b12:	6101      	str	r1, [r0, #16]
  }
}
 8001b14:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b16:	0409      	lsls	r1, r1, #16
 8001b18:	e7fb      	b.n	8001b12 <HAL_GPIO_WritePin+0x2>

08001b1a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b1a:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b1c:	ea01 0203 	and.w	r2, r1, r3
 8001b20:	ea21 0103 	bic.w	r1, r1, r3
 8001b24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b28:	6101      	str	r1, [r0, #16]
}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b2e:	4604      	mov	r4, r0
{
 8001b30:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001b32:	b310      	cbz	r0, 8001b7a <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b34:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001b38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b3c:	b91b      	cbnz	r3, 8001b46 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b3e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b42:	f002 ff8d 	bl	8004a60 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b46:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b48:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b4a:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8001b4c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b50:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8001b54:	f001 fc25 	bl	80033a2 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b5c:	682b      	ldr	r3, [r5, #0]
 8001b5e:	4625      	mov	r5, r4
 8001b60:	6033      	str	r3, [r6, #0]
 8001b62:	1d27      	adds	r7, r4, #4
 8001b64:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001b68:	f855 0b10 	ldr.w	r0, [r5], #16
 8001b6c:	f001 fc09 	bl	8003382 <USB_CoreInit>
 8001b70:	4606      	mov	r6, r0
 8001b72:	b120      	cbz	r0, 8001b7e <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b74:	2302      	movs	r3, #2
 8001b76:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	e04b      	b.n	8001c16 <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b7e:	4601      	mov	r1, r0
 8001b80:	6820      	ldr	r0, [r4, #0]
 8001b82:	f001 fc18 	bl	80033b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b86:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b88:	f04f 0e01 	mov.w	lr, #1
 8001b8c:	2628      	movs	r6, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b8e:	4601      	mov	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b90:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001b94:	b2c2      	uxtb	r2, r0
 8001b96:	4594      	cmp	ip, r2
 8001b98:	f100 0001 	add.w	r0, r0, #1
 8001b9c:	d818      	bhi.n	8001bd0 <HAL_PCD_Init+0xa4>
 8001b9e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ba0:	2628      	movs	r6, #40	; 0x28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba6:	4584      	cmp	ip, r0
 8001ba8:	f103 0301 	add.w	r3, r3, #1
 8001bac:	d81d      	bhi.n	8001bea <HAL_PCD_Init+0xbe>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb0:	466e      	mov	r6, sp
 8001bb2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	6033      	str	r3, [r6, #0]
 8001bb8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001bbc:	6820      	ldr	r0, [r4, #0]
 8001bbe:	f001 fbfc 	bl	80033ba <USB_DevInit>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	4605      	mov	r5, r0
 8001bc6:	b1f8      	cbz	r0, 8001c08 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
 8001bce:	e7d4      	b.n	8001b7a <HAL_PCD_Init+0x4e>
 8001bd0:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001bd4:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001bd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bde:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001be2:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001be6:	6419      	str	r1, [r3, #64]	; 0x40
 8001be8:	e7d4      	b.n	8001b94 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8001bea:	fb06 4200 	mla	r2, r6, r0, r4
 8001bee:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001bf2:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bf6:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bfa:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bfe:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c02:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 8001c06:	e7cd      	b.n	8001ba4 <HAL_PCD_Init+0x78>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001c08:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c0c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c10:	6820      	ldr	r0, [r4, #0]
 8001c12:	f001 fe52 	bl	80038ba <USB_DevDisconnect>

  return HAL_OK;
}
 8001c16:	4628      	mov	r0, r5
 8001c18:	b007      	add	sp, #28
 8001c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c1c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001c1e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8001c22:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d010      	beq.n	8001c4a <HAL_PCD_Start+0x2e>
 8001c28:	2501      	movs	r5, #1
 8001c2a:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001c2e:	6800      	ldr	r0, [r0, #0]
 8001c30:	f001 fbae 	bl	8003390 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c34:	4629      	mov	r1, r5
 8001c36:	4620      	mov	r0, r4
 8001c38:	f003 f843 	bl	8004cc2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	f001 fe3a 	bl	80038b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001c48:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	e7fc      	b.n	8001c48 <HAL_PCD_Start+0x2c>

08001c4e <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001c4e:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8001c52:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001c54:	2a01      	cmp	r2, #1
{
 8001c56:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001c58:	d00b      	beq.n	8001c72 <HAL_PCD_SetAddress+0x24>
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001c60:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c64:	6800      	ldr	r0, [r0, #0]
 8001c66:	f001 fe20 	bl	80038aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001c70:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001c72:	2002      	movs	r0, #2
 8001c74:	e7fc      	b.n	8001c70 <HAL_PCD_SetAddress+0x22>
	...

08001c78 <HAL_PCD_IRQHandler>:
{
 8001c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c80:	6800      	ldr	r0, [r0, #0]
 8001c82:	f001 fe1c 	bl	80038be <USB_ReadInterrupts>
 8001c86:	0402      	lsls	r2, r0, #16
 8001c88:	d509      	bpl.n	8001c9e <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c8a:	f8df 9828 	ldr.w	r9, [pc, #2088]	; 80024b4 <HAL_PCD_IRQHandler+0x83c>
 8001c8e:	f8df 8828 	ldr.w	r8, [pc, #2088]	; 80024b8 <HAL_PCD_IRQHandler+0x840>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c92:	6820      	ldr	r0, [r4, #0]
 8001c94:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	f100 80bc 	bmi.w	8001e16 <HAL_PCD_IRQHandler+0x19e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	f001 fe0d 	bl	80038be <USB_ReadInterrupts>
 8001ca4:	0543      	lsls	r3, r0, #21
 8001ca6:	d50f      	bpl.n	8001cc8 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ca8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001caa:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cb4:	041b      	lsls	r3, r3, #16
 8001cb6:	0c1b      	lsrs	r3, r3, #16
 8001cb8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001cbc:	f002 ff0b 	bl	8004ad6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff ffc3 	bl	8001c4e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001cc8:	6820      	ldr	r0, [r4, #0]
 8001cca:	f001 fdf8 	bl	80038be <USB_ReadInterrupts>
 8001cce:	0447      	lsls	r7, r0, #17
 8001cd0:	d508      	bpl.n	8001ce4 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001cd2:	6822      	ldr	r2, [r4, #0]
 8001cd4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ce4:	6820      	ldr	r0, [r4, #0]
 8001ce6:	f001 fdea 	bl	80038be <USB_ReadInterrupts>
 8001cea:	0486      	lsls	r6, r0, #18
 8001cec:	d508      	bpl.n	8001d00 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cee:	6822      	ldr	r2, [r4, #0]
 8001cf0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cf8:	041b      	lsls	r3, r3, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d00:	6820      	ldr	r0, [r4, #0]
 8001d02:	f001 fddc 	bl	80038be <USB_ReadInterrupts>
 8001d06:	04c5      	lsls	r5, r0, #19
 8001d08:	d51c      	bpl.n	8001d44 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d0a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001d0c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d0e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001d12:	f023 0304 	bic.w	r3, r3, #4
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d1e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001d22:	f023 0308 	bic.w	r3, r3, #8
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001d2e:	f002 fef5 	bl	8004b1c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d3c:	041b      	lsls	r3, r3, #16
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d44:	6820      	ldr	r0, [r4, #0]
 8001d46:	f001 fdba 	bl	80038be <USB_ReadInterrupts>
 8001d4a:	0500      	lsls	r0, r0, #20
 8001d4c:	d541      	bpl.n	8001dd2 <HAL_PCD_IRQHandler+0x15a>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001d56:	f82d 1012 	strh.w	r1, [sp, r2, lsl #1]
 8001d5a:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8001d5c:	2a08      	cmp	r2, #8
 8001d5e:	d1f8      	bne.n	8001d52 <HAL_PCD_IRQHandler+0xda>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d60:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d6c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	0c12      	lsrs	r2, r2, #16
 8001d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d7c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001d80:	0551      	lsls	r1, r2, #21
 8001d82:	d5fb      	bpl.n	8001d7c <HAL_PCD_IRQHandler+0x104>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d84:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8c:	0412      	lsls	r2, r2, #16
 8001d8e:	0c12      	lsrs	r2, r2, #16
 8001d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001d94:	2200      	movs	r2, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d96:	f83d 1012 	ldrh.w	r1, [sp, r2, lsl #1]
 8001d9a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8001d9e:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8001da0:	2a08      	cmp	r2, #8
 8001da2:	d1f8      	bne.n	8001d96 <HAL_PCD_IRQHandler+0x11e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001da4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001da8:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001daa:	f042 0208 	orr.w	r2, r2, #8
 8001dae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001db2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dba:	0412      	lsls	r2, r2, #16
 8001dbc:	0c12      	lsrs	r2, r2, #16
 8001dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001dc2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001dc6:	f042 0204 	orr.w	r2, r2, #4
 8001dca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001dce:	f002 fe95 	bl	8004afc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001dd2:	6820      	ldr	r0, [r4, #0]
 8001dd4:	f001 fd73 	bl	80038be <USB_ReadInterrupts>
 8001dd8:	0582      	lsls	r2, r0, #22
 8001dda:	d50b      	bpl.n	8001df4 <HAL_PCD_IRQHandler+0x17c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ddc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001dde:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001de0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001de8:	041b      	lsls	r3, r3, #16
 8001dea:	0c1b      	lsrs	r3, r3, #16
 8001dec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001df0:	f002 fe6d 	bl	8004ace <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001df4:	6820      	ldr	r0, [r4, #0]
 8001df6:	f001 fd62 	bl	80038be <USB_ReadInterrupts>
 8001dfa:	05c3      	lsls	r3, r0, #23
 8001dfc:	d508      	bpl.n	8001e10 <HAL_PCD_IRQHandler+0x198>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001dfe:	6822      	ldr	r2, [r4, #0]
 8001e00:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e08:	041b      	lsls	r3, r3, #16
 8001e0a:	0c1b      	lsrs	r3, r3, #16
 8001e0c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001e10:	b005      	add	sp, #20
 8001e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8001e16:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001e1a:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8001e1c:	f011 060f 	ands.w	r6, r1, #15
 8001e20:	f040 80b1 	bne.w	8001f86 <HAL_PCD_IRQHandler+0x30e>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e24:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e28:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e2a:	d12a      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x20a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e2c:	ea09 0303 	and.w	r3, r9, r3
 8001e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e34:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e36:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001e3a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001e3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001e42:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001e46:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001e4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e50:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001e52:	4413      	add	r3, r2
 8001e54:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e56:	4620      	mov	r0, r4
 8001e58:	f002 fe31 	bl	8004abe <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f43f af16 	beq.w	8001c92 <HAL_PCD_IRQHandler+0x1a>
 8001e66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	f47f af12 	bne.w	8001c92 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e6e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001e72:	6821      	ldr	r1, [r4, #0]
 8001e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e78:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e7c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001e80:	e707      	b.n	8001c92 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e82:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e84:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8001e88:	d020      	beq.n	8001ecc <HAL_PCD_IRQHandler+0x254>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e8a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001e8e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e92:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001e9a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e9e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ea2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001eaa:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001eae:	f001 ffc7 	bl	8003e40 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eb2:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001eb4:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eb6:	8813      	ldrh	r3, [r2, #0]
 8001eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebc:	051b      	lsls	r3, r3, #20
 8001ebe:	0d1b      	lsrs	r3, r3, #20
 8001ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001ec6:	f002 fdeb 	bl	8004aa0 <HAL_PCD_SetupStageCallback>
 8001eca:	e6e2      	b.n	8001c92 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ecc:	041f      	lsls	r7, r3, #16
 8001ece:	f57f aee0 	bpl.w	8001c92 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ed2:	8803      	ldrh	r3, [r0, #0]
 8001ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed8:	051b      	lsls	r3, r3, #20
 8001eda:	0d1b      	lsrs	r3, r3, #20
 8001edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee0:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ee2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001ee6:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001eea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001eee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001ef2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001efa:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001efe:	b18b      	cbz	r3, 8001f24 <HAL_PCD_IRQHandler+0x2ac>
 8001f00:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001f04:	b171      	cbz	r1, 8001f24 <HAL_PCD_IRQHandler+0x2ac>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f06:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001f0a:	f001 ff99 	bl	8003e40 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001f12:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f16:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001f18:	4413      	add	r3, r2
 8001f1a:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f002 fdc4 	bl	8004aac <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f24:	6821      	ldr	r1, [r4, #0]
 8001f26:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8001f2a:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001f2e:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	b9bd      	cbnz	r5, 8001f66 <HAL_PCD_IRQHandler+0x2ee>
 8001f36:	5ac2      	ldrh	r2, [r0, r3]
 8001f38:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001f3c:	0412      	lsls	r2, r2, #16
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	52c2      	strh	r2, [r0, r3]
 8001f42:	5ac2      	ldrh	r2, [r0, r3]
 8001f44:	ea48 0202 	orr.w	r2, r8, r2
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f4c:	880b      	ldrh	r3, [r1, #0]
 8001f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f62:	800b      	strh	r3, [r1, #0]
 8001f64:	e695      	b.n	8001c92 <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f66:	2d3e      	cmp	r5, #62	; 0x3e
 8001f68:	d805      	bhi.n	8001f76 <HAL_PCD_IRQHandler+0x2fe>
 8001f6a:	086a      	lsrs	r2, r5, #1
 8001f6c:	07ee      	lsls	r6, r5, #31
 8001f6e:	bf48      	it	mi
 8001f70:	3201      	addmi	r2, #1
 8001f72:	0292      	lsls	r2, r2, #10
 8001f74:	e7e8      	b.n	8001f48 <HAL_PCD_IRQHandler+0x2d0>
 8001f76:	096a      	lsrs	r2, r5, #5
 8001f78:	06ed      	lsls	r5, r5, #27
 8001f7a:	bf08      	it	eq
 8001f7c:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8001f80:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8001f84:	e7e0      	b.n	8001f48 <HAL_PCD_IRQHandler+0x2d0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f86:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
 8001f8a:	b2bf      	uxth	r7, r7
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f8c:	0439      	lsls	r1, r7, #16
 8001f8e:	f140 80f2 	bpl.w	8002176 <HAL_PCD_IRQHandler+0x4fe>
        if (ep->doublebuffer == 0U)
 8001f92:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f94:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001f98:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa0:	051b      	lsls	r3, r3, #20
 8001fa2:	0d1b      	lsrs	r3, r3, #20
 8001fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa8:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001fac:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8001fb0:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8001fb4:	b9ab      	cbnz	r3, 8001fe2 <HAL_PCD_IRQHandler+0x36a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fb6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001fba:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8001fbe:	3306      	adds	r3, #6
 8001fc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001fc4:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8001fc8:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001fcc:	2d00      	cmp	r5, #0
 8001fce:	f000 80b6 	beq.w	800213e <HAL_PCD_IRQHandler+0x4c6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fd8:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001fdc:	f001 ff30 	bl	8003e40 <USB_ReadPMA>
 8001fe0:	e0ad      	b.n	800213e <HAL_PCD_IRQHandler+0x4c6>
          if (ep->type == EP_TYPE_BULK)
 8001fe2:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8001fe6:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	f040 8089 	bne.w	8002102 <HAL_PCD_IRQHandler+0x48a>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ff0:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 8001ff4:	ea4f 05c2 	mov.w	r5, r2, lsl #3
 8001ff8:	f8d1 3180 	ldr.w	r3, [r1, #384]	; 0x180
 8001ffc:	f007 0e40 	and.w	lr, r7, #64	; 0x40
 8002000:	d03e      	beq.n	8002080 <HAL_PCD_IRQHandler+0x408>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002002:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 8002006:	4455      	add	r5, sl
 8002008:	3502      	adds	r5, #2
 800200a:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 800200e:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002012:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
    }
    else
    {
      ep->xfer_len = 0U;
 8002014:	bf8c      	ite	hi
 8002016:	2300      	movhi	r3, #0
      ep->xfer_len -= count;
 8002018:	1b5b      	subls	r3, r3, r5
      ep->xfer_len = 0U;
 800201a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
 800201e:	2328      	movs	r3, #40	; 0x28
 8002020:	fb03 4306 	mla	r3, r3, r6, r4
 8002024:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002028:	b96b      	cbnz	r3, 8002046 <HAL_PCD_IRQHandler+0x3ce>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800202a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800202e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002036:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800203a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002042:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002046:	f1be 0f00 	cmp.w	lr, #0
 800204a:	d010      	beq.n	800206e <HAL_PCD_IRQHandler+0x3f6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800204c:	2328      	movs	r3, #40	; 0x28
 800204e:	fb03 4306 	mla	r3, r3, r6, r4
 8002052:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8002056:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800205a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800205e:	051b      	lsls	r3, r3, #20
 8002060:	0d1b      	lsrs	r3, r3, #20
 8002062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002066:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800206a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800206e:	2d00      	cmp	r5, #0
 8002070:	d065      	beq.n	800213e <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002072:	2128      	movs	r1, #40	; 0x28
 8002074:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002078:	462b      	mov	r3, r5
 800207a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800207e:	e7ab      	b.n	8001fd8 <HAL_PCD_IRQHandler+0x360>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002080:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 8002084:	445d      	add	r5, fp
 8002086:	3506      	adds	r5, #6
 8002088:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 800208c:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002090:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
 8002092:	bf9c      	itt	ls
 8002094:	1b5b      	subls	r3, r3, r5
 8002096:	f8c1 3180 	strls.w	r3, [r1, #384]	; 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800209a:	f04f 0328 	mov.w	r3, #40	; 0x28
 800209e:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 80020a2:	bf88      	it	hi
 80020a4:	f8c1 a180 	strhi.w	sl, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80020a8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80020ac:	b96b      	cbnz	r3, 80020ca <HAL_PCD_IRQHandler+0x452>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020ca:	f1be 0f00 	cmp.w	lr, #0
 80020ce:	d110      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x47a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020d0:	2328      	movs	r3, #40	; 0x28
 80020d2:	fb03 4306 	mla	r3, r3, r6, r4
 80020d6:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80020da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020e2:	051b      	lsls	r3, r3, #20
 80020e4:	0d1b      	lsrs	r3, r3, #20
 80020e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80020f2:	b325      	cbz	r5, 800213e <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020f4:	2128      	movs	r1, #40	; 0x28
 80020f6:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020fa:	462b      	mov	r3, r5
 80020fc:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002100:	e76a      	b.n	8001fd8 <HAL_PCD_IRQHandler+0x360>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002102:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800210a:	051b      	lsls	r3, r3, #20
 800210c:	0d1b      	lsrs	r3, r3, #20
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002116:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800211a:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 800211e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002128:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800212c:	d05e      	beq.n	80021ec <HAL_PCD_IRQHandler+0x574>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800212e:	3202      	adds	r2, #2
 8002130:	4413      	add	r3, r2
 8002132:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002136:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 800213a:	2d00      	cmp	r5, #0
 800213c:	d19c      	bne.n	8002078 <HAL_PCD_IRQHandler+0x400>
        ep->xfer_count += count;
 800213e:	2128      	movs	r1, #40	; 0x28
 8002140:	4371      	muls	r1, r6
 8002142:	1863      	adds	r3, r4, r1
 8002144:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002148:	442a      	add	r2, r5
 800214a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800214e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002152:	442a      	add	r2, r5
 8002154:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002158:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800215c:	b11a      	cbz	r2, 8002166 <HAL_PCD_IRQHandler+0x4ee>
 800215e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002162:	429d      	cmp	r5, r3
 8002164:	d24b      	bcs.n	80021fe <HAL_PCD_IRQHandler+0x586>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002166:	2328      	movs	r3, #40	; 0x28
 8002168:	fb03 4306 	mla	r3, r3, r6, r4
 800216c:	4620      	mov	r0, r4
 800216e:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002172:	f002 fc9b 	bl	8004aac <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002176:	063a      	lsls	r2, r7, #24
 8002178:	f57f ad8b 	bpl.w	8001c92 <HAL_PCD_IRQHandler+0x1a>
 800217c:	2528      	movs	r5, #40	; 0x28
 800217e:	6820      	ldr	r0, [r4, #0]
 8002180:	fb05 4506 	mla	r5, r5, r6, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002184:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002188:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800218c:	ea09 0303 	and.w	r3, r9, r3
 8002190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002194:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8002198:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800219c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d101      	bne.n	80021a8 <HAL_PCD_IRQHandler+0x530>
 80021a4:	05fb      	lsls	r3, r7, #23
 80021a6:	d43d      	bmi.n	8002224 <HAL_PCD_IRQHandler+0x5ac>
          if (ep->xfer_len > TxByteNbre)
 80021a8:	2328      	movs	r3, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021aa:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 80021ae:	fb03 4c06 	mla	ip, r3, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021b2:	f10e 0e02 	add.w	lr, lr, #2
 80021b6:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
 80021ba:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 80021be:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 80021c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80021c6:	4297      	cmp	r7, r2
            ep->xfer_len = 0U;
 80021c8:	bf92      	itee	ls
 80021ca:	2100      	movls	r1, #0
            ep->xfer_len -= TxByteNbre;
 80021cc:	1abf      	subhi	r7, r7, r2
 80021ce:	f8cc 7040 	strhi.w	r7, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80021d2:	fb03 4706 	mla	r7, r3, r6, r4
            ep->xfer_len = 0U;
 80021d6:	bf98      	it	ls
 80021d8:	f8cc 1040 	strls.w	r1, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80021dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021de:	b9a9      	cbnz	r1, 800220c <HAL_PCD_IRQHandler+0x594>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021e0:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80021e4:	4620      	mov	r0, r4
 80021e6:	f002 fc6a 	bl	8004abe <HAL_PCD_DataInStageCallback>
 80021ea:	e552      	b.n	8001c92 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021ec:	3206      	adds	r2, #6
 80021ee:	4413      	add	r3, r2
 80021f0:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80021f4:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80021f8:	2d00      	cmp	r5, #0
 80021fa:	d0a0      	beq.n	800213e <HAL_PCD_IRQHandler+0x4c6>
 80021fc:	e77d      	b.n	80020fa <HAL_PCD_IRQHandler+0x482>
        ep = &hpcd->OUT_ep[epindex];
 80021fe:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002202:	4421      	add	r1, r4
 8002204:	6820      	ldr	r0, [r4, #0]
 8002206:	f001 fb6f 	bl	80038e8 <USB_EPStartXfer>
 800220a:	e7b4      	b.n	8002176 <HAL_PCD_IRQHandler+0x4fe>
            ep->xfer_buff += TxByteNbre;
 800220c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 800220e:	fb06 3303 	mla	r3, r6, r3, r3
            ep->xfer_buff += TxByteNbre;
 8002212:	4411      	add	r1, r2
 8002214:	63f9      	str	r1, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002218:	440a      	add	r2, r1
 800221a:	647a      	str	r2, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800221c:	18e1      	adds	r1, r4, r3
 800221e:	f001 fb63 	bl	80038e8 <USB_EPStartXfer>
 8002222:	e536      	b.n	8001c92 <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002224:	f017 0e40 	ands.w	lr, r7, #64	; 0x40
 8002228:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800222c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800222e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002232:	f000 809e 	beq.w	8002372 <HAL_PCD_IRQHandler+0x6fa>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002236:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 800223a:	b2bf      	uxth	r7, r7
 800223c:	44f4      	add	ip, lr
 800223e:	f10c 0c02 	add.w	ip, ip, #2
 8002242:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]

    if (ep->xfer_len > TxByteNbre)
 8002246:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800224a:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 800224c:	bf2c      	ite	cs
 800224e:	2300      	movcs	r3, #0
      ep->xfer_len -= TxByteNbre;
 8002250:	eba3 030c 	subcc.w	r3, r3, ip
      ep->xfer_len = 0U;
 8002254:	642b      	str	r3, [r5, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002256:	2328      	movs	r3, #40	; 0x28
 8002258:	fb03 4306 	mla	r3, r3, r6, r4
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	b9ab      	cbnz	r3, 800228c <HAL_PCD_IRQHandler+0x614>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002260:	4620      	mov	r0, r4
 8002262:	f002 fc2c 	bl	8004abe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002266:	2f00      	cmp	r7, #0
 8002268:	f000 80a1 	beq.w	80023ae <HAL_PCD_IRQHandler+0x736>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800226c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002270:	6822      	ldr	r2, [r4, #0]
 8002272:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800227a:	051b      	lsls	r3, r3, #20
 800227c:	0d1b      	lsrs	r3, r3, #20
 800227e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002286:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800228a:	e090      	b.n	80023ae <HAL_PCD_IRQHandler+0x736>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800228c:	b15f      	cbz	r7, 80022a6 <HAL_PCD_IRQHandler+0x62e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800228e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002296:	051b      	lsls	r3, r3, #20
 8002298:	0d1b      	lsrs	r3, r3, #20
 800229a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800229e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80022a6:	2328      	movs	r3, #40	; 0x28
 80022a8:	fb03 4306 	mla	r3, r3, r6, r4
 80022ac:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80022b0:	2a01      	cmp	r2, #1
 80022b2:	d17c      	bne.n	80023ae <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 80022b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80022b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80022b8:	4462      	add	r2, ip
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80022bc:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80022be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80022c0:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 80022c2:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 80022c4:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80022c6:	d325      	bcc.n	8002314 <HAL_PCD_IRQHandler+0x69c>
          ep->xfer_len_db -= len;
 80022c8:	1abf      	subs	r7, r7, r2
 80022ca:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022cc:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 80022d0:	b293      	uxth	r3, r2
 80022d2:	2f00      	cmp	r7, #0
 80022d4:	d141      	bne.n	800235a <HAL_PCD_IRQHandler+0x6e2>
 80022d6:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80022da:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 80022de:	44bc      	add	ip, r7
 80022e0:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 80022e4:	013f      	lsls	r7, r7, #4
 80022e6:	bb02      	cbnz	r2, 800232a <HAL_PCD_IRQHandler+0x6b2>
 80022e8:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80022ec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80022f0:	0412      	lsls	r2, r2, #16
 80022f2:	0c12      	lsrs	r2, r2, #16
 80022f4:	f82c 2007 	strh.w	r2, [ip, r7]
 80022f8:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80022fc:	ea48 0202 	orr.w	r2, r8, r2
 8002300:	b292      	uxth	r2, r2
 8002302:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002306:	2228      	movs	r2, #40	; 0x28
 8002308:	fb02 4606 	mla	r6, r2, r6, r4
 800230c:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800230e:	f001 fadb 	bl	80038c8 <USB_WritePMA>
 8002312:	e04c      	b.n	80023ae <HAL_PCD_IRQHandler+0x736>
        else if (ep->xfer_len_db == 0U)
 8002314:	b91f      	cbnz	r7, 800231e <HAL_PCD_IRQHandler+0x6a6>
          ep->xfer_fill_db = 0U;
 8002316:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 800231a:	4662      	mov	r2, ip
 800231c:	e7d6      	b.n	80022cc <HAL_PCD_IRQHandler+0x654>
          ep->xfer_fill_db = 0U;
 800231e:	2200      	movs	r2, #0
 8002320:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8002324:	649a      	str	r2, [r3, #72]	; 0x48
 8002326:	463a      	mov	r2, r7
 8002328:	e7d0      	b.n	80022cc <HAL_PCD_IRQHandler+0x654>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800232a:	2a3e      	cmp	r2, #62	; 0x3e
 800232c:	d80c      	bhi.n	8002348 <HAL_PCD_IRQHandler+0x6d0>
 800232e:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8002332:	07d2      	lsls	r2, r2, #31
 8002334:	bf48      	it	mi
 8002336:	f10e 0e01 	addmi.w	lr, lr, #1
 800233a:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 800233e:	fa1f fe8e 	uxth.w	lr, lr
 8002342:	f82c e007 	strh.w	lr, [ip, r7]
 8002346:	e7de      	b.n	8002306 <HAL_PCD_IRQHandler+0x68e>
 8002348:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800234c:	06d2      	lsls	r2, r2, #27
 800234e:	bf08      	it	eq
 8002350:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 8002354:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8002358:	e7f1      	b.n	800233e <HAL_PCD_IRQHandler+0x6c6>
 800235a:	2f01      	cmp	r7, #1
 800235c:	d1d3      	bne.n	8002306 <HAL_PCD_IRQHandler+0x68e>
 800235e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002362:	f200 4704 	addw	r7, r0, #1028	; 0x404
 8002366:	4417      	add	r7, r2
 8002368:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	52bb      	strh	r3, [r7, r2]
 8002370:	e7c9      	b.n	8002306 <HAL_PCD_IRQHandler+0x68e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002372:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 8002376:	b2bf      	uxth	r7, r7
 8002378:	44d4      	add	ip, sl
 800237a:	f10c 0c06 	add.w	ip, ip, #6
 800237e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 8002382:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002386:	459c      	cmp	ip, r3
      ep->xfer_len -= TxByteNbre;
 8002388:	bf9c      	itt	ls
 800238a:	eba3 030c 	subls.w	r3, r3, ip
 800238e:	642b      	strls	r3, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002390:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002394:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 8002398:	bf88      	it	hi
 800239a:	f8c5 e040 	strhi.w	lr, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	b9bb      	cbnz	r3, 80023d2 <HAL_PCD_IRQHandler+0x75a>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023a2:	4620      	mov	r0, r4
 80023a4:	f002 fb8b 	bl	8004abe <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023a8:	2f00      	cmp	r7, #0
 80023aa:	f43f af5f 	beq.w	800226c <HAL_PCD_IRQHandler+0x5f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80023ae:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80023b2:	6822      	ldr	r2, [r4, #0]
 80023b4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80023b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80023c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023cc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80023d0:	e45f      	b.n	8001c92 <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023d2:	b95f      	cbnz	r7, 80023ec <HAL_PCD_IRQHandler+0x774>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023d4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80023d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	0d1b      	lsrs	r3, r3, #20
 80023e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80023ec:	2328      	movs	r3, #40	; 0x28
 80023ee:	fb03 4306 	mla	r3, r3, r6, r4
 80023f2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80023f6:	2a01      	cmp	r2, #1
 80023f8:	d1d9      	bne.n	80023ae <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 80023fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80023fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80023fe:	4462      	add	r2, ip
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002402:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8002404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8002406:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8002408:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 800240a:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800240c:	d323      	bcc.n	8002456 <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db -= len;
 800240e:	1abf      	subs	r7, r7, r2
 8002410:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002412:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8002416:	b293      	uxth	r3, r2
 8002418:	2f00      	cmp	r7, #0
 800241a:	d13f      	bne.n	800249c <HAL_PCD_IRQHandler+0x824>
 800241c:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002420:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8002424:	44bc      	add	ip, r7
 8002426:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 800242a:	013f      	lsls	r7, r7, #4
 800242c:	b9f2      	cbnz	r2, 800246c <HAL_PCD_IRQHandler+0x7f4>
 800242e:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8002432:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002436:	0412      	lsls	r2, r2, #16
 8002438:	0c12      	lsrs	r2, r2, #16
 800243a:	f82c 2007 	strh.w	r2, [ip, r7]
 800243e:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8002442:	ea48 0202 	orr.w	r2, r8, r2
 8002446:	b292      	uxth	r2, r2
 8002448:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800244c:	2228      	movs	r2, #40	; 0x28
 800244e:	fb02 4606 	mla	r6, r2, r6, r4
 8002452:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8002454:	e75b      	b.n	800230e <HAL_PCD_IRQHandler+0x696>
        else if (ep->xfer_len_db == 0U)
 8002456:	b91f      	cbnz	r7, 8002460 <HAL_PCD_IRQHandler+0x7e8>
          ep->xfer_fill_db = 0U;
 8002458:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 800245c:	4662      	mov	r2, ip
 800245e:	e7d8      	b.n	8002412 <HAL_PCD_IRQHandler+0x79a>
          ep->xfer_len_db = 0U;
 8002460:	2200      	movs	r2, #0
 8002462:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8002464:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002468:	463a      	mov	r2, r7
 800246a:	e7d2      	b.n	8002412 <HAL_PCD_IRQHandler+0x79a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800246c:	2a3e      	cmp	r2, #62	; 0x3e
 800246e:	d80c      	bhi.n	800248a <HAL_PCD_IRQHandler+0x812>
 8002470:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8002474:	07d2      	lsls	r2, r2, #31
 8002476:	bf48      	it	mi
 8002478:	f10e 0e01 	addmi.w	lr, lr, #1
 800247c:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8002480:	fa1f fe8e 	uxth.w	lr, lr
 8002484:	f82c e007 	strh.w	lr, [ip, r7]
 8002488:	e7e0      	b.n	800244c <HAL_PCD_IRQHandler+0x7d4>
 800248a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800248e:	06d2      	lsls	r2, r2, #27
 8002490:	bf08      	it	eq
 8002492:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 8002496:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800249a:	e7f1      	b.n	8002480 <HAL_PCD_IRQHandler+0x808>
 800249c:	2f01      	cmp	r7, #1
 800249e:	d1d5      	bne.n	800244c <HAL_PCD_IRQHandler+0x7d4>
 80024a0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80024a4:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 80024a8:	4417      	add	r7, r2
 80024aa:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	52bb      	strh	r3, [r7, r2]
 80024b2:	e7cb      	b.n	800244c <HAL_PCD_IRQHandler+0x7d4>
 80024b4:	ffff8f0f 	.word	0xffff8f0f
 80024b8:	ffff8000 	.word	0xffff8000

080024bc <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80024bc:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	f001 0507 	and.w	r5, r1, #7
 80024c6:	4604      	mov	r4, r0
 80024c8:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80024cc:	d01c      	beq.n	8002508 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ce:	fb05 1101 	mla	r1, r5, r1, r1
 80024d2:	4401      	add	r1, r0
    ep->is_in = 1U;
 80024d4:	2001      	movs	r0, #1
 80024d6:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 80024d8:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 80024da:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024dc:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 80024de:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80024e0:	b102      	cbz	r2, 80024e4 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 80024e2:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80024e4:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80024e6:	bf04      	itt	eq
 80024e8:	2300      	moveq	r3, #0
 80024ea:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80024ec:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d013      	beq.n	800251c <HAL_PCD_EP_Open+0x60>
 80024f4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024f6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80024f8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024fc:	f000 ff72 	bl	80033e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002500:	2000      	movs	r0, #0
 8002502:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002506:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8002508:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800250a:	fb01 f005 	mul.w	r0, r1, r5
 800250e:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 8002512:	4420      	add	r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002514:	4421      	add	r1, r4
    ep->is_in = 0U;
 8002516:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 800251a:	e7dd      	b.n	80024d8 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 800251c:	2002      	movs	r0, #2
 800251e:	e7f2      	b.n	8002506 <HAL_PCD_EP_Open+0x4a>

08002520 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002520:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002524:	b510      	push	{r4, lr}
 8002526:	f001 0207 	and.w	r2, r1, #7
 800252a:	4604      	mov	r4, r0
 800252c:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8002530:	d013      	beq.n	800255a <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 8002532:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002534:	fb02 1101 	mla	r1, r2, r1, r1
 8002538:	4401      	add	r1, r0
    ep->is_in = 1U;
 800253a:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800253c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800253e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002542:	2b01      	cmp	r3, #1
 8002544:	d013      	beq.n	800256e <HAL_PCD_EP_Close+0x4e>
 8002546:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002548:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800254a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800254e:	f001 f887 	bl	8003660 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002552:	2000      	movs	r0, #0
 8002554:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002558:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255a:	fb01 f302 	mul.w	r3, r1, r2
 800255e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002562:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002564:	4403      	add	r3, r0
 8002566:	2000      	movs	r0, #0
 8002568:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800256c:	e7e6      	b.n	800253c <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 800256e:	2002      	movs	r0, #2
 8002570:	e7f2      	b.n	8002558 <HAL_PCD_EP_Close+0x38>

08002572 <HAL_PCD_EP_Receive>:
{
 8002572:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8002574:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8002576:	2600      	movs	r6, #0
 8002578:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800257c:	434c      	muls	r4, r1
 800257e:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8002580:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002584:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002588:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800258a:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 800258e:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8002592:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8002596:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800259a:	6800      	ldr	r0, [r0, #0]
 800259c:	f001 f9a4 	bl	80038e8 <USB_EPStartXfer>
}
 80025a0:	4630      	mov	r0, r6
 80025a2:	bd70      	pop	{r4, r5, r6, pc}

080025a4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025a4:	2328      	movs	r3, #40	; 0x28
 80025a6:	f001 0107 	and.w	r1, r1, #7
 80025aa:	fb03 0101 	mla	r1, r3, r1, r0
}
 80025ae:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80025b2:	4770      	bx	lr

080025b4 <HAL_PCD_EP_Transmit>:
{
 80025b4:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80025b6:	2528      	movs	r5, #40	; 0x28
 80025b8:	f001 0107 	and.w	r1, r1, #7
 80025bc:	fb05 0401 	mla	r4, r5, r1, r0
  ep->xfer_count = 0U;
 80025c0:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80025c2:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80025c6:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c8:	fb01 5505 	mla	r5, r1, r5, r5
  ep->num = ep_addr & EP_ADDR_MSK;
 80025cc:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 80025d0:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025d4:	1941      	adds	r1, r0, r5
  ep->xfer_len_db = len;
 80025d6:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80025d8:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80025da:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025de:	6800      	ldr	r0, [r0, #0]
 80025e0:	f001 f982 	bl	80038e8 <USB_EPStartXfer>
}
 80025e4:	4630      	mov	r0, r6
 80025e6:	bd70      	pop	{r4, r5, r6, pc}

080025e8 <HAL_PCD_EP_SetStall>:
{
 80025e8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025ea:	6843      	ldr	r3, [r0, #4]
 80025ec:	f001 0507 	and.w	r5, r1, #7
 80025f0:	429d      	cmp	r5, r3
{
 80025f2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025f4:	d828      	bhi.n	8002648 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80025f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80025fa:	f04f 0328 	mov.w	r3, #40	; 0x28
 80025fe:	d01a      	beq.n	8002636 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002600:	fb05 3303 	mla	r3, r5, r3, r3
 8002604:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002606:	2301      	movs	r3, #1
 8002608:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 800260a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800260c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800260e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002610:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8002614:	429a      	cmp	r2, r3
 8002616:	d019      	beq.n	800264c <HAL_PCD_EP_SetStall+0x64>
 8002618:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800261c:	6820      	ldr	r0, [r4, #0]
 800261e:	f001 f8e5 	bl	80037ec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002622:	b925      	cbnz	r5, 800262e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002624:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002628:	6820      	ldr	r0, [r4, #0]
 800262a:	f001 f94b 	bl	80038c4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800262e:	2000      	movs	r0, #0
 8002630:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002634:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8002636:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8002638:	434b      	muls	r3, r1
 800263a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800263e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8002640:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002642:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8002646:	e7e0      	b.n	800260a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8002648:	2001      	movs	r0, #1
 800264a:	e7f3      	b.n	8002634 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 800264c:	2002      	movs	r0, #2
 800264e:	e7f1      	b.n	8002634 <HAL_PCD_EP_SetStall+0x4c>

08002650 <HAL_PCD_EP_ClrStall>:
{
 8002650:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002652:	6843      	ldr	r3, [r0, #4]
 8002654:	f001 020f 	and.w	r2, r1, #15
 8002658:	429a      	cmp	r2, r3
{
 800265a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800265c:	d826      	bhi.n	80026ac <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 800265e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002662:	f001 0207 	and.w	r2, r1, #7
 8002666:	f04f 0128 	mov.w	r1, #40	; 0x28
 800266a:	d015      	beq.n	8002698 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 800266c:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800266e:	fb02 1101 	mla	r1, r2, r1, r1
 8002672:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002674:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8002676:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002678:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800267a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800267c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002680:	2b01      	cmp	r3, #1
 8002682:	d015      	beq.n	80026b0 <HAL_PCD_EP_ClrStall+0x60>
 8002684:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002686:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002688:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800268c:	f001 f8ca 	bl	8003824 <USB_EPClearStall>
  return HAL_OK;
 8002690:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8002692:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8002696:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002698:	fb01 f302 	mul.w	r3, r1, r2
 800269c:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80026a0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80026a2:	4403      	add	r3, r0
 80026a4:	2000      	movs	r0, #0
 80026a6:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80026aa:	e7e4      	b.n	8002676 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7f2      	b.n	8002696 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 80026b0:	2002      	movs	r0, #2
 80026b2:	e7f0      	b.n	8002696 <HAL_PCD_EP_ClrStall+0x46>

080026b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80026b4:	b510      	push	{r4, lr}
 80026b6:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026b8:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026bc:	bf1b      	ittet	ne
 80026be:	f001 0107 	andne.w	r1, r1, #7
 80026c2:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026c6:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ca:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80026cc:	bf08      	it	eq
 80026ce:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
 80026d2:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026d4:	b91a      	cbnz	r2, 80026de <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026d6:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026d8:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80026da:	2000      	movs	r0, #0
 80026dc:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80026de:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026e0:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 80026e2:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026e4:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026e6:	8143      	strh	r3, [r0, #10]
 80026e8:	e7f7      	b.n	80026da <HAL_PCDEx_PMAConfig+0x26>
	...

080026ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f0:	4605      	mov	r5, r0
 80026f2:	b908      	cbnz	r0, 80026f8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80026f4:	2001      	movs	r0, #1
 80026f6:	e03c      	b.n	8002772 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f8:	6803      	ldr	r3, [r0, #0]
 80026fa:	07db      	lsls	r3, r3, #31
 80026fc:	d410      	bmi.n	8002720 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	682b      	ldr	r3, [r5, #0]
 8002700:	079f      	lsls	r7, r3, #30
 8002702:	d45d      	bmi.n	80027c0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	0719      	lsls	r1, r3, #28
 8002708:	f100 8094 	bmi.w	8002834 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	075a      	lsls	r2, r3, #29
 8002710:	f100 80be 	bmi.w	8002890 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002714:	69e8      	ldr	r0, [r5, #28]
 8002716:	2800      	cmp	r0, #0
 8002718:	f040 812c 	bne.w	8002974 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800271c:	2000      	movs	r0, #0
 800271e:	e028      	b.n	8002772 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002720:	4c8f      	ldr	r4, [pc, #572]	; (8002960 <HAL_RCC_OscConfig+0x274>)
 8002722:	6863      	ldr	r3, [r4, #4]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b04      	cmp	r3, #4
 800272a:	d007      	beq.n	800273c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800272c:	6863      	ldr	r3, [r4, #4]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d109      	bne.n	800274a <HAL_RCC_OscConfig+0x5e>
 8002736:	6863      	ldr	r3, [r4, #4]
 8002738:	03de      	lsls	r6, r3, #15
 800273a:	d506      	bpl.n	800274a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	039c      	lsls	r4, r3, #14
 8002740:	d5dd      	bpl.n	80026fe <HAL_RCC_OscConfig+0x12>
 8002742:	686b      	ldr	r3, [r5, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1da      	bne.n	80026fe <HAL_RCC_OscConfig+0x12>
 8002748:	e7d4      	b.n	80026f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274a:	686b      	ldr	r3, [r5, #4]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d112      	bne.n	8002778 <HAL_RCC_OscConfig+0x8c>
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800275a:	f7ff f871 	bl	8001840 <HAL_GetTick>
 800275e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	0398      	lsls	r0, r3, #14
 8002764:	d4cb      	bmi.n	80026fe <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002766:	f7ff f86b 	bl	8001840 <HAL_GetTick>
 800276a:	1b80      	subs	r0, r0, r6
 800276c:	2864      	cmp	r0, #100	; 0x64
 800276e:	d9f7      	bls.n	8002760 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002770:	2003      	movs	r0, #3
}
 8002772:	b002      	add	sp, #8
 8002774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002778:	b99b      	cbnz	r3, 80027a2 <HAL_RCC_OscConfig+0xb6>
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002788:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800278a:	f7ff f859 	bl	8001840 <HAL_GetTick>
 800278e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	0399      	lsls	r1, r3, #14
 8002794:	d5b3      	bpl.n	80026fe <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002796:	f7ff f853 	bl	8001840 <HAL_GetTick>
 800279a:	1b80      	subs	r0, r0, r6
 800279c:	2864      	cmp	r0, #100	; 0x64
 800279e:	d9f7      	bls.n	8002790 <HAL_RCC_OscConfig+0xa4>
 80027a0:	e7e6      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	d103      	bne.n	80027b2 <HAL_RCC_OscConfig+0xc6>
 80027aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ae:	6023      	str	r3, [r4, #0]
 80027b0:	e7cf      	b.n	8002752 <HAL_RCC_OscConfig+0x66>
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b6:	6023      	str	r3, [r4, #0]
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027be:	e7cb      	b.n	8002758 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027c0:	4c67      	ldr	r4, [pc, #412]	; (8002960 <HAL_RCC_OscConfig+0x274>)
 80027c2:	6863      	ldr	r3, [r4, #4]
 80027c4:	f013 0f0c 	tst.w	r3, #12
 80027c8:	d007      	beq.n	80027da <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027ca:	6863      	ldr	r3, [r4, #4]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d110      	bne.n	80027f6 <HAL_RCC_OscConfig+0x10a>
 80027d4:	6863      	ldr	r3, [r4, #4]
 80027d6:	03da      	lsls	r2, r3, #15
 80027d8:	d40d      	bmi.n	80027f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	079b      	lsls	r3, r3, #30
 80027de:	d502      	bpl.n	80027e6 <HAL_RCC_OscConfig+0xfa>
 80027e0:	692b      	ldr	r3, [r5, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d186      	bne.n	80026f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	696a      	ldr	r2, [r5, #20]
 80027ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80027f2:	6023      	str	r3, [r4, #0]
 80027f4:	e786      	b.n	8002704 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f6:	692a      	ldr	r2, [r5, #16]
 80027f8:	4b5a      	ldr	r3, [pc, #360]	; (8002964 <HAL_RCC_OscConfig+0x278>)
 80027fa:	b16a      	cbz	r2, 8002818 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002800:	f7ff f81e 	bl	8001840 <HAL_GetTick>
 8002804:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	079f      	lsls	r7, r3, #30
 800280a:	d4ec      	bmi.n	80027e6 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280c:	f7ff f818 	bl	8001840 <HAL_GetTick>
 8002810:	1b80      	subs	r0, r0, r6
 8002812:	2802      	cmp	r0, #2
 8002814:	d9f7      	bls.n	8002806 <HAL_RCC_OscConfig+0x11a>
 8002816:	e7ab      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002818:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800281a:	f7ff f811 	bl	8001840 <HAL_GetTick>
 800281e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	0798      	lsls	r0, r3, #30
 8002824:	f57f af6e 	bpl.w	8002704 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7ff f80a 	bl	8001840 <HAL_GetTick>
 800282c:	1b80      	subs	r0, r0, r6
 800282e:	2802      	cmp	r0, #2
 8002830:	d9f6      	bls.n	8002820 <HAL_RCC_OscConfig+0x134>
 8002832:	e79d      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002834:	69aa      	ldr	r2, [r5, #24]
 8002836:	4c4a      	ldr	r4, [pc, #296]	; (8002960 <HAL_RCC_OscConfig+0x274>)
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_RCC_OscConfig+0x27c>)
 800283a:	b1da      	cbz	r2, 8002874 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002840:	f7fe fffe 	bl	8001840 <HAL_GetTick>
 8002844:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002848:	079b      	lsls	r3, r3, #30
 800284a:	d50d      	bpl.n	8002868 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800284c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002850:	4b46      	ldr	r3, [pc, #280]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	fbb3 f3f2 	udiv	r3, r3, r2
 8002858:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800285a:	bf00      	nop
  }
  while (Delay --);
 800285c:	9b01      	ldr	r3, [sp, #4]
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	9201      	str	r2, [sp, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f9      	bne.n	800285a <HAL_RCC_OscConfig+0x16e>
 8002866:	e751      	b.n	800270c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7fe ffea 	bl	8001840 <HAL_GetTick>
 800286c:	1b80      	subs	r0, r0, r6
 800286e:	2802      	cmp	r0, #2
 8002870:	d9e9      	bls.n	8002846 <HAL_RCC_OscConfig+0x15a>
 8002872:	e77d      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002874:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002876:	f7fe ffe3 	bl	8001840 <HAL_GetTick>
 800287a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800287e:	079f      	lsls	r7, r3, #30
 8002880:	f57f af44 	bpl.w	800270c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe ffdc 	bl	8001840 <HAL_GetTick>
 8002888:	1b80      	subs	r0, r0, r6
 800288a:	2802      	cmp	r0, #2
 800288c:	d9f6      	bls.n	800287c <HAL_RCC_OscConfig+0x190>
 800288e:	e76f      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002890:	4c33      	ldr	r4, [pc, #204]	; (8002960 <HAL_RCC_OscConfig+0x274>)
 8002892:	69e3      	ldr	r3, [r4, #28]
 8002894:	00d8      	lsls	r0, r3, #3
 8002896:	d424      	bmi.n	80028e2 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8002898:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	69e3      	ldr	r3, [r4, #28]
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61e3      	str	r3, [r4, #28]
 80028a2:	69e3      	ldr	r3, [r4, #28]
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	4e30      	ldr	r6, [pc, #192]	; (8002970 <HAL_RCC_OscConfig+0x284>)
 80028ae:	6833      	ldr	r3, [r6, #0]
 80028b0:	05d9      	lsls	r1, r3, #23
 80028b2:	d518      	bpl.n	80028e6 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	68eb      	ldr	r3, [r5, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d126      	bne.n	8002908 <HAL_RCC_OscConfig+0x21c>
 80028ba:	6a23      	ldr	r3, [r4, #32]
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80028c2:	f7fe ffbd 	bl	8001840 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80028ca:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028cc:	6a23      	ldr	r3, [r4, #32]
 80028ce:	079b      	lsls	r3, r3, #30
 80028d0:	d53f      	bpl.n	8002952 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	f43f af1e 	beq.w	8002714 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d8:	69e3      	ldr	r3, [r4, #28]
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028de:	61e3      	str	r3, [r4, #28]
 80028e0:	e718      	b.n	8002714 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80028e2:	2700      	movs	r7, #0
 80028e4:	e7e2      	b.n	80028ac <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e6:	6833      	ldr	r3, [r6, #0]
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80028ee:	f7fe ffa7 	bl	8001840 <HAL_GetTick>
 80028f2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	6833      	ldr	r3, [r6, #0]
 80028f6:	05da      	lsls	r2, r3, #23
 80028f8:	d4dc      	bmi.n	80028b4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7fe ffa1 	bl	8001840 <HAL_GetTick>
 80028fe:	eba0 0008 	sub.w	r0, r0, r8
 8002902:	2864      	cmp	r0, #100	; 0x64
 8002904:	d9f6      	bls.n	80028f4 <HAL_RCC_OscConfig+0x208>
 8002906:	e733      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	b9ab      	cbnz	r3, 8002936 <HAL_RCC_OscConfig+0x24a>
 800290a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	6223      	str	r3, [r4, #32]
 8002916:	6a23      	ldr	r3, [r4, #32]
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800291e:	f7fe ff8f 	bl	8001840 <HAL_GetTick>
 8002922:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002924:	6a23      	ldr	r3, [r4, #32]
 8002926:	0798      	lsls	r0, r3, #30
 8002928:	d5d3      	bpl.n	80028d2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe ff89 	bl	8001840 <HAL_GetTick>
 800292e:	1b80      	subs	r0, r0, r6
 8002930:	4540      	cmp	r0, r8
 8002932:	d9f7      	bls.n	8002924 <HAL_RCC_OscConfig+0x238>
 8002934:	e71c      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002936:	2b05      	cmp	r3, #5
 8002938:	6a23      	ldr	r3, [r4, #32]
 800293a:	d103      	bne.n	8002944 <HAL_RCC_OscConfig+0x258>
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	6223      	str	r3, [r4, #32]
 8002942:	e7ba      	b.n	80028ba <HAL_RCC_OscConfig+0x1ce>
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6223      	str	r3, [r4, #32]
 800294a:	6a23      	ldr	r3, [r4, #32]
 800294c:	f023 0304 	bic.w	r3, r3, #4
 8002950:	e7b6      	b.n	80028c0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe ff75 	bl	8001840 <HAL_GetTick>
 8002956:	eba0 0008 	sub.w	r0, r0, r8
 800295a:	42b0      	cmp	r0, r6
 800295c:	d9b6      	bls.n	80028cc <HAL_RCC_OscConfig+0x1e0>
 800295e:	e707      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
 8002960:	40021000 	.word	0x40021000
 8002964:	42420000 	.word	0x42420000
 8002968:	42420480 	.word	0x42420480
 800296c:	20000000 	.word	0x20000000
 8002970:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_RCC_OscConfig+0x334>)
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	461c      	mov	r4, r3
 800297a:	f002 020c 	and.w	r2, r2, #12
 800297e:	2a08      	cmp	r2, #8
 8002980:	d03d      	beq.n	80029fe <HAL_RCC_OscConfig+0x312>
 8002982:	2300      	movs	r3, #0
 8002984:	4e27      	ldr	r6, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002986:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002988:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	d12b      	bne.n	80029e4 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800298c:	f7fe ff58 	bl	8001840 <HAL_GetTick>
 8002990:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	0199      	lsls	r1, r3, #6
 8002996:	d41f      	bmi.n	80029d8 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002998:	6a2b      	ldr	r3, [r5, #32]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029a0:	6862      	ldr	r2, [r4, #4]
 80029a2:	68a9      	ldr	r1, [r5, #8]
 80029a4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80029a8:	430a      	orrs	r2, r1
 80029aa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80029ae:	6862      	ldr	r2, [r4, #4]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80029b6:	4313      	orrs	r3, r2
 80029b8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80029ba:	2301      	movs	r3, #1
 80029bc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80029be:	f7fe ff3f 	bl	8001840 <HAL_GetTick>
 80029c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	019a      	lsls	r2, r3, #6
 80029c8:	f53f aea8 	bmi.w	800271c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe ff38 	bl	8001840 <HAL_GetTick>
 80029d0:	1b40      	subs	r0, r0, r5
 80029d2:	2802      	cmp	r0, #2
 80029d4:	d9f6      	bls.n	80029c4 <HAL_RCC_OscConfig+0x2d8>
 80029d6:	e6cb      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe ff32 	bl	8001840 <HAL_GetTick>
 80029dc:	1bc0      	subs	r0, r0, r7
 80029de:	2802      	cmp	r0, #2
 80029e0:	d9d7      	bls.n	8002992 <HAL_RCC_OscConfig+0x2a6>
 80029e2:	e6c5      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80029e4:	f7fe ff2c 	bl	8001840 <HAL_GetTick>
 80029e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	019b      	lsls	r3, r3, #6
 80029ee:	f57f ae95 	bpl.w	800271c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe ff25 	bl	8001840 <HAL_GetTick>
 80029f6:	1b40      	subs	r0, r0, r5
 80029f8:	2802      	cmp	r0, #2
 80029fa:	d9f6      	bls.n	80029ea <HAL_RCC_OscConfig+0x2fe>
 80029fc:	e6b8      	b.n	8002770 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fe:	2801      	cmp	r0, #1
 8002a00:	f43f aeb7 	beq.w	8002772 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8002a04:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a06:	6a2b      	ldr	r3, [r5, #32]
 8002a08:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	f47f ae71 	bne.w	80026f4 <HAL_RCC_OscConfig+0x8>
 8002a12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a14:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002a18:	1ac0      	subs	r0, r0, r3
 8002a1a:	bf18      	it	ne
 8002a1c:	2001      	movne	r0, #1
 8002a1e:	e6a8      	b.n	8002772 <HAL_RCC_OscConfig+0x86>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	42420060 	.word	0x42420060

08002a28 <HAL_RCC_GetSysClockFreq>:
{
 8002a28:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002a2c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a2e:	ac02      	add	r4, sp, #8
 8002a30:	f103 0510 	add.w	r5, r3, #16
 8002a34:	4622      	mov	r2, r4
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	6859      	ldr	r1, [r3, #4]
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	c203      	stmia	r2!, {r0, r1}
 8002a3e:	42ab      	cmp	r3, r5
 8002a40:	4614      	mov	r4, r2
 8002a42:	d1f7      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a44:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8002a48:	4911      	ldr	r1, [pc, #68]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a4a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002a4e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002a50:	f003 020c 	and.w	r2, r3, #12
 8002a54:	2a08      	cmp	r2, #8
 8002a56:	d117      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a58:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002a5c:	a806      	add	r0, sp, #24
 8002a5e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a60:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a62:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a66:	d50c      	bpl.n	8002a82 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a68:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a6a:	480a      	ldr	r0, [pc, #40]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a6c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a70:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a72:	aa06      	add	r2, sp, #24
 8002a74:	4413      	add	r3, r2
 8002a76:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a7a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002a7e:	b007      	add	sp, #28
 8002a80:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a82:	4805      	ldr	r0, [pc, #20]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x70>)
 8002a84:	4350      	muls	r0, r2
 8002a86:	e7fa      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002a8a:	e7f8      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x56>
 8002a8c:	08006eb0 	.word	0x08006eb0
 8002a90:	40021000 	.word	0x40021000
 8002a94:	007a1200 	.word	0x007a1200
 8002a98:	003d0900 	.word	0x003d0900

08002a9c <HAL_RCC_ClockConfig>:
{
 8002a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	b910      	cbnz	r0, 8002aac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002aa6:	2001      	movs	r0, #1
}
 8002aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4a44      	ldr	r2, [pc, #272]	; (8002bc0 <HAL_RCC_ClockConfig+0x124>)
 8002aae:	6813      	ldr	r3, [r2, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	d328      	bcc.n	8002b0a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab8:	6821      	ldr	r1, [r4, #0]
 8002aba:	078e      	lsls	r6, r1, #30
 8002abc:	d430      	bmi.n	8002b20 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	07ca      	lsls	r2, r1, #31
 8002ac0:	d443      	bmi.n	8002b4a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac2:	4a3f      	ldr	r2, [pc, #252]	; (8002bc0 <HAL_RCC_ClockConfig+0x124>)
 8002ac4:	6813      	ldr	r3, [r2, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	42ab      	cmp	r3, r5
 8002acc:	d865      	bhi.n	8002b9a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ace:	6822      	ldr	r2, [r4, #0]
 8002ad0:	4d3c      	ldr	r5, [pc, #240]	; (8002bc4 <HAL_RCC_ClockConfig+0x128>)
 8002ad2:	f012 0f04 	tst.w	r2, #4
 8002ad6:	d16c      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad8:	0713      	lsls	r3, r2, #28
 8002ada:	d506      	bpl.n	8002aea <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002adc:	686b      	ldr	r3, [r5, #4]
 8002ade:	6922      	ldr	r2, [r4, #16]
 8002ae0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ae4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ae8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aea:	f7ff ff9d 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 8002aee:	686b      	ldr	r3, [r5, #4]
 8002af0:	4a35      	ldr	r2, [pc, #212]	; (8002bc8 <HAL_RCC_ClockConfig+0x12c>)
 8002af2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002af6:	5cd3      	ldrb	r3, [r2, r3]
 8002af8:	40d8      	lsrs	r0, r3
 8002afa:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <HAL_RCC_ClockConfig+0x130>)
 8002afc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002afe:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <HAL_RCC_ClockConfig+0x134>)
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	f7fe fe5b 	bl	80017bc <HAL_InitTick>
  return HAL_OK;
 8002b06:	2000      	movs	r0, #0
 8002b08:	e7ce      	b.n	8002aa8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	6813      	ldr	r3, [r2, #0]
 8002b0c:	f023 0307 	bic.w	r3, r3, #7
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b14:	6813      	ldr	r3, [r2, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	428b      	cmp	r3, r1
 8002b1c:	d1c3      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xa>
 8002b1e:	e7cb      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1c>
 8002b20:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b22:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b26:	bf1e      	ittt	ne
 8002b28:	685a      	ldrne	r2, [r3, #4]
 8002b2a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002b2e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b32:	bf42      	ittt	mi
 8002b34:	685a      	ldrmi	r2, [r3, #4]
 8002b36:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002b3a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68a0      	ldr	r0, [r4, #8]
 8002b40:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b44:	4302      	orrs	r2, r0
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	e7b9      	b.n	8002abe <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	6862      	ldr	r2, [r4, #4]
 8002b4c:	4e1d      	ldr	r6, [pc, #116]	; (8002bc4 <HAL_RCC_ClockConfig+0x128>)
 8002b4e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b50:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	d11a      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b54:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	d0a5      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b60:	f023 0303 	bic.w	r3, r3, #3
 8002b64:	4313      	orrs	r3, r2
 8002b66:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002b68:	f7fe fe6a 	bl	8001840 <HAL_GetTick>
 8002b6c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	6873      	ldr	r3, [r6, #4]
 8002b70:	6862      	ldr	r2, [r4, #4]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b7a:	d0a2      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7fe fe60 	bl	8001840 <HAL_GetTick>
 8002b80:	1bc0      	subs	r0, r0, r7
 8002b82:	4540      	cmp	r0, r8
 8002b84:	d9f3      	bls.n	8002b6e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002b86:	2003      	movs	r0, #3
 8002b88:	e78e      	b.n	8002aa8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8a:	2a02      	cmp	r2, #2
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b92:	e7e1      	b.n	8002b58 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	f013 0f02 	tst.w	r3, #2
 8002b98:	e7de      	b.n	8002b58 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	6813      	ldr	r3, [r2, #0]
 8002b9c:	f023 0307 	bic.w	r3, r3, #7
 8002ba0:	432b      	orrs	r3, r5
 8002ba2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba4:	6813      	ldr	r3, [r2, #0]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	42ab      	cmp	r3, r5
 8002bac:	f47f af7b 	bne.w	8002aa6 <HAL_RCC_ClockConfig+0xa>
 8002bb0:	e78d      	b.n	8002ace <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb2:	686b      	ldr	r3, [r5, #4]
 8002bb4:	68e1      	ldr	r1, [r4, #12]
 8002bb6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	606b      	str	r3, [r5, #4]
 8002bbe:	e78b      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x3c>
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08006f40 	.word	0x08006f40
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000008 	.word	0x20000008

08002bd4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002bd6:	4a05      	ldr	r2, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x18>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	4a03      	ldr	r2, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002be2:	6810      	ldr	r0, [r2, #0]
}
 8002be4:	40d8      	lsrs	r0, r3
 8002be6:	4770      	bx	lr
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08006f50 	.word	0x08006f50
 8002bf0:	20000000 	.word	0x20000000

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002c02:	6810      	ldr	r0, [r2, #0]
}
 8002c04:	40d8      	lsrs	r0, r3
 8002c06:	4770      	bx	lr
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08006f50 	.word	0x08006f50
 8002c10:	20000000 	.word	0x20000000

08002c14 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c14:	6803      	ldr	r3, [r0, #0]
{
 8002c16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c1a:	07d9      	lsls	r1, r3, #31
{
 8002c1c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c1e:	d520      	bpl.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c20:	4c35      	ldr	r4, [pc, #212]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002c22:	69e3      	ldr	r3, [r4, #28]
 8002c24:	00da      	lsls	r2, r3, #3
 8002c26:	d432      	bmi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002c28:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	69e3      	ldr	r3, [r4, #28]
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	61e3      	str	r3, [r4, #28]
 8002c32:	69e3      	ldr	r3, [r4, #28]
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	4e2f      	ldr	r6, [pc, #188]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c3e:	6833      	ldr	r3, [r6, #0]
 8002c40:	05db      	lsls	r3, r3, #23
 8002c42:	d526      	bpl.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c44:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c46:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002c4a:	d136      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c4c:	6a23      	ldr	r3, [r4, #32]
 8002c4e:	686a      	ldr	r2, [r5, #4]
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	4313      	orrs	r3, r2
 8002c56:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c58:	b11f      	cbz	r7, 8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	69e3      	ldr	r3, [r4, #28]
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c60:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c62:	6828      	ldr	r0, [r5, #0]
 8002c64:	0783      	lsls	r3, r0, #30
 8002c66:	d506      	bpl.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c68:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002c6a:	68a9      	ldr	r1, [r5, #8]
 8002c6c:	6853      	ldr	r3, [r2, #4]
 8002c6e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c72:	430b      	orrs	r3, r1
 8002c74:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c76:	f010 0010 	ands.w	r0, r0, #16
 8002c7a:	d01b      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c7c:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002c7e:	68e9      	ldr	r1, [r5, #12]
 8002c80:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c82:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6053      	str	r3, [r2, #4]
 8002c8c:	e012      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002c8e:	2700      	movs	r7, #0
 8002c90:	e7d4      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	6833      	ldr	r3, [r6, #0]
 8002c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c98:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fdd1 	bl	8001840 <HAL_GetTick>
 8002c9e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	6833      	ldr	r3, [r6, #0]
 8002ca2:	05d8      	lsls	r0, r3, #23
 8002ca4:	d4ce      	bmi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fe fdcb 	bl	8001840 <HAL_GetTick>
 8002caa:	eba0 0008 	sub.w	r0, r0, r8
 8002cae:	2864      	cmp	r0, #100	; 0x64
 8002cb0:	d9f6      	bls.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002cb2:	2003      	movs	r0, #3
}
 8002cb4:	b002      	add	sp, #8
 8002cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cba:	686a      	ldr	r2, [r5, #4]
 8002cbc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d0c3      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cca:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ccc:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002cd4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cd6:	07d9      	lsls	r1, r3, #31
 8002cd8:	d5b8      	bpl.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002cda:	f7fe fdb1 	bl	8001840 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002ce2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	6a23      	ldr	r3, [r4, #32]
 8002ce6:	079a      	lsls	r2, r3, #30
 8002ce8:	d4b0      	bmi.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe fda9 	bl	8001840 <HAL_GetTick>
 8002cee:	1b80      	subs	r0, r0, r6
 8002cf0:	4540      	cmp	r0, r8
 8002cf2:	d9f7      	bls.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002cf4:	e7dd      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	42420440 	.word	0x42420440

08002d04 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002d04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002d08:	461c      	mov	r4, r3
 8002d0a:	4616      	mov	r6, r2
 8002d0c:	460f      	mov	r7, r1
 8002d0e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d10:	f7fe fd96 	bl	8001840 <HAL_GetTick>
 8002d14:	4434      	add	r4, r6
 8002d16:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002d18:	f7fe fd92 	bl	8001840 <HAL_GetTick>
 8002d1c:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002d26:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d28:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002d2a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d2c:	6893      	ldr	r3, [r2, #8]
 8002d2e:	ea37 0303 	bics.w	r3, r7, r3
 8002d32:	d001      	beq.n	8002d38 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x34>
    }
  }

  return HAL_OK;
 8002d34:	2000      	movs	r0, #0
 8002d36:	e02e      	b.n	8002d96 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002d38:	1c73      	adds	r3, r6, #1
 8002d3a:	d0f7      	beq.n	8002d2c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d3c:	f7fe fd80 	bl	8001840 <HAL_GetTick>
 8002d40:	eba0 0008 	sub.w	r0, r0, r8
 8002d44:	42a0      	cmp	r0, r4
 8002d46:	d329      	bcc.n	8002d9c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d50:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d52:	686a      	ldr	r2, [r5, #4]
 8002d54:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002d58:	d10a      	bne.n	8002d70 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
 8002d5a:	68aa      	ldr	r2, [r5, #8]
 8002d5c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002d60:	d002      	beq.n	8002d68 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d62:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002d66:	d103      	bne.n	8002d70 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002d72:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002d76:	d107      	bne.n	8002d88 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x84>
          SPI_RESET_CRC(hspi);
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d86:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2003      	movs	r0, #3
 8002d92:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002d96:	b002      	add	sp, #8
 8002d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8002d9c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002d9e:	2b00      	cmp	r3, #0
      count--;
 8002da0:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002da2:	bf08      	it	eq
 8002da4:	2400      	moveq	r4, #0
      count--;
 8002da6:	3b01      	subs	r3, #1
 8002da8:	e7be      	b.n	8002d28 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x24>
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000

08002db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002db2:	4613      	mov	r3, r2
 8002db4:	460a      	mov	r2, r1
 8002db6:	2180      	movs	r1, #128	; 0x80
{
 8002db8:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dba:	f7ff ffa3 	bl	8002d04 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8002dbe:	b120      	cbz	r0, 8002dca <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002dc0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dc4:	f043 0320 	orr.w	r3, r3, #32
 8002dc8:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <HAL_SPI_Init>:
{
 8002dcc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002dce:	4604      	mov	r4, r0
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d051      	beq.n	8002e78 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d14a      	bne.n	8002e70 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dda:	6842      	ldr	r2, [r0, #4]
 8002ddc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002de0:	d000      	beq.n	8002de4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002de2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002de8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002dec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002df0:	b923      	cbnz	r3, 8002dfc <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8002df2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7fe fc02 	bl	8001600 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002dfc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002dfe:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e00:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002e04:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e06:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e0e:	6863      	ldr	r3, [r4, #4]
 8002e10:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8002e14:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002e18:	4303      	orrs	r3, r0
 8002e1a:	68e0      	ldr	r0, [r4, #12]
 8002e1c:	69a1      	ldr	r1, [r4, #24]
 8002e1e:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8002e22:	4303      	orrs	r3, r0
 8002e24:	6920      	ldr	r0, [r4, #16]
 8002e26:	f000 0002 	and.w	r0, r0, #2
 8002e2a:	4303      	orrs	r3, r0
 8002e2c:	6960      	ldr	r0, [r4, #20]
 8002e2e:	f000 0001 	and.w	r0, r0, #1
 8002e32:	4303      	orrs	r3, r0
 8002e34:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8002e38:	4303      	orrs	r3, r0
 8002e3a:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e3c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e3e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002e42:	4303      	orrs	r3, r0
 8002e44:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e46:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e4a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002e4e:	4303      	orrs	r3, r0
 8002e50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002e52:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002e56:	4303      	orrs	r3, r0
 8002e58:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e5a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e5c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e5e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e64:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002e66:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e68:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e6a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002e6e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e70:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e76:	e7b5      	b.n	8002de4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
 8002e7a:	e7f8      	b.n	8002e6e <HAL_SPI_Init+0xa2>

08002e7c <HAL_SPI_Transmit>:
{
 8002e7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e80:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002e82:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002e86:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002e88:	2b01      	cmp	r3, #1
{
 8002e8a:	460d      	mov	r5, r1
 8002e8c:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002e8e:	f000 809e 	beq.w	8002fce <HAL_SPI_Transmit+0x152>
 8002e92:	2301      	movs	r3, #1
 8002e94:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002e98:	f7fe fcd2 	bl	8001840 <HAL_GetTick>
 8002e9c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002e9e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002ea2:	b2c0      	uxtb	r0, r0
 8002ea4:	2801      	cmp	r0, #1
 8002ea6:	f040 8090 	bne.w	8002fca <HAL_SPI_Transmit+0x14e>
  if ((pData == NULL) || (Size == 0U))
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	d060      	beq.n	8002f70 <HAL_SPI_Transmit+0xf4>
 8002eae:	f1b8 0f00 	cmp.w	r8, #0
 8002eb2:	d05d      	beq.n	8002f70 <HAL_SPI_Transmit+0xf4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eb4:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb6:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eb8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ebc:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ebe:	6560      	str	r0, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferCount = Size;
 8002ec4:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ec8:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002eca:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ecc:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002ece:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ed2:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ed4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
 8002ed8:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eda:	d107      	bne.n	8002eec <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8002edc:	6803      	ldr	r3, [r0, #0]
 8002ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee2:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8002ee4:	6803      	ldr	r3, [r0, #0]
 8002ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eea:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eec:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eee:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ef0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002ef2:	bf5e      	ittt	pl
 8002ef4:	6803      	ldrpl	r3, [r0, #0]
 8002ef6:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002efa:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002efc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002f00:	6863      	ldr	r3, [r4, #4]
 8002f02:	d13e      	bne.n	8002f82 <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f04:	b113      	cbz	r3, 8002f0c <HAL_SPI_Transmit+0x90>
 8002f06:	f1b8 0f01 	cmp.w	r8, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002f10:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f12:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002f14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002f1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	b9a3      	cbnz	r3, 8002f4c <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f22:	463a      	mov	r2, r7
 8002f24:	4631      	mov	r1, r6
 8002f26:	4620      	mov	r0, r4
 8002f28:	f7ff ff42 	bl	8002db0 <SPI_EndRxTxTransaction>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d149      	bne.n	8002fc4 <HAL_SPI_Transmit+0x148>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f30:	68a3      	ldr	r3, [r4, #8]
 8002f32:	b933      	cbnz	r3, 8002f42 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	9201      	str	r2, [sp, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f42:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002f44:	3000      	adds	r0, #0
 8002f46:	bf18      	it	ne
 8002f48:	2001      	movne	r0, #1
error:
 8002f4a:	e011      	b.n	8002f70 <HAL_SPI_Transmit+0xf4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	6893      	ldr	r3, [r2, #8]
 8002f50:	0798      	lsls	r0, r3, #30
 8002f52:	d505      	bpl.n	8002f60 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f56:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002f5a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f5c:	6323      	str	r3, [r4, #48]	; 0x30
 8002f5e:	e7d9      	b.n	8002f14 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f60:	f7fe fc6e 	bl	8001840 <HAL_GetTick>
 8002f64:	1bc0      	subs	r0, r0, r7
 8002f66:	42b0      	cmp	r0, r6
 8002f68:	d3d8      	bcc.n	8002f1c <HAL_SPI_Transmit+0xa0>
 8002f6a:	1c71      	adds	r1, r6, #1
 8002f6c:	d0d6      	beq.n	8002f1c <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8002f6e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f76:	2300      	movs	r3, #0
 8002f78:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002f7c:	b002      	add	sp, #8
 8002f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f82:	b113      	cbz	r3, 8002f8a <HAL_SPI_Transmit+0x10e>
 8002f84:	f1b8 0f01 	cmp.w	r8, #1
 8002f88:	d108      	bne.n	8002f9c <HAL_SPI_Transmit+0x120>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f8a:	782b      	ldrb	r3, [r5, #0]
 8002f8c:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f90:	3301      	adds	r3, #1
 8002f92:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002f94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002f9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0be      	beq.n	8002f22 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	0792      	lsls	r2, r2, #30
 8002faa:	d503      	bpl.n	8002fb4 <HAL_SPI_Transmit+0x138>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	731a      	strb	r2, [r3, #12]
 8002fb2:	e7ec      	b.n	8002f8e <HAL_SPI_Transmit+0x112>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb4:	f7fe fc44 	bl	8001840 <HAL_GetTick>
 8002fb8:	1bc0      	subs	r0, r0, r7
 8002fba:	42b0      	cmp	r0, r6
 8002fbc:	d3ee      	bcc.n	8002f9c <HAL_SPI_Transmit+0x120>
 8002fbe:	1c73      	adds	r3, r6, #1
 8002fc0:	d0ec      	beq.n	8002f9c <HAL_SPI_Transmit+0x120>
 8002fc2:	e7d4      	b.n	8002f6e <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	6563      	str	r3, [r4, #84]	; 0x54
 8002fc8:	e7b2      	b.n	8002f30 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8002fca:	2002      	movs	r0, #2
 8002fcc:	e7d0      	b.n	8002f70 <HAL_SPI_Transmit+0xf4>
  __HAL_LOCK(hspi);
 8002fce:	2002      	movs	r0, #2
 8002fd0:	e7d4      	b.n	8002f7c <HAL_SPI_Transmit+0x100>

08002fd2 <HAL_SPI_TransmitReceive>:
{
 8002fd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002fd6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002fd8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002fdc:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002fde:	2b01      	cmp	r3, #1
{
 8002fe0:	460d      	mov	r5, r1
 8002fe2:	4691      	mov	r9, r2
 8002fe4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002fe6:	f000 80e2 	beq.w	80031ae <HAL_SPI_TransmitReceive+0x1dc>
 8002fea:	2301      	movs	r3, #1
 8002fec:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002ff0:	f7fe fc26 	bl	8001840 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002ff4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002ff8:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8002ffa:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ffc:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8002ffe:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003000:	d00a      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x46>
 8003002:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8003006:	f040 80d0 	bne.w	80031aa <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800300a:	68a0      	ldr	r0, [r4, #8]
 800300c:	2800      	cmp	r0, #0
 800300e:	f040 80cc 	bne.w	80031aa <HAL_SPI_TransmitReceive+0x1d8>
 8003012:	2b04      	cmp	r3, #4
 8003014:	f040 80c9 	bne.w	80031aa <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003018:	2d00      	cmp	r5, #0
 800301a:	f000 80c4 	beq.w	80031a6 <HAL_SPI_TransmitReceive+0x1d4>
 800301e:	f1b9 0f00 	cmp.w	r9, #0
 8003022:	f000 80c0 	beq.w	80031a6 <HAL_SPI_TransmitReceive+0x1d4>
 8003026:	2e00      	cmp	r6, #0
 8003028:	f000 80bd 	beq.w	80031a6 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800302c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003030:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003034:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003036:	bf1c      	itt	ne
 8003038:	2305      	movne	r3, #5
 800303a:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303e:	2300      	movs	r3, #0
 8003040:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003042:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003046:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8003048:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800304a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800304c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800304e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003050:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003052:	bf58      	it	pl
 8003054:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003056:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8003058:	bf58      	it	pl
 800305a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800305e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8003060:	bf58      	it	pl
 8003062:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003064:	68e2      	ldr	r2, [r4, #12]
 8003066:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800306a:	d158      	bne.n	800311e <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800306c:	b109      	cbz	r1, 8003072 <HAL_SPI_TransmitReceive+0xa0>
 800306e:	2e01      	cmp	r6, #1
 8003070:	d107      	bne.n	8003082 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003072:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003076:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003078:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800307a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800307c:	3b01      	subs	r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003082:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003084:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003086:	b29b      	uxth	r3, r3
 8003088:	b9ab      	cbnz	r3, 80030b6 <HAL_SPI_TransmitReceive+0xe4>
 800308a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	b993      	cbnz	r3, 80030b6 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003090:	4642      	mov	r2, r8
 8003092:	4639      	mov	r1, r7
 8003094:	4620      	mov	r0, r4
 8003096:	f7ff fe8b 	bl	8002db0 <SPI_EndRxTxTransaction>
 800309a:	2800      	cmp	r0, #0
 800309c:	f040 8081 	bne.w	80031a2 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030a0:	68a3      	ldr	r3, [r4, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d132      	bne.n	800310c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	9001      	str	r0, [sp, #4]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	9201      	str	r2, [sp, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	9b01      	ldr	r3, [sp, #4]
 80030b4:	e02a      	b.n	800310c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	6893      	ldr	r3, [r2, #8]
 80030ba:	0799      	lsls	r1, r3, #30
 80030bc:	d50d      	bpl.n	80030da <HAL_SPI_TransmitReceive+0x108>
 80030be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	b153      	cbz	r3, 80030da <HAL_SPI_TransmitReceive+0x108>
 80030c4:	b14d      	cbz	r5, 80030da <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 80030c6:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80030ca:	f833 1b02 	ldrh.w	r1, [r3], #2
 80030ce:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80030d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030da:	6893      	ldr	r3, [r2, #8]
 80030dc:	07db      	lsls	r3, r3, #31
 80030de:	d50c      	bpl.n	80030fa <HAL_SPI_TransmitReceive+0x128>
 80030e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	b14b      	cbz	r3, 80030fa <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 80030e6:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030e8:	68d2      	ldr	r2, [r2, #12]
 80030ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030ec:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030f0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80030f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030fa:	f7fe fba1 	bl	8001840 <HAL_GetTick>
 80030fe:	eba0 0008 	sub.w	r0, r0, r8
 8003102:	4287      	cmp	r7, r0
 8003104:	d8be      	bhi.n	8003084 <HAL_SPI_TransmitReceive+0xb2>
 8003106:	1c7e      	adds	r6, r7, #1
 8003108:	d0bc      	beq.n	8003084 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 800310a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800310c:	2301      	movs	r3, #1
 800310e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003112:	2300      	movs	r3, #0
 8003114:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003118:	b003      	add	sp, #12
 800311a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800311e:	b109      	cbz	r1, 8003124 <HAL_SPI_TransmitReceive+0x152>
 8003120:	2e01      	cmp	r6, #1
 8003122:	d108      	bne.n	8003136 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003124:	782a      	ldrb	r2, [r5, #0]
 8003126:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003128:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800312a:	3301      	adds	r3, #1
 800312c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800312e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003130:	3b01      	subs	r3, #1
 8003132:	b29b      	uxth	r3, r3
 8003134:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003136:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003138:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800313a:	b29b      	uxth	r3, r3
 800313c:	b91b      	cbnz	r3, 8003146 <HAL_SPI_TransmitReceive+0x174>
 800313e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0a4      	beq.n	8003090 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003146:	6822      	ldr	r2, [r4, #0]
 8003148:	6893      	ldr	r3, [r2, #8]
 800314a:	0798      	lsls	r0, r3, #30
 800314c:	d50e      	bpl.n	800316c <HAL_SPI_TransmitReceive+0x19a>
 800314e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003150:	b29b      	uxth	r3, r3
 8003152:	b15b      	cbz	r3, 800316c <HAL_SPI_TransmitReceive+0x19a>
 8003154:	b155      	cbz	r5, 800316c <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8003156:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003158:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800315e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003160:	3301      	adds	r3, #1
 8003162:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003164:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003166:	3b01      	subs	r3, #1
 8003168:	b29b      	uxth	r3, r3
 800316a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	6893      	ldr	r3, [r2, #8]
 8003170:	07d9      	lsls	r1, r3, #31
 8003172:	d50d      	bpl.n	8003190 <HAL_SPI_TransmitReceive+0x1be>
 8003174:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003176:	b29b      	uxth	r3, r3
 8003178:	b153      	cbz	r3, 8003190 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 800317a:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800317c:	68d2      	ldr	r2, [r2, #12]
 800317e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003180:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003184:	3301      	adds	r3, #1
 8003186:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003188:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800318a:	3b01      	subs	r3, #1
 800318c:	b29b      	uxth	r3, r3
 800318e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003190:	f7fe fb56 	bl	8001840 <HAL_GetTick>
 8003194:	eba0 0008 	sub.w	r0, r0, r8
 8003198:	4287      	cmp	r7, r0
 800319a:	d8cd      	bhi.n	8003138 <HAL_SPI_TransmitReceive+0x166>
 800319c:	1c7b      	adds	r3, r7, #1
 800319e:	d0cb      	beq.n	8003138 <HAL_SPI_TransmitReceive+0x166>
 80031a0:	e7b3      	b.n	800310a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031a2:	2320      	movs	r3, #32
 80031a4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80031a6:	2001      	movs	r0, #1
 80031a8:	e7b0      	b.n	800310c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80031aa:	2002      	movs	r0, #2
 80031ac:	e7ae      	b.n	800310c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80031ae:	2002      	movs	r0, #2
 80031b0:	e7b2      	b.n	8003118 <HAL_SPI_TransmitReceive+0x146>
	...

080031b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	b510      	push	{r4, lr}
 80031b6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	68c1      	ldr	r1, [r0, #12]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80031c2:	430a      	orrs	r2, r1
 80031c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031c6:	6882      	ldr	r2, [r0, #8]
 80031c8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80031ca:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031cc:	4302      	orrs	r2, r0
 80031ce:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80031d0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80031d4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031d8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80031da:	430a      	orrs	r2, r1
 80031dc:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	69a1      	ldr	r1, [r4, #24]
 80031e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031e6:	430a      	orrs	r2, r1
 80031e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031ea:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <UART_SetConfig+0x70>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d115      	bne.n	800321c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031f0:	f7ff fd00 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f4:	2319      	movs	r3, #25
 80031f6:	4358      	muls	r0, r3
 80031f8:	6863      	ldr	r3, [r4, #4]
 80031fa:	2264      	movs	r2, #100	; 0x64
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8003202:	fbb0 f1f2 	udiv	r1, r0, r2
 8003206:	fb02 0311 	mls	r3, r2, r1, r0
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	3332      	adds	r3, #50	; 0x32
 800320e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003212:	6824      	ldr	r4, [r4, #0]
 8003214:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003218:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 800321a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7ff fcda 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 8003220:	e7e8      	b.n	80031f4 <UART_SetConfig+0x40>
 8003222:	bf00      	nop
 8003224:	40013800 	.word	0x40013800

08003228 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322a:	4604      	mov	r4, r0
 800322c:	460e      	mov	r6, r1
 800322e:	4617      	mov	r7, r2
 8003230:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003232:	6821      	ldr	r1, [r4, #0]
 8003234:	680b      	ldr	r3, [r1, #0]
 8003236:	ea36 0303 	bics.w	r3, r6, r3
 800323a:	d101      	bne.n	8003240 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800323c:	2000      	movs	r0, #0
 800323e:	e014      	b.n	800326a <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8003240:	1c6b      	adds	r3, r5, #1
 8003242:	d0f7      	beq.n	8003234 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003244:	b995      	cbnz	r5, 800326c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003246:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003248:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003250:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800325a:	2320      	movs	r3, #32
 800325c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003260:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003264:	2300      	movs	r3, #0
 8003266:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 800326a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800326c:	f7fe fae8 	bl	8001840 <HAL_GetTick>
 8003270:	1bc0      	subs	r0, r0, r7
 8003272:	4285      	cmp	r5, r0
 8003274:	d2dd      	bcs.n	8003232 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003276:	e7e6      	b.n	8003246 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003278 <HAL_UART_Init>:
{
 8003278:	b510      	push	{r4, lr}
  if (huart == NULL)
 800327a:	4604      	mov	r4, r0
 800327c:	b340      	cbz	r0, 80032d0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800327e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003282:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003286:	b91b      	cbnz	r3, 8003290 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003288:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800328c:	f7fe f9f2 	bl	8001674 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003290:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003292:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003294:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003298:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800329a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800329c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80032a2:	f7ff ff87 	bl	80031b4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032b8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80032c2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032ca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80032ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80032d0:	2001      	movs	r0, #1
 80032d2:	e7fc      	b.n	80032ce <HAL_UART_Init+0x56>

080032d4 <HAL_UART_Transmit>:
{
 80032d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80032da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80032de:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80032e0:	2b20      	cmp	r3, #32
{
 80032e2:	460e      	mov	r6, r1
 80032e4:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80032e6:	d14a      	bne.n	800337e <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80032e8:	2900      	cmp	r1, #0
 80032ea:	d046      	beq.n	800337a <HAL_UART_Transmit+0xa6>
 80032ec:	2a00      	cmp	r2, #0
 80032ee:	d044      	beq.n	800337a <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80032f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d042      	beq.n	800337e <HAL_UART_Transmit+0xaa>
 80032f8:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fa:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80032fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003300:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003302:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003304:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003308:	f7fe fa9a 	bl	8001840 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800330e:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003314:	f8a4 9024 	strh.w	r9, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003318:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	d103      	bne.n	8003326 <HAL_UART_Transmit+0x52>
 800331e:	6923      	ldr	r3, [r4, #16]
 8003320:	b90b      	cbnz	r3, 8003326 <HAL_UART_Transmit+0x52>
 8003322:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003324:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8003326:	2300      	movs	r3, #0
 8003328:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800332c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800332e:	b29b      	uxth	r3, r3
 8003330:	b953      	cbnz	r3, 8003348 <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	4643      	mov	r3, r8
 8003334:	463a      	mov	r2, r7
 8003336:	2140      	movs	r1, #64	; 0x40
 8003338:	4620      	mov	r0, r4
 800333a:	f7ff ff75 	bl	8003228 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800333e:	b950      	cbnz	r0, 8003356 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003340:	2320      	movs	r3, #32
 8003342:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003346:	e007      	b.n	8003358 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003348:	4643      	mov	r3, r8
 800334a:	463a      	mov	r2, r7
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	4620      	mov	r0, r4
 8003350:	f7ff ff6a 	bl	8003228 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003354:	b110      	cbz	r0, 800335c <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8003356:	2003      	movs	r0, #3
}
 8003358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800335c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800335e:	b94e      	cbnz	r6, 8003374 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003360:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003364:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003368:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800336a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800336c:	3b01      	subs	r3, #1
 800336e:	b29b      	uxth	r3, r3
 8003370:	84e3      	strh	r3, [r4, #38]	; 0x26
 8003372:	e7db      	b.n	800332c <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003374:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003378:	e7f6      	b.n	8003368 <HAL_UART_Transmit+0x94>
      return  HAL_ERROR;
 800337a:	2001      	movs	r0, #1
 800337c:	e7ec      	b.n	8003358 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800337e:	2002      	movs	r0, #2
 8003380:	e7ea      	b.n	8003358 <HAL_UART_Transmit+0x84>

08003382 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003382:	b084      	sub	sp, #16
 8003384:	a801      	add	r0, sp, #4
 8003386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800338a:	b004      	add	sp, #16
 800338c:	2000      	movs	r0, #0
 800338e:	4770      	bx	lr

08003390 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003390:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003392:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8003396:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800339a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 800339e:	4618      	mov	r0, r3
 80033a0:	4770      	bx	lr

080033a2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80033a2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80033a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033aa:	045b      	lsls	r3, r3, #17
 80033ac:	0c5b      	lsrs	r3, r3, #17
 80033ae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80033b2:	2000      	movs	r0, #0
 80033b4:	4770      	bx	lr

080033b6 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80033b6:	2000      	movs	r0, #0
 80033b8:	4770      	bx	lr

080033ba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80033ba:	b084      	sub	sp, #16
 80033bc:	b510      	push	{r4, lr}
 80033be:	ac03      	add	r4, sp, #12
 80033c0:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 80033c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 80033d2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0U;
 80033d6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80033da:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 80033de:	4618      	mov	r0, r3
 80033e0:	4770      	bx	lr
	...

080033e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033e6:	780c      	ldrb	r4, [r1, #0]
{
 80033e8:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033ea:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80033ee:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033f0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80033f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 80033f8:	2803      	cmp	r0, #3
 80033fa:	d803      	bhi.n	8003404 <USB_ActivateEndpoint+0x20>
 80033fc:	e8df f000 	tbb	[pc, r0]
 8003400:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8003404:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003406:	f248 0580 	movw	r5, #32896	; 0x8080
 800340a:	432a      	orrs	r2, r5
 800340c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003410:	780e      	ldrb	r6, [r1, #0]
 8003412:	4a90      	ldr	r2, [pc, #576]	; (8003654 <USB_ActivateEndpoint+0x270>)
 8003414:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8003418:	4335      	orrs	r5, r6
 800341a:	4014      	ands	r4, r2
 800341c:	432c      	orrs	r4, r5
 800341e:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8003422:	7b0d      	ldrb	r5, [r1, #12]
 8003424:	780c      	ldrb	r4, [r1, #0]
 8003426:	2d00      	cmp	r5, #0
 8003428:	f040 8082 	bne.w	8003530 <USB_ActivateEndpoint+0x14c>
 800342c:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 800342e:	784e      	ldrb	r6, [r1, #1]
 8003430:	086d      	lsrs	r5, r5, #1
 8003432:	006d      	lsls	r5, r5, #1
 8003434:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8003438:	b376      	cbz	r6, 8003498 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800343a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800343e:	4434      	add	r4, r6
 8003440:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003444:	780d      	ldrb	r5, [r1, #0]
 8003446:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800344a:	0667      	lsls	r7, r4, #25
 800344c:	d508      	bpl.n	8003460 <USB_ActivateEndpoint+0x7c>
 800344e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003452:	4022      	ands	r2, r4
 8003454:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003458:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800345c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003460:	78ca      	ldrb	r2, [r1, #3]
 8003462:	780c      	ldrb	r4, [r1, #0]
 8003464:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003466:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 800346a:	4a7b      	ldr	r2, [pc, #492]	; (8003658 <USB_ActivateEndpoint+0x274>)
 800346c:	ea02 0201 	and.w	r2, r2, r1
 8003470:	bf18      	it	ne
 8003472:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800347e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8003482:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8003484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003488:	2000      	movs	r0, #0
 800348a:	e7bc      	b.n	8003406 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 800348c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003490:	e7fa      	b.n	8003488 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003492:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003496:	e7f7      	b.n	8003488 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003498:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800349c:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800349e:	4414      	add	r4, r2
 80034a0:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80034a4:	780a      	ldrb	r2, [r1, #0]
 80034a6:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80034aa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80034ae:	b2a4      	uxth	r4, r4
 80034b0:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80034b4:	bb56      	cbnz	r6, 800350c <USB_ActivateEndpoint+0x128>
 80034b6:	5b15      	ldrh	r5, [r2, r4]
 80034b8:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80034bc:	042d      	lsls	r5, r5, #16
 80034be:	0c2d      	lsrs	r5, r5, #16
 80034c0:	5315      	strh	r5, [r2, r4]
 80034c2:	5b15      	ldrh	r5, [r2, r4]
 80034c4:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80034c8:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034ca:	780c      	ldrb	r4, [r1, #0]
 80034cc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034d0:	0457      	lsls	r7, r2, #17
 80034d2:	d50b      	bpl.n	80034ec <USB_ActivateEndpoint+0x108>
 80034d4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034dc:	0512      	lsls	r2, r2, #20
 80034de:	0d12      	lsrs	r2, r2, #20
 80034e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80034e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034e8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034ec:	7809      	ldrb	r1, [r1, #0]
 80034ee:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80034f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034fa:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003506:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800350a:	e7ba      	b.n	8003482 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800350c:	2e3e      	cmp	r6, #62	; 0x3e
 800350e:	d806      	bhi.n	800351e <USB_ActivateEndpoint+0x13a>
 8003510:	0875      	lsrs	r5, r6, #1
 8003512:	07f6      	lsls	r6, r6, #31
 8003514:	bf48      	it	mi
 8003516:	3501      	addmi	r5, #1
 8003518:	02ad      	lsls	r5, r5, #10
 800351a:	b2ad      	uxth	r5, r5
 800351c:	e7d4      	b.n	80034c8 <USB_ActivateEndpoint+0xe4>
 800351e:	0977      	lsrs	r7, r6, #5
 8003520:	06f5      	lsls	r5, r6, #27
 8003522:	4d4e      	ldr	r5, [pc, #312]	; (800365c <USB_ActivateEndpoint+0x278>)
 8003524:	bf08      	it	eq
 8003526:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 800352a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800352e:	e7f4      	b.n	800351a <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003530:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8003534:	4015      	ands	r5, r2
 8003536:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 800353a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800353e:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003542:	780c      	ldrb	r4, [r1, #0]
 8003544:	890d      	ldrh	r5, [r1, #8]
 8003546:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800354a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800354e:	086d      	lsrs	r5, r5, #1
 8003550:	b2b6      	uxth	r6, r6
 8003552:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003556:	006d      	lsls	r5, r5, #1
 8003558:	53a5      	strh	r5, [r4, r6]
 800355a:	780c      	ldrb	r4, [r1, #0]
 800355c:	894d      	ldrh	r5, [r1, #10]
 800355e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003562:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8003566:	086d      	lsrs	r5, r5, #1
 8003568:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 800356c:	006d      	lsls	r5, r5, #1
 800356e:	b2b6      	uxth	r6, r6
 8003570:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 8003572:	784c      	ldrb	r4, [r1, #1]
 8003574:	780d      	ldrb	r5, [r1, #0]
 8003576:	bbb4      	cbnz	r4, 80035e6 <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003578:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800357c:	0466      	lsls	r6, r4, #17
 800357e:	d508      	bpl.n	8003592 <USB_ActivateEndpoint+0x1ae>
 8003580:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003584:	4022      	ands	r2, r4
 8003586:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800358a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800358e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003592:	780c      	ldrb	r4, [r1, #0]
 8003594:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003598:	0655      	lsls	r5, r2, #25
 800359a:	d50b      	bpl.n	80035b4 <USB_ActivateEndpoint+0x1d0>
 800359c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80035a4:	0512      	lsls	r2, r2, #20
 80035a6:	0d12      	lsrs	r2, r2, #20
 80035a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ac:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80035b0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035b4:	f248 0480 	movw	r4, #32896	; 0x8080
 80035b8:	780d      	ldrb	r5, [r1, #0]
 80035ba:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80035be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035c6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80035ca:	4322      	orrs	r2, r4
 80035cc:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035d0:	7809      	ldrb	r1, [r1, #0]
 80035d2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80035d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035de:	4314      	orrs	r4, r2
 80035e0:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 80035e4:	e74d      	b.n	8003482 <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035e6:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80035ea:	0464      	lsls	r4, r4, #17
 80035ec:	d508      	bpl.n	8003600 <USB_ActivateEndpoint+0x21c>
 80035ee:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80035f2:	4022      	ands	r2, r4
 80035f4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80035f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035fc:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003600:	780c      	ldrb	r4, [r1, #0]
 8003602:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003606:	0652      	lsls	r2, r2, #25
 8003608:	d50b      	bpl.n	8003622 <USB_ActivateEndpoint+0x23e>
 800360a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800360e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003612:	0512      	lsls	r2, r2, #20
 8003614:	0d12      	lsrs	r2, r2, #20
 8003616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800361a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800361e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003622:	78ca      	ldrb	r2, [r1, #3]
 8003624:	780c      	ldrb	r4, [r1, #0]
 8003626:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003628:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800362c:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <USB_ActivateEndpoint+0x274>)
 800362e:	ea02 0205 	and.w	r2, r2, r5
 8003632:	bf18      	it	ne
 8003634:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800363c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003640:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003644:	7809      	ldrb	r1, [r1, #0]
 8003646:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800364a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800364e:	0492      	lsls	r2, r2, #18
 8003650:	0c92      	lsrs	r2, r2, #18
 8003652:	e754      	b.n	80034fe <USB_ActivateEndpoint+0x11a>
 8003654:	ffff8f8f 	.word	0xffff8f8f
 8003658:	ffff8fbf 	.word	0xffff8fbf
 800365c:	ffff8000 	.word	0xffff8000

08003660 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003660:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8003662:	7b0c      	ldrb	r4, [r1, #12]
 8003664:	784a      	ldrb	r2, [r1, #1]
 8003666:	780b      	ldrb	r3, [r1, #0]
 8003668:	bbbc      	cbnz	r4, 80036da <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 800366a:	b1f2      	cbz	r2, 80036aa <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800366c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003670:	0652      	lsls	r2, r2, #25
 8003672:	d50b      	bpl.n	800368c <USB_DeactivateEndpoint+0x2c>
 8003674:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003678:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800367c:	0512      	lsls	r2, r2, #20
 800367e:	0d12      	lsrs	r2, r2, #20
 8003680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003684:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003688:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800368c:	780a      	ldrb	r2, [r1, #0]
 800368e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003692:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003696:	051b      	lsls	r3, r3, #20
 8003698:	0d1b      	lsrs	r3, r3, #20
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800369a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80036a6:	2000      	movs	r0, #0
 80036a8:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036ae:	0454      	lsls	r4, r2, #17
 80036b0:	d50b      	bpl.n	80036ca <USB_DeactivateEndpoint+0x6a>
 80036b2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036ba:	0512      	lsls	r2, r2, #20
 80036bc:	0d12      	lsrs	r2, r2, #20
 80036be:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80036c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036c6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036ca:	780a      	ldrb	r2, [r1, #0]
 80036cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d4:	049b      	lsls	r3, r3, #18
 80036d6:	0c9b      	lsrs	r3, r3, #18
 80036d8:	e7df      	b.n	800369a <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80036da:	2a00      	cmp	r2, #0
 80036dc:	d144      	bne.n	8003768 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036de:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036e2:	0452      	lsls	r2, r2, #17
 80036e4:	d50b      	bpl.n	80036fe <USB_DeactivateEndpoint+0x9e>
 80036e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036ee:	0512      	lsls	r2, r2, #20
 80036f0:	0d12      	lsrs	r2, r2, #20
 80036f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80036f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036fa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036fe:	780a      	ldrb	r2, [r1, #0]
 8003700:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003704:	065c      	lsls	r4, r3, #25
 8003706:	d50b      	bpl.n	8003720 <USB_DeactivateEndpoint+0xc0>
 8003708:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800370c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003710:	051b      	lsls	r3, r3, #20
 8003712:	0d1b      	lsrs	r3, r3, #20
 8003714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003718:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800371c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003720:	780a      	ldrb	r2, [r1, #0]
 8003722:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372a:	051b      	lsls	r3, r3, #20
 800372c:	0d1b      	lsrs	r3, r3, #20
 800372e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003736:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800373a:	f248 0280 	movw	r2, #32896	; 0x8080
 800373e:	780c      	ldrb	r4, [r1, #0]
 8003740:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374c:	4313      	orrs	r3, r2
 800374e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003752:	7809      	ldrb	r1, [r1, #0]
 8003754:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003760:	431a      	orrs	r2, r3
 8003762:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8003766:	e79e      	b.n	80036a6 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003768:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800376c:	0452      	lsls	r2, r2, #17
 800376e:	d50b      	bpl.n	8003788 <USB_DeactivateEndpoint+0x128>
 8003770:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003774:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003778:	0512      	lsls	r2, r2, #20
 800377a:	0d12      	lsrs	r2, r2, #20
 800377c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003780:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003784:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003788:	780a      	ldrb	r2, [r1, #0]
 800378a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800378e:	065b      	lsls	r3, r3, #25
 8003790:	d50b      	bpl.n	80037aa <USB_DeactivateEndpoint+0x14a>
 8003792:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800379a:	051b      	lsls	r3, r3, #20
 800379c:	0d1b      	lsrs	r3, r3, #20
 800379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80037aa:	780a      	ldrb	r2, [r1, #0]
 80037ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b4:	051b      	lsls	r3, r3, #20
 80037b6:	0d1b      	lsrs	r3, r3, #20
 80037b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037c4:	f248 0280 	movw	r2, #32896	; 0x8080
 80037c8:	780c      	ldrb	r4, [r1, #0]
 80037ca:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80037ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037dc:	7809      	ldrb	r1, [r1, #0]
 80037de:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80037e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ea:	e7b9      	b.n	8003760 <USB_DeactivateEndpoint+0x100>

080037ec <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80037ec:	784b      	ldrb	r3, [r1, #1]
 80037ee:	780a      	ldrb	r2, [r1, #0]
 80037f0:	b17b      	cbz	r3, 8003812 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80037f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fe:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800380e:	2000      	movs	r0, #0
 8003810:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003812:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003822:	e7ee      	b.n	8003802 <USB_EPSetStall+0x16>

08003824 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003824:	7b0b      	ldrb	r3, [r1, #12]
 8003826:	bb23      	cbnz	r3, 8003872 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8003828:	784b      	ldrb	r3, [r1, #1]
 800382a:	780a      	ldrb	r2, [r1, #0]
 800382c:	b31b      	cbz	r3, 8003876 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800382e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003832:	065b      	lsls	r3, r3, #25
 8003834:	d50b      	bpl.n	800384e <USB_EPClearStall+0x2a>
 8003836:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800383a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800383e:	051b      	lsls	r3, r3, #20
 8003840:	0d1b      	lsrs	r3, r3, #20
 8003842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003846:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800384a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800384e:	78cb      	ldrb	r3, [r1, #3]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d00e      	beq.n	8003872 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003854:	780a      	ldrb	r2, [r1, #0]
 8003856:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003862:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003872:	2000      	movs	r0, #0
 8003874:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003876:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800387a:	045b      	lsls	r3, r3, #17
 800387c:	d50b      	bpl.n	8003896 <USB_EPClearStall+0x72>
 800387e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003886:	051b      	lsls	r3, r3, #20
 8003888:	0d1b      	lsrs	r3, r3, #20
 800388a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800388e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003892:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003896:	780a      	ldrb	r2, [r1, #0]
 8003898:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800389c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80038a8:	e7dd      	b.n	8003866 <USB_EPClearStall+0x42>

080038aa <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80038aa:	b911      	cbnz	r1, 80038b2 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80038b2:	2000      	movs	r0, #0
 80038b4:	4770      	bx	lr

080038b6 <USB_DevConnect>:
 80038b6:	2000      	movs	r0, #0
 80038b8:	4770      	bx	lr

080038ba <USB_DevDisconnect>:
 80038ba:	2000      	movs	r0, #0
 80038bc:	4770      	bx	lr

080038be <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80038be:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80038c2:	4770      	bx	lr

080038c4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80038c4:	2000      	movs	r0, #0
 80038c6:	4770      	bx	lr

080038c8 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80038c8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80038cc:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80038ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 80038d8:	429a      	cmp	r2, r3
 80038da:	d100      	bne.n	80038de <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80038dc:	4770      	bx	lr
 80038de:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80038e2:	f822 0b04 	strh.w	r0, [r2], #4
 80038e6:	e7f7      	b.n	80038d8 <USB_WritePMA+0x10>

080038e8 <USB_EPStartXfer>:
{
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80038ec:	7849      	ldrb	r1, [r1, #1]
{
 80038ee:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 80038f0:	2901      	cmp	r1, #1
 80038f2:	7b27      	ldrb	r7, [r4, #12]
 80038f4:	f040 8183 	bne.w	8003bfe <USB_EPStartXfer+0x316>
    if (ep->xfer_len > ep->maxpacket)
 80038f8:	6922      	ldr	r2, [r4, #16]
 80038fa:	69a6      	ldr	r6, [r4, #24]
 80038fc:	6961      	ldr	r1, [r4, #20]
 80038fe:	4296      	cmp	r6, r2
 8003900:	bf28      	it	cs
 8003902:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8003904:	b9ef      	cbnz	r7, 8003942 <USB_EPStartXfer+0x5a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003906:	b2b6      	uxth	r6, r6
 8003908:	4633      	mov	r3, r6
 800390a:	88e2      	ldrh	r2, [r4, #6]
 800390c:	f7ff ffdc 	bl	80038c8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003910:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003914:	7822      	ldrb	r2, [r4, #0]
 8003916:	f205 4304 	addw	r3, r5, #1028	; 0x404
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	440b      	add	r3, r1
 800391e:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003920:	7822      	ldrb	r2, [r4, #0]
 8003922:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800392e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8003932:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8003940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8003942:	78e3      	ldrb	r3, [r4, #3]
 8003944:	7827      	ldrb	r7, [r4, #0]
 8003946:	2b02      	cmp	r3, #2
 8003948:	f040 8124 	bne.w	8003b94 <USB_EPStartXfer+0x2ac>
        if (ep->xfer_len_db > ep->maxpacket)
 800394c:	6a23      	ldr	r3, [r4, #32]
 800394e:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003950:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8003954:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8003958:	ea4f 5202 	mov.w	r2, r2, lsl #20
 800395c:	ea4f 5212 	mov.w	r2, r2, lsr #20
        if (ep->xfer_len_db > ep->maxpacket)
 8003960:	f080 8107 	bcs.w	8003b72 <USB_EPStartXfer+0x28a>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003964:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800396c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003970:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 8003972:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003974:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8003978:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800397a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800397e:	b2b3      	uxth	r3, r6
 8003980:	7860      	ldrb	r0, [r4, #1]
 8003982:	d07c      	beq.n	8003a7e <USB_EPStartXfer+0x196>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003984:	2800      	cmp	r0, #0
 8003986:	d14d      	bne.n	8003a24 <USB_EPStartXfer+0x13c>
 8003988:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800398c:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8003990:	4407      	add	r7, r0
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	2e00      	cmp	r6, #0
 8003996:	d131      	bne.n	80039fc <USB_EPStartXfer+0x114>
 8003998:	5ab8      	ldrh	r0, [r7, r2]
 800399a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800399e:	0400      	lsls	r0, r0, #16
 80039a0:	0c00      	lsrs	r0, r0, #16
 80039a2:	52b8      	strh	r0, [r7, r2]
 80039a4:	5ab8      	ldrh	r0, [r7, r2]
 80039a6:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80039aa:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039ac:	8962      	ldrh	r2, [r4, #10]
 80039ae:	4628      	mov	r0, r5
 80039b0:	f7ff ff8a 	bl	80038c8 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80039b4:	6a22      	ldr	r2, [r4, #32]
 80039b6:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80039b8:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80039ba:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80039bc:	bf89      	itett	hi
 80039be:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 80039c0:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 80039c2:	6222      	strhi	r2, [r4, #32]
 80039c4:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039c6:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 80039c8:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 80039ca:	bf98      	it	ls
 80039cc:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 80039ce:	6161      	str	r1, [r4, #20]
 80039d0:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039d2:	2800      	cmp	r0, #0
 80039d4:	d148      	bne.n	8003a68 <USB_EPStartXfer+0x180>
 80039d6:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80039da:	7827      	ldrb	r7, [r4, #0]
 80039dc:	f205 4604 	addw	r6, r5, #1028	; 0x404
 80039e0:	013f      	lsls	r7, r7, #4
 80039e2:	4406      	add	r6, r0
 80039e4:	bb42      	cbnz	r2, 8003a38 <USB_EPStartXfer+0x150>
 80039e6:	5bba      	ldrh	r2, [r7, r6]
 80039e8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80039ec:	0412      	lsls	r2, r2, #16
 80039ee:	0c12      	lsrs	r2, r2, #16
 80039f0:	53ba      	strh	r2, [r7, r6]
 80039f2:	5bba      	ldrh	r2, [r7, r6]
 80039f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f8:	53ba      	strh	r2, [r7, r6]
 80039fa:	e026      	b.n	8003a4a <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039fc:	2e3e      	cmp	r6, #62	; 0x3e
 80039fe:	d807      	bhi.n	8003a10 <USB_EPStartXfer+0x128>
 8003a00:	0870      	lsrs	r0, r6, #1
 8003a02:	f016 0f01 	tst.w	r6, #1
 8003a06:	bf18      	it	ne
 8003a08:	3001      	addne	r0, #1
 8003a0a:	0280      	lsls	r0, r0, #10
 8003a0c:	b280      	uxth	r0, r0
 8003a0e:	e7cc      	b.n	80039aa <USB_EPStartXfer+0xc2>
 8003a10:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8003a14:	06f0      	lsls	r0, r6, #27
 8003a16:	4897      	ldr	r0, [pc, #604]	; (8003c74 <USB_EPStartXfer+0x38c>)
 8003a18:	bf08      	it	eq
 8003a1a:	f10c 3cff 	addeq.w	ip, ip, #4294967295	; 0xffffffff
 8003a1e:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8003a22:	e7f3      	b.n	8003a0c <USB_EPStartXfer+0x124>
 8003a24:	2801      	cmp	r0, #1
 8003a26:	d1c1      	bne.n	80039ac <USB_EPStartXfer+0xc4>
 8003a28:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 8003a2c:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003a30:	4438      	add	r0, r7
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	5283      	strh	r3, [r0, r2]
 8003a36:	e7b9      	b.n	80039ac <USB_EPStartXfer+0xc4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a38:	2a3e      	cmp	r2, #62	; 0x3e
 8003a3a:	d80b      	bhi.n	8003a54 <USB_EPStartXfer+0x16c>
 8003a3c:	0850      	lsrs	r0, r2, #1
 8003a3e:	07d2      	lsls	r2, r2, #31
 8003a40:	bf48      	it	mi
 8003a42:	3001      	addmi	r0, #1
 8003a44:	0280      	lsls	r0, r0, #10
 8003a46:	b280      	uxth	r0, r0
 8003a48:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a4a:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a4c:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a4e:	f7ff ff3b 	bl	80038c8 <USB_WritePMA>
 8003a52:	e765      	b.n	8003920 <USB_EPStartXfer+0x38>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a54:	0950      	lsrs	r0, r2, #5
 8003a56:	06d2      	lsls	r2, r2, #27
 8003a58:	4a86      	ldr	r2, [pc, #536]	; (8003c74 <USB_EPStartXfer+0x38c>)
 8003a5a:	bf08      	it	eq
 8003a5c:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8003a60:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8003a64:	b292      	uxth	r2, r2
 8003a66:	e7c7      	b.n	80039f8 <USB_EPStartXfer+0x110>
 8003a68:	2801      	cmp	r0, #1
 8003a6a:	d1ee      	bne.n	8003a4a <USB_EPStartXfer+0x162>
 8003a6c:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003a70:	7820      	ldrb	r0, [r4, #0]
 8003a72:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003a76:	0100      	lsls	r0, r0, #4
 8003a78:	4432      	add	r2, r6
 8003a7a:	5283      	strh	r3, [r0, r2]
 8003a7c:	e7e5      	b.n	8003a4a <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d14d      	bne.n	8003b1e <USB_EPStartXfer+0x236>
 8003a82:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003a86:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8003a8a:	4407      	add	r7, r0
 8003a8c:	0112      	lsls	r2, r2, #4
 8003a8e:	2e00      	cmp	r6, #0
 8003a90:	d131      	bne.n	8003af6 <USB_EPStartXfer+0x20e>
 8003a92:	5ab8      	ldrh	r0, [r7, r2]
 8003a94:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003a98:	0400      	lsls	r0, r0, #16
 8003a9a:	0c00      	lsrs	r0, r0, #16
 8003a9c:	52b8      	strh	r0, [r7, r2]
 8003a9e:	5ab8      	ldrh	r0, [r7, r2]
 8003aa0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003aa4:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003aa6:	8922      	ldrh	r2, [r4, #8]
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f7ff ff0d 	bl	80038c8 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003aae:	6a22      	ldr	r2, [r4, #32]
 8003ab0:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003ab2:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003ab4:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8003ab6:	bf89      	itett	hi
 8003ab8:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8003aba:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8003abc:	6222      	strhi	r2, [r4, #32]
 8003abe:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ac0:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003ac2:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8003ac4:	bf98      	it	ls
 8003ac6:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 8003ac8:	6161      	str	r1, [r4, #20]
 8003aca:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d145      	bne.n	8003b5c <USB_EPStartXfer+0x274>
 8003ad0:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003ad4:	7827      	ldrb	r7, [r4, #0]
 8003ad6:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 8003ada:	013f      	lsls	r7, r7, #4
 8003adc:	4406      	add	r6, r0
 8003ade:	bb42      	cbnz	r2, 8003b32 <USB_EPStartXfer+0x24a>
 8003ae0:	5bba      	ldrh	r2, [r7, r6]
 8003ae2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003ae6:	0412      	lsls	r2, r2, #16
 8003ae8:	0c12      	lsrs	r2, r2, #16
 8003aea:	53ba      	strh	r2, [r7, r6]
 8003aec:	5bba      	ldrh	r2, [r7, r6]
 8003aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af2:	53ba      	strh	r2, [r7, r6]
 8003af4:	e026      	b.n	8003b44 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003af6:	2e3e      	cmp	r6, #62	; 0x3e
 8003af8:	d807      	bhi.n	8003b0a <USB_EPStartXfer+0x222>
 8003afa:	0870      	lsrs	r0, r6, #1
 8003afc:	f016 0f01 	tst.w	r6, #1
 8003b00:	bf18      	it	ne
 8003b02:	3001      	addne	r0, #1
 8003b04:	0280      	lsls	r0, r0, #10
 8003b06:	b280      	uxth	r0, r0
 8003b08:	e7cc      	b.n	8003aa4 <USB_EPStartXfer+0x1bc>
 8003b0a:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8003b0e:	06f0      	lsls	r0, r6, #27
 8003b10:	4858      	ldr	r0, [pc, #352]	; (8003c74 <USB_EPStartXfer+0x38c>)
 8003b12:	bf08      	it	eq
 8003b14:	f10c 3cff 	addeq.w	ip, ip, #4294967295	; 0xffffffff
 8003b18:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8003b1c:	e7f3      	b.n	8003b06 <USB_EPStartXfer+0x21e>
 8003b1e:	2801      	cmp	r0, #1
 8003b20:	d1c1      	bne.n	8003aa6 <USB_EPStartXfer+0x1be>
 8003b22:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 8003b26:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8003b2a:	4438      	add	r0, r7
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	5283      	strh	r3, [r0, r2]
 8003b30:	e7b9      	b.n	8003aa6 <USB_EPStartXfer+0x1be>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b32:	2a3e      	cmp	r2, #62	; 0x3e
 8003b34:	d808      	bhi.n	8003b48 <USB_EPStartXfer+0x260>
 8003b36:	0850      	lsrs	r0, r2, #1
 8003b38:	07d2      	lsls	r2, r2, #31
 8003b3a:	bf48      	it	mi
 8003b3c:	3001      	addmi	r0, #1
 8003b3e:	0280      	lsls	r0, r0, #10
 8003b40:	b280      	uxth	r0, r0
 8003b42:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b44:	8962      	ldrh	r2, [r4, #10]
 8003b46:	e781      	b.n	8003a4c <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b48:	0950      	lsrs	r0, r2, #5
 8003b4a:	06d2      	lsls	r2, r2, #27
 8003b4c:	4a49      	ldr	r2, [pc, #292]	; (8003c74 <USB_EPStartXfer+0x38c>)
 8003b4e:	bf08      	it	eq
 8003b50:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8003b54:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8003b58:	b292      	uxth	r2, r2
 8003b5a:	e7ca      	b.n	8003af2 <USB_EPStartXfer+0x20a>
 8003b5c:	2801      	cmp	r0, #1
 8003b5e:	d1f1      	bne.n	8003b44 <USB_EPStartXfer+0x25c>
 8003b60:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003b64:	7820      	ldrb	r0, [r4, #0]
 8003b66:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003b6a:	0100      	lsls	r0, r0, #4
 8003b6c:	4432      	add	r2, r6
 8003b6e:	5283      	strh	r3, [r0, r2]
 8003b70:	e7e8      	b.n	8003b44 <USB_EPStartXfer+0x25c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b7a:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003b7e:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003b82:	7826      	ldrb	r6, [r4, #0]
 8003b84:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003b88:	443a      	add	r2, r7
 8003b8a:	0136      	lsls	r6, r6, #4
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b90:	8922      	ldrh	r2, [r4, #8]
 8003b92:	e75c      	b.n	8003a4e <USB_EPStartXfer+0x166>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b94:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b98:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b9c:	0652      	lsls	r2, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b9e:	bf4b      	itete	mi
 8003ba0:	f205 420c 	addwmi	r2, r5, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ba4:	f205 4204 	addwpl	r2, r5, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ba8:	1812      	addmi	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003baa:	1812      	addpl	r2, r2, r0
 8003bac:	b2b3      	uxth	r3, r6
 8003bae:	ea4f 1707 	mov.w	r7, r7, lsl #4
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003bb2:	bf4b      	itete	mi
 8003bb4:	53d3      	strhmi	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bb6:	53d3      	strhpl	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 8003bb8:	8962      	ldrhmi	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 8003bba:	8922      	ldrhpl	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f7ff fe83 	bl	80038c8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003bc2:	7863      	ldrb	r3, [r4, #1]
 8003bc4:	7822      	ldrb	r2, [r4, #0]
 8003bc6:	b963      	cbnz	r3, 8003be2 <USB_EPStartXfer+0x2fa>
 8003bc8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd0:	051b      	lsls	r3, r3, #20
 8003bd2:	0d1b      	lsrs	r3, r3, #20
 8003bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bdc:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003be0:	e69e      	b.n	8003920 <USB_EPStartXfer+0x38>
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	f47f ae9c 	bne.w	8003920 <USB_EPStartXfer+0x38>
 8003be8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf0:	051b      	lsls	r3, r3, #20
 8003bf2:	0d1b      	lsrs	r3, r3, #20
 8003bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfc:	e7ee      	b.n	8003bdc <USB_EPStartXfer+0x2f4>
    if (ep->doublebuffer == 0U)
 8003bfe:	2f00      	cmp	r7, #0
 8003c00:	d13a      	bne.n	8003c78 <USB_EPStartXfer+0x390>
      if (ep->xfer_len > ep->maxpacket)
 8003c02:	69a2      	ldr	r2, [r4, #24]
 8003c04:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003c06:	f205 410c 	addw	r1, r5, #1036	; 0x40c
      if (ep->xfer_len > ep->maxpacket)
 8003c0a:	429a      	cmp	r2, r3
        ep->xfer_len = 0U;
 8003c0c:	bf92      	itee	ls
 8003c0e:	4613      	movls	r3, r2
        ep->xfer_len -= len;
 8003c10:	1ad2      	subhi	r2, r2, r3
 8003c12:	61a2      	strhi	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003c14:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003c18:	7820      	ldrb	r0, [r4, #0]
        ep->xfer_len = 0U;
 8003c1a:	bf98      	it	ls
 8003c1c:	61a7      	strls	r7, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003c1e:	0100      	lsls	r0, r0, #4
 8003c20:	4411      	add	r1, r2
 8003c22:	b953      	cbnz	r3, 8003c3a <USB_EPStartXfer+0x352>
 8003c24:	5a43      	ldrh	r3, [r0, r1]
 8003c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c2a:	041b      	lsls	r3, r3, #16
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	5243      	strh	r3, [r0, r1]
 8003c30:	5a43      	ldrh	r3, [r0, r1]
 8003c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c36:	5243      	strh	r3, [r0, r1]
 8003c38:	e008      	b.n	8003c4c <USB_EPStartXfer+0x364>
 8003c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c3c:	d810      	bhi.n	8003c60 <USB_EPStartXfer+0x378>
 8003c3e:	085a      	lsrs	r2, r3, #1
 8003c40:	07df      	lsls	r7, r3, #31
 8003c42:	bf48      	it	mi
 8003c44:	3201      	addmi	r2, #1
 8003c46:	0292      	lsls	r2, r2, #10
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c4c:	7822      	ldrb	r2, [r4, #0]
 8003c4e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003c5e:	e668      	b.n	8003932 <USB_EPStartXfer+0x4a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003c60:	095a      	lsrs	r2, r3, #5
 8003c62:	06de      	lsls	r6, r3, #27
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <USB_EPStartXfer+0x38c>)
 8003c66:	bf08      	it	eq
 8003c68:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8003c6c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	e7e0      	b.n	8003c36 <USB_EPStartXfer+0x34e>
 8003c74:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8003c78:	78e3      	ldrb	r3, [r4, #3]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d174      	bne.n	8003d68 <USB_EPStartXfer+0x480>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003c7e:	b999      	cbnz	r1, 8003ca8 <USB_EPStartXfer+0x3c0>
 8003c80:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003c84:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003c88:	7821      	ldrb	r1, [r4, #0]
 8003c8a:	6920      	ldr	r0, [r4, #16]
 8003c8c:	0109      	lsls	r1, r1, #4
 8003c8e:	441a      	add	r2, r3
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d13a      	bne.n	8003d0a <USB_EPStartXfer+0x422>
 8003c94:	5a8b      	ldrh	r3, [r1, r2]
 8003c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	528b      	strh	r3, [r1, r2]
 8003ca0:	5a8b      	ldrh	r3, [r1, r2]
 8003ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca6:	528b      	strh	r3, [r1, r2]
 8003ca8:	7862      	ldrb	r2, [r4, #1]
 8003caa:	7823      	ldrb	r3, [r4, #0]
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	d150      	bne.n	8003d52 <USB_EPStartXfer+0x46a>
 8003cb0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003cb4:	6920      	ldr	r0, [r4, #16]
 8003cb6:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003cba:	4411      	add	r1, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d135      	bne.n	8003d2e <USB_EPStartXfer+0x446>
 8003cc2:	5aca      	ldrh	r2, [r1, r3]
 8003cc4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003cc8:	0412      	lsls	r2, r2, #16
 8003cca:	0c12      	lsrs	r2, r2, #16
 8003ccc:	52ca      	strh	r2, [r1, r3]
 8003cce:	5aca      	ldrh	r2, [r1, r3]
 8003cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd4:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8003cd6:	69e3      	ldr	r3, [r4, #28]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0b7      	beq.n	8003c4c <USB_EPStartXfer+0x364>
 8003cdc:	f244 0140 	movw	r1, #16448	; 0x4040
 8003ce0:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003ce2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003ce6:	400b      	ands	r3, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	d001      	beq.n	8003cf0 <USB_EPStartXfer+0x408>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ad      	bne.n	8003c4c <USB_EPStartXfer+0x364>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8003cf0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	0d1b      	lsrs	r3, r3, #20
 8003cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d04:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003d08:	e7a0      	b.n	8003c4c <USB_EPStartXfer+0x364>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003d0a:	283e      	cmp	r0, #62	; 0x3e
 8003d0c:	d806      	bhi.n	8003d1c <USB_EPStartXfer+0x434>
 8003d0e:	0843      	lsrs	r3, r0, #1
 8003d10:	07c0      	lsls	r0, r0, #31
 8003d12:	bf48      	it	mi
 8003d14:	3301      	addmi	r3, #1
 8003d16:	029b      	lsls	r3, r3, #10
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	e7c4      	b.n	8003ca6 <USB_EPStartXfer+0x3be>
 8003d1c:	0946      	lsrs	r6, r0, #5
 8003d1e:	06c7      	lsls	r7, r0, #27
 8003d20:	4b46      	ldr	r3, [pc, #280]	; (8003e3c <USB_EPStartXfer+0x554>)
 8003d22:	bf08      	it	eq
 8003d24:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8003d28:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8003d2c:	e7f4      	b.n	8003d18 <USB_EPStartXfer+0x430>
 8003d2e:	283e      	cmp	r0, #62	; 0x3e
 8003d30:	d806      	bhi.n	8003d40 <USB_EPStartXfer+0x458>
 8003d32:	0842      	lsrs	r2, r0, #1
 8003d34:	07c0      	lsls	r0, r0, #31
 8003d36:	bf48      	it	mi
 8003d38:	3201      	addmi	r2, #1
 8003d3a:	0292      	lsls	r2, r2, #10
 8003d3c:	b292      	uxth	r2, r2
 8003d3e:	e7c9      	b.n	8003cd4 <USB_EPStartXfer+0x3ec>
 8003d40:	0946      	lsrs	r6, r0, #5
 8003d42:	06c7      	lsls	r7, r0, #27
 8003d44:	4a3d      	ldr	r2, [pc, #244]	; (8003e3c <USB_EPStartXfer+0x554>)
 8003d46:	bf08      	it	eq
 8003d48:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8003d4c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003d50:	e7f4      	b.n	8003d3c <USB_EPStartXfer+0x454>
 8003d52:	2a01      	cmp	r2, #1
 8003d54:	d1bf      	bne.n	8003cd6 <USB_EPStartXfer+0x3ee>
 8003d56:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003d5a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003d5e:	440a      	add	r2, r1
 8003d60:	8a21      	ldrh	r1, [r4, #16]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	52d1      	strh	r1, [r2, r3]
 8003d66:	e7b6      	b.n	8003cd6 <USB_EPStartXfer+0x3ee>
      else if (ep->type == EP_TYPE_ISOC)
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d164      	bne.n	8003e36 <USB_EPStartXfer+0x54e>
        if (ep->xfer_len > ep->maxpacket)
 8003d6c:	69a2      	ldr	r2, [r4, #24]
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	429a      	cmp	r2, r3
          ep->xfer_len = 0U;
 8003d72:	bf95      	itete	ls
 8003d74:	2300      	movls	r3, #0
          ep->xfer_len -= len;
 8003d76:	1ad2      	subhi	r2, r2, r3
          ep->xfer_len = 0U;
 8003d78:	61a3      	strls	r3, [r4, #24]
          ep->xfer_len -= len;
 8003d7a:	61a2      	strhi	r2, [r4, #24]
          ep->xfer_len = 0U;
 8003d7c:	bf98      	it	ls
 8003d7e:	4613      	movls	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003d80:	b989      	cbnz	r1, 8003da6 <USB_EPStartXfer+0x4be>
 8003d82:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003d86:	7820      	ldrb	r0, [r4, #0]
 8003d88:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8003d8c:	0100      	lsls	r0, r0, #4
 8003d8e:	4411      	add	r1, r2
 8003d90:	b9fb      	cbnz	r3, 8003dd2 <USB_EPStartXfer+0x4ea>
 8003d92:	5a42      	ldrh	r2, [r0, r1]
 8003d94:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003d98:	0412      	lsls	r2, r2, #16
 8003d9a:	0c12      	lsrs	r2, r2, #16
 8003d9c:	5242      	strh	r2, [r0, r1]
 8003d9e:	5a42      	ldrh	r2, [r0, r1]
 8003da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da4:	5242      	strh	r2, [r0, r1]
 8003da6:	7861      	ldrb	r1, [r4, #1]
 8003da8:	7822      	ldrb	r2, [r4, #0]
 8003daa:	2900      	cmp	r1, #0
 8003dac:	d137      	bne.n	8003e1e <USB_EPStartXfer+0x536>
 8003dae:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003db2:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003db6:	4408      	add	r0, r1
 8003db8:	0112      	lsls	r2, r2, #4
 8003dba:	b9e3      	cbnz	r3, 8003df6 <USB_EPStartXfer+0x50e>
 8003dbc:	5a83      	ldrh	r3, [r0, r2]
 8003dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	5283      	strh	r3, [r0, r2]
 8003dc8:	5a83      	ldrh	r3, [r0, r2]
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dce:	5283      	strh	r3, [r0, r2]
 8003dd0:	e73c      	b.n	8003c4c <USB_EPStartXfer+0x364>
 8003dd2:	2b3e      	cmp	r3, #62	; 0x3e
 8003dd4:	d806      	bhi.n	8003de4 <USB_EPStartXfer+0x4fc>
 8003dd6:	085a      	lsrs	r2, r3, #1
 8003dd8:	07de      	lsls	r6, r3, #31
 8003dda:	bf48      	it	mi
 8003ddc:	3201      	addmi	r2, #1
 8003dde:	0292      	lsls	r2, r2, #10
 8003de0:	b292      	uxth	r2, r2
 8003de2:	e7df      	b.n	8003da4 <USB_EPStartXfer+0x4bc>
 8003de4:	095e      	lsrs	r6, r3, #5
 8003de6:	06df      	lsls	r7, r3, #27
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <USB_EPStartXfer+0x554>)
 8003dea:	bf08      	it	eq
 8003dec:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8003df0:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003df4:	e7f4      	b.n	8003de0 <USB_EPStartXfer+0x4f8>
 8003df6:	2b3e      	cmp	r3, #62	; 0x3e
 8003df8:	d807      	bhi.n	8003e0a <USB_EPStartXfer+0x522>
 8003dfa:	0859      	lsrs	r1, r3, #1
 8003dfc:	07de      	lsls	r6, r3, #31
 8003dfe:	bf48      	it	mi
 8003e00:	3101      	addmi	r1, #1
 8003e02:	0289      	lsls	r1, r1, #10
 8003e04:	b289      	uxth	r1, r1
 8003e06:	5281      	strh	r1, [r0, r2]
 8003e08:	e720      	b.n	8003c4c <USB_EPStartXfer+0x364>
 8003e0a:	0959      	lsrs	r1, r3, #5
 8003e0c:	06db      	lsls	r3, r3, #27
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <USB_EPStartXfer+0x554>)
 8003e10:	bf08      	it	eq
 8003e12:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8003e16:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	e7d7      	b.n	8003dce <USB_EPStartXfer+0x4e6>
 8003e1e:	2901      	cmp	r1, #1
 8003e20:	f47f af14 	bne.w	8003c4c <USB_EPStartXfer+0x364>
 8003e24:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003e28:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003e2c:	4401      	add	r1, r0
 8003e2e:	0112      	lsls	r2, r2, #4
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	528b      	strh	r3, [r1, r2]
 8003e34:	e70a      	b.n	8003c4c <USB_EPStartXfer+0x364>
        return HAL_ERROR;
 8003e36:	2001      	movs	r0, #1
 8003e38:	e582      	b.n	8003940 <USB_EPStartXfer+0x58>
 8003e3a:	bf00      	nop
 8003e3c:	ffff8000 	.word	0xffff8000

08003e40 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e40:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8003e44:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003e4a:	085d      	lsrs	r5, r3, #1
 8003e4c:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e4e:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8003e50:	462e      	mov	r6, r5
 8003e52:	3002      	adds	r0, #2
 8003e54:	b936      	cbnz	r6, 8003e64 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003e56:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003e58:	bf44      	itt	mi
 8003e5a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e5e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003e64:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8003e68:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8003e6a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e6c:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003e70:	0a24      	lsrs	r4, r4, #8
 8003e72:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003e76:	e7ec      	b.n	8003e52 <USB_ReadPMA+0x12>

08003e78 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e78:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003e7c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e7e:	b16b      	cbz	r3, 8003e9c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e80:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e84:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003e88:	28ff      	cmp	r0, #255	; 0xff
 8003e8a:	d007      	beq.n	8003e9c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003e92:	4621      	mov	r1, r4
 8003e94:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003e96:	23ff      	movs	r3, #255	; 0xff
 8003e98:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	bd10      	pop	{r4, pc}

08003ea0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003ea0:	2343      	movs	r3, #67	; 0x43
 8003ea2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003ea4:	4800      	ldr	r0, [pc, #0]	; (8003ea8 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003ea6:	4770      	bx	lr
 8003ea8:	20000044 	.word	0x20000044

08003eac <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003eac:	2343      	movs	r3, #67	; 0x43
 8003eae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003eb0:	4800      	ldr	r0, [pc, #0]	; (8003eb4 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003eb2:	4770      	bx	lr
 8003eb4:	20000088 	.word	0x20000088

08003eb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003eb8:	2343      	movs	r3, #67	; 0x43
 8003eba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003ebc:	4800      	ldr	r0, [pc, #0]	; (8003ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003ebe:	4770      	bx	lr
 8003ec0:	200000d8 	.word	0x200000d8

08003ec4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003ec8:	4800      	ldr	r0, [pc, #0]	; (8003ecc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003eca:	4770      	bx	lr
 8003ecc:	200000cc 	.word	0x200000cc

08003ed0 <USBD_CDC_DataOut>:
{
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ed4:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003ed8:	f000 feea 	bl	8004cb0 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003edc:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003ee0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003ee4:	b14b      	cbz	r3, 8003efa <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003ee6:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8003eea:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003ef4:	4798      	blx	r3
    return USBD_OK;
 8003ef6:	2000      	movs	r0, #0
}
 8003ef8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003efa:	2002      	movs	r0, #2
 8003efc:	e7fc      	b.n	8003ef8 <USBD_CDC_DataOut+0x28>

08003efe <USBD_CDC_DataIn>:
{
 8003efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003f00:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003f04:	b1d6      	cbz	r6, 8003f3c <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003f06:	2314      	movs	r3, #20
 8003f08:	fb03 0301 	mla	r3, r3, r1, r0
 8003f0c:	69dd      	ldr	r5, [r3, #28]
 8003f0e:	b18d      	cbz	r5, 8003f34 <USBD_CDC_DataIn+0x36>
 8003f10:	2728      	movs	r7, #40	; 0x28
 8003f12:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003f16:	fb07 4201 	mla	r2, r7, r1, r4
 8003f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f1c:	fbb5 f4f2 	udiv	r4, r5, r2
 8003f20:	fb02 5414 	mls	r4, r2, r4, r5
 8003f24:	b934      	cbnz	r4, 8003f34 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8003f26:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003f28:	4622      	mov	r2, r4
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	f000 fea4 	bl	8004c78 <USBD_LL_Transmit>
    return USBD_OK;
 8003f30:	4620      	mov	r0, r4
}
 8003f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003f34:	2000      	movs	r0, #0
 8003f36:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003f3a:	e7fa      	b.n	8003f32 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	e7f8      	b.n	8003f32 <USBD_CDC_DataIn+0x34>

08003f40 <USBD_CDC_Setup>:
{
 8003f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8003f44:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f48:	780a      	ldrb	r2, [r1, #0]
{
 8003f4a:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f4c:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003f50:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f52:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003f56:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003f5a:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f5e:	d028      	beq.n	8003fb2 <USBD_CDC_Setup+0x72>
 8003f60:	2c20      	cmp	r4, #32
 8003f62:	d145      	bne.n	8003ff0 <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8003f64:	88cc      	ldrh	r4, [r1, #6]
 8003f66:	784b      	ldrb	r3, [r1, #1]
 8003f68:	b1e4      	cbz	r4, 8003fa4 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003f6a:	0612      	lsls	r2, r2, #24
 8003f6c:	d511      	bpl.n	8003f92 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f6e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003f72:	4639      	mov	r1, r7
 8003f74:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f7e:	88f2      	ldrh	r2, [r6, #6]
 8003f80:	4639      	mov	r1, r7
 8003f82:	4628      	mov	r0, r5
 8003f84:	f000 fc45 	bl	8004812 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003f88:	4644      	mov	r4, r8
}
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	b003      	add	sp, #12
 8003f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003f92:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003f96:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	f000 fc4d 	bl	800483c <USBD_CtlPrepareRx>
 8003fa2:	e7f1      	b.n	8003f88 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003fa4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003fa8:	4618      	mov	r0, r3
 8003faa:	6895      	ldr	r5, [r2, #8]
 8003fac:	4622      	mov	r2, r4
 8003fae:	47a8      	blx	r5
 8003fb0:	e7eb      	b.n	8003f8a <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8003fb2:	784f      	ldrb	r7, [r1, #1]
 8003fb4:	2f0a      	cmp	r7, #10
 8003fb6:	d00d      	beq.n	8003fd4 <USBD_CDC_Setup+0x94>
 8003fb8:	2f0b      	cmp	r7, #11
 8003fba:	d015      	beq.n	8003fe8 <USBD_CDC_Setup+0xa8>
 8003fbc:	b9c7      	cbnz	r7, 8003ff0 <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fbe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d114      	bne.n	8003ff0 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f10d 0106 	add.w	r1, sp, #6
 8003fcc:	f000 fc21 	bl	8004812 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003fd0:	463c      	mov	r4, r7
 8003fd2:	e7da      	b.n	8003f8a <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fd4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d109      	bne.n	8003ff0 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f10d 0105 	add.w	r1, sp, #5
 8003fe2:	f000 fc16 	bl	8004812 <USBD_CtlSendData>
 8003fe6:	e7d0      	b.n	8003f8a <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003fe8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d0cc      	beq.n	8003f8a <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8003ff0:	4631      	mov	r1, r6
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f000 fbe6 	bl	80047c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8003ff8:	2402      	movs	r4, #2
          break;
 8003ffa:	e7c6      	b.n	8003f8a <USBD_CDC_Setup+0x4a>

08003ffc <USBD_CDC_DeInit>:
{
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004000:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004002:	2181      	movs	r1, #129	; 0x81
 8004004:	f000 fdee 	bl	8004be4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004008:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800400a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800400c:	4620      	mov	r0, r4
 800400e:	f000 fde9 	bl	8004be4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004012:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004016:	2182      	movs	r1, #130	; 0x82
 8004018:	4620      	mov	r0, r4
 800401a:	f000 fde3 	bl	8004be4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800401e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004022:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8004024:	b14b      	cbz	r3, 800403a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004026:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800402e:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8004032:	f000 fe45 	bl	8004cc0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004036:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800403a:	2000      	movs	r0, #0
 800403c:	bd38      	pop	{r3, r4, r5, pc}

0800403e <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800403e:	7c03      	ldrb	r3, [r0, #16]
{
 8004040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004044:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004046:	bbcb      	cbnz	r3, 80040bc <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800404c:	2202      	movs	r2, #2
 800404e:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004050:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004052:	f000 fdb7 	bl	8004bc4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004056:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800405a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800405c:	4629      	mov	r1, r5
 800405e:	2202      	movs	r2, #2
 8004060:	4620      	mov	r0, r4
 8004062:	f000 fdaf 	bl	8004bc4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004066:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800406a:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800406c:	2308      	movs	r3, #8
 800406e:	2203      	movs	r2, #3
 8004070:	2182      	movs	r1, #130	; 0x82
 8004072:	4620      	mov	r0, r4
 8004074:	f000 fda6 	bl	8004bc4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004078:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800407a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800407e:	f000 fe1b 	bl	8004cb8 <USBD_static_malloc>
 8004082:	4606      	mov	r6, r0
 8004084:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8004088:	b350      	cbz	r0, 80040e0 <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 800408a:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800408c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004094:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8004098:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 800409c:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040a0:	f1b8 0f00 	cmp.w	r8, #0
 80040a4:	d113      	bne.n	80040ce <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80040a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040aa:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80040ae:	4629      	mov	r1, r5
 80040b0:	4620      	mov	r0, r4
 80040b2:	f000 fdef 	bl	8004c94 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80040b6:	4640      	mov	r0, r8
}
 80040b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040bc:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040be:	2340      	movs	r3, #64	; 0x40
 80040c0:	2202      	movs	r2, #2
 80040c2:	2181      	movs	r1, #129	; 0x81
 80040c4:	f000 fd7e 	bl	8004bc4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040c8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040ca:	2340      	movs	r3, #64	; 0x40
 80040cc:	e7c6      	b.n	800405c <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80040ce:	2340      	movs	r3, #64	; 0x40
 80040d0:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80040d4:	4629      	mov	r1, r5
 80040d6:	4620      	mov	r0, r4
 80040d8:	f000 fddc 	bl	8004c94 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80040dc:	4638      	mov	r0, r7
 80040de:	e7eb      	b.n	80040b8 <USBD_CDC_Init+0x7a>
    ret = 1U;
 80040e0:	4628      	mov	r0, r5
 80040e2:	e7e9      	b.n	80040b8 <USBD_CDC_Init+0x7a>

080040e4 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80040e4:	b119      	cbz	r1, 80040ee <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80040e6:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80040ea:	2000      	movs	r0, #0
 80040ec:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80040ee:	2002      	movs	r0, #2
  }

  return ret;
}
 80040f0:	4770      	bx	lr

080040f2 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040f2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80040f6:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80040f8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80040fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8004100:	4770      	bx	lr

08004102 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004102:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8004106:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004108:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800410c:	4770      	bx	lr

0800410e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800410e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004112:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8004114:	b182      	cbz	r2, 8004138 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8004116:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800411a:	2301      	movs	r3, #1
 800411c:	b974      	cbnz	r4, 800413c <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800411e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004122:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004126:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004128:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800412a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800412e:	b29b      	uxth	r3, r3
 8004130:	f000 fda2 	bl	8004c78 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8004134:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004136:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004138:	2002      	movs	r0, #2
 800413a:	e7fc      	b.n	8004136 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 800413c:	4618      	mov	r0, r3
 800413e:	e7fa      	b.n	8004136 <USBD_CDC_TransmitPacket+0x28>

08004140 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004140:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004144:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004146:	b162      	cbz	r2, 8004162 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004148:	7c04      	ldrb	r4, [r0, #16]
 800414a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800414e:	b934      	cbnz	r4, 800415e <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004150:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004154:	2101      	movs	r1, #1
 8004156:	f000 fd9d 	bl	8004c94 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800415a:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800415c:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800415e:	2340      	movs	r3, #64	; 0x40
 8004160:	e7f8      	b.n	8004154 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8004162:	2002      	movs	r0, #2
 8004164:	e7fa      	b.n	800415c <USBD_CDC_ReceivePacket+0x1c>

08004166 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004166:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004168:	b180      	cbz	r0, 800418c <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800416a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800416e:	b113      	cbz	r3, 8004176 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004176:	b109      	cbz	r1, 800417c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004178:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800417c:	2301      	movs	r3, #1
  pdev->id = id;
 800417e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004180:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004184:	f000 fcce 	bl	8004b24 <USBD_LL_Init>

  return USBD_OK;
 8004188:	2000      	movs	r0, #0
}
 800418a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800418c:	2002      	movs	r0, #2
 800418e:	e7fc      	b.n	800418a <USBD_Init+0x24>

08004190 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004190:	b119      	cbz	r1, 800419a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004192:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004196:	2000      	movs	r0, #0
 8004198:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800419a:	2002      	movs	r0, #2
  }

  return status;
}
 800419c:	4770      	bx	lr

0800419e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800419e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80041a0:	f000 fd02 	bl	8004ba8 <USBD_LL_Start>

  return USBD_OK;
}
 80041a4:	2000      	movs	r0, #0
 80041a6:	bd08      	pop	{r3, pc}

080041a8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80041a8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80041aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041ae:	b90b      	cbnz	r3, 80041b4 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80041b0:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80041b2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4798      	blx	r3
 80041b8:	2800      	cmp	r0, #0
 80041ba:	d0fa      	beq.n	80041b2 <USBD_SetClassConfig+0xa>
 80041bc:	e7f8      	b.n	80041b0 <USBD_SetClassConfig+0x8>

080041be <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80041be:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80041c0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4798      	blx	r3

  return USBD_OK;
}
 80041c8:	2000      	movs	r0, #0
 80041ca:	bd08      	pop	{r3, pc}

080041cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80041cc:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80041ce:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80041d2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80041d4:	4628      	mov	r0, r5
 80041d6:	f000 fae1 	bl	800479c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80041da:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80041dc:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80041e0:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80041e4:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80041e8:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80041ec:	f001 031f 	and.w	r3, r1, #31
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d00e      	beq.n	8004212 <USBD_LL_SetupStage+0x46>
 80041f4:	d307      	bcc.n	8004206 <USBD_LL_SetupStage+0x3a>
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d010      	beq.n	800421c <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80041fa:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80041fe:	4620      	mov	r0, r4
 8004200:	f000 fcfe 	bl	8004c00 <USBD_LL_StallEP>
      break;
 8004204:	e003      	b.n	800420e <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004206:	4629      	mov	r1, r5
 8004208:	4620      	mov	r0, r4
 800420a:	f000 f8f5 	bl	80043f8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800420e:	2000      	movs	r0, #0
 8004210:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004212:	4629      	mov	r1, r5
 8004214:	4620      	mov	r0, r4
 8004216:	f000 fa13 	bl	8004640 <USBD_StdItfReq>
      break;
 800421a:	e7f8      	b.n	800420e <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 800421c:	4629      	mov	r1, r5
 800421e:	4620      	mov	r0, r4
 8004220:	f000 fa33 	bl	800468a <USBD_StdEPReq>
      break;
 8004224:	e7f3      	b.n	800420e <USBD_LL_SetupStage+0x42>

08004226 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004226:	b570      	push	{r4, r5, r6, lr}
 8004228:	4605      	mov	r5, r0
 800422a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800422c:	bb49      	cbnz	r1, 8004282 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800422e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004232:	2b03      	cmp	r3, #3
 8004234:	d11e      	bne.n	8004274 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004236:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 800423a:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 800423e:	4293      	cmp	r3, r2
 8004240:	d90b      	bls.n	800425a <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8004242:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8004244:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004246:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800424a:	bf8c      	ite	hi
 800424c:	b29a      	uxthhi	r2, r3
 800424e:	b292      	uxthls	r2, r2
 8004250:	4631      	mov	r1, r6
 8004252:	f000 fb02 	bl	800485a <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004256:	2000      	movs	r0, #0
}
 8004258:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800425a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	b123      	cbz	r3, 800426c <USBD_LL_DataOutStage+0x46>
 8004262:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004266:	2a03      	cmp	r2, #3
 8004268:	d100      	bne.n	800426c <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800426a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800426c:	4628      	mov	r0, r5
 800426e:	f000 fafc 	bl	800486a <USBD_CtlSendStatus>
 8004272:	e7f0      	b.n	8004256 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004274:	2b05      	cmp	r3, #5
 8004276:	d1ee      	bne.n	8004256 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004278:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800427c:	f000 fcc0 	bl	8004c00 <USBD_LL_StallEP>
 8004280:	e7e9      	b.n	8004256 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004282:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	b12b      	cbz	r3, 8004296 <USBD_LL_DataOutStage+0x70>
 800428a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800428e:	2a03      	cmp	r2, #3
 8004290:	d101      	bne.n	8004296 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8004292:	4798      	blx	r3
 8004294:	e7df      	b.n	8004256 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8004296:	2002      	movs	r0, #2
 8004298:	e7de      	b.n	8004258 <USBD_LL_DataOutStage+0x32>

0800429a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800429a:	b570      	push	{r4, r5, r6, lr}
 800429c:	4613      	mov	r3, r2
 800429e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80042a0:	460e      	mov	r6, r1
 80042a2:	2900      	cmp	r1, #0
 80042a4:	d147      	bne.n	8004336 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80042a6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80042aa:	2a02      	cmp	r2, #2
 80042ac:	d13c      	bne.n	8004328 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 80042ae:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 80042b2:	4295      	cmp	r5, r2
 80042b4:	d913      	bls.n	80042de <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 80042b6:	1aaa      	subs	r2, r5, r2
 80042b8:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80042ba:	4619      	mov	r1, r3
 80042bc:	b292      	uxth	r2, r2
 80042be:	f000 fab5 	bl	800482c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80042c2:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80042c4:	461a      	mov	r2, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fce3 	bl	8004c94 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80042ce:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80042d2:	2000      	movs	r0, #0
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80042d8:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80042dc:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80042de:	69c3      	ldr	r3, [r0, #28]
 80042e0:	fbb3 f5f2 	udiv	r5, r3, r2
 80042e4:	fb02 3515 	mls	r5, r2, r5, r3
 80042e8:	b965      	cbnz	r5, 8004304 <USBD_LL_DataInStage+0x6a>
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d80a      	bhi.n	8004304 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80042ee:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d206      	bcs.n	8004304 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80042f6:	462a      	mov	r2, r5
 80042f8:	f000 fa98 	bl	800482c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80042fc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004300:	462b      	mov	r3, r5
 8004302:	e7df      	b.n	80042c4 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004304:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	b12b      	cbz	r3, 8004318 <USBD_LL_DataInStage+0x7e>
 800430c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004310:	2a03      	cmp	r2, #3
 8004312:	d101      	bne.n	8004318 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8004314:	4620      	mov	r0, r4
 8004316:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	4620      	mov	r0, r4
 800431c:	f000 fc70 	bl	8004c00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004320:	4620      	mov	r0, r4
 8004322:	f000 faad 	bl	8004880 <USBD_CtlReceiveStatus>
 8004326:	e7d2      	b.n	80042ce <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004328:	f032 0304 	bics.w	r3, r2, #4
 800432c:	d1cf      	bne.n	80042ce <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800432e:	2180      	movs	r1, #128	; 0x80
 8004330:	f000 fc66 	bl	8004c00 <USBD_LL_StallEP>
 8004334:	e7cb      	b.n	80042ce <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8004336:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	b133      	cbz	r3, 800434c <USBD_LL_DataInStage+0xb2>
 800433e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004342:	2a03      	cmp	r2, #3
 8004344:	d102      	bne.n	800434c <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8004346:	4798      	blx	r3
  return USBD_OK;
 8004348:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800434a:	e7c7      	b.n	80042dc <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 800434c:	2002      	movs	r0, #2
 800434e:	e7c5      	b.n	80042dc <USBD_LL_DataInStage+0x42>

08004350 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004350:	2200      	movs	r2, #0
{
 8004352:	b570      	push	{r4, r5, r6, lr}
 8004354:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004356:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004358:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800435a:	4611      	mov	r1, r2
 800435c:	2340      	movs	r3, #64	; 0x40
 800435e:	f000 fc31 	bl	8004bc4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004362:	4633      	mov	r3, r6
 8004364:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004366:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800436a:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800436e:	2200      	movs	r2, #0
 8004370:	4620      	mov	r0, r4
 8004372:	f000 fc27 	bl	8004bc4 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8004376:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004378:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800437c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800437e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004380:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004384:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004388:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800438a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800438e:	b123      	cbz	r3, 800439a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004390:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004394:	4620      	mov	r0, r4
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4798      	blx	r3
  }

  return USBD_OK;
}
 800439a:	2000      	movs	r0, #0
 800439c:	bd70      	pop	{r4, r5, r6, pc}

0800439e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800439e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80043a0:	2000      	movs	r0, #0
 80043a2:	4770      	bx	lr

080043a4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80043a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043a8:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80043ac:	2304      	movs	r3, #4
 80043ae:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80043b2:	2000      	movs	r0, #0
 80043b4:	4770      	bx	lr

080043b6 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80043b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043ba:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80043bc:	bf04      	itt	eq
 80043be:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80043c2:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80043c6:	2000      	movs	r0, #0
 80043c8:	4770      	bx	lr

080043ca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80043ca:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043cc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80043d0:	2a03      	cmp	r2, #3
 80043d2:	d104      	bne.n	80043de <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80043d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	b103      	cbz	r3, 80043de <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80043dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80043de:	2000      	movs	r0, #0
 80043e0:	bd08      	pop	{r3, pc}

080043e2 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80043e2:	b510      	push	{r4, lr}
 80043e4:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	f000 fc0a 	bl	8004c00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80043ec:	4620      	mov	r0, r4
}
 80043ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80043f2:	2100      	movs	r1, #0
 80043f4:	f000 bc04 	b.w	8004c00 <USBD_LL_StallEP>

080043f8 <USBD_StdDevReq>:
{
 80043f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043fa:	780b      	ldrb	r3, [r1, #0]
{
 80043fc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004402:	2b20      	cmp	r3, #32
{
 8004404:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004406:	d012      	beq.n	800442e <USBD_StdDevReq+0x36>
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	d010      	beq.n	800442e <USBD_StdDevReq+0x36>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d15b      	bne.n	80044c8 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8004410:	784b      	ldrb	r3, [r1, #1]
 8004412:	2b09      	cmp	r3, #9
 8004414:	d858      	bhi.n	80044c8 <USBD_StdDevReq+0xd0>
 8004416:	e8df f013 	tbh	[pc, r3, lsl #1]
 800441a:	00e9      	.short	0x00e9
 800441c:	00570105 	.word	0x00570105
 8004420:	005700fe 	.word	0x005700fe
 8004424:	00130084 	.word	0x00130084
 8004428:	00d20057 	.word	0x00d20057
 800442c:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 800442e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004432:	4629      	mov	r1, r5
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	4620      	mov	r0, r4
 8004438:	4798      	blx	r3
}
 800443a:	2000      	movs	r0, #0
 800443c:	b003      	add	sp, #12
 800443e:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004446:	884b      	ldrh	r3, [r1, #2]
 8004448:	0a1a      	lsrs	r2, r3, #8
 800444a:	3a01      	subs	r2, #1
 800444c:	2a06      	cmp	r2, #6
 800444e:	d83b      	bhi.n	80044c8 <USBD_StdDevReq+0xd0>
 8004450:	e8df f002 	tbb	[pc, r2]
 8004454:	3a2d2004 	.word	0x3a2d2004
 8004458:	523a      	.short	0x523a
 800445a:	5c          	.byte	0x5c
 800445b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800445c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004460:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004462:	f10d 0106 	add.w	r1, sp, #6
 8004466:	7c20      	ldrb	r0, [r4, #16]
 8004468:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800446a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800446e:	b152      	cbz	r2, 8004486 <USBD_StdDevReq+0x8e>
 8004470:	88eb      	ldrh	r3, [r5, #6]
 8004472:	b143      	cbz	r3, 8004486 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8004474:	429a      	cmp	r2, r3
 8004476:	bf28      	it	cs
 8004478:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800447a:	4601      	mov	r1, r0
 800447c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800447e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004482:	f000 f9c6 	bl	8004812 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004486:	88eb      	ldrh	r3, [r5, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1d6      	bne.n	800443a <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 800448c:	4620      	mov	r0, r4
 800448e:	f000 f9ec 	bl	800486a <USBD_CtlSendStatus>
 8004492:	e7d2      	b.n	800443a <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004494:	7c02      	ldrb	r2, [r0, #16]
 8004496:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800449a:	b932      	cbnz	r2, 80044aa <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800449e:	f10d 0006 	add.w	r0, sp, #6
 80044a2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80044a4:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80044a6:	7043      	strb	r3, [r0, #1]
 80044a8:	e7df      	b.n	800446a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	e7f7      	b.n	800449e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d809      	bhi.n	80044c8 <USBD_StdDevReq+0xd0>
 80044b4:	e8df f003 	tbb	[pc, r3]
 80044b8:	14100c03 	.word	0x14100c03
 80044bc:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80044be:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044c2:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1cc      	bne.n	8004462 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80044c8:	4620      	mov	r0, r4
 80044ca:	f7ff ff8a 	bl	80043e2 <USBD_CtlError.constprop.1>
 80044ce:	e7b4      	b.n	800443a <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80044d0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	e7f5      	b.n	80044c4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80044d8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	e7f1      	b.n	80044c4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80044e0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	e7ed      	b.n	80044c4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80044e8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	e7e9      	b.n	80044c4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80044f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	e7e5      	b.n	80044c4 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044f8:	7c03      	ldrb	r3, [r0, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e4      	bne.n	80044c8 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80044fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004502:	f10d 0006 	add.w	r0, sp, #6
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	4798      	blx	r3
 800450a:	e7ae      	b.n	800446a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800450c:	7c03      	ldrb	r3, [r0, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1da      	bne.n	80044c8 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004512:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004516:	f10d 0006 	add.w	r0, sp, #6
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800451e:	2307      	movs	r3, #7
 8004520:	e7c1      	b.n	80044a6 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004522:	888b      	ldrh	r3, [r1, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1cf      	bne.n	80044c8 <USBD_StdDevReq+0xd0>
 8004528:	88cb      	ldrh	r3, [r1, #6]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1cc      	bne.n	80044c8 <USBD_StdDevReq+0xd0>
 800452e:	884d      	ldrh	r5, [r1, #2]
 8004530:	2d7f      	cmp	r5, #127	; 0x7f
 8004532:	d8c9      	bhi.n	80044c8 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004534:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004538:	2b03      	cmp	r3, #3
 800453a:	d0c5      	beq.n	80044c8 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800453c:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800453e:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004542:	f000 fb8b 	bl	8004c5c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004546:	4620      	mov	r0, r4
 8004548:	f000 f98f 	bl	800486a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800454c:	b11d      	cbz	r5, 8004556 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800454e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004550:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004554:	e771      	b.n	800443a <USBD_StdDevReq+0x42>
 8004556:	2301      	movs	r3, #1
 8004558:	e7fa      	b.n	8004550 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 800455a:	7889      	ldrb	r1, [r1, #2]
 800455c:	4d37      	ldr	r5, [pc, #220]	; (800463c <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800455e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004560:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004562:	d8b1      	bhi.n	80044c8 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8004564:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004568:	2b02      	cmp	r3, #2
 800456a:	d008      	beq.n	800457e <USBD_StdDevReq+0x186>
 800456c:	2b03      	cmp	r3, #3
 800456e:	d014      	beq.n	800459a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8004570:	f7ff ff37 	bl	80043e2 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004574:	7829      	ldrb	r1, [r5, #0]
 8004576:	4620      	mov	r0, r4
 8004578:	f7ff fe21 	bl	80041be <USBD_ClrClassConfig>
 800457c:	e75d      	b.n	800443a <USBD_StdDevReq+0x42>
        if (cfgidx)
 800457e:	2900      	cmp	r1, #0
 8004580:	d084      	beq.n	800448c <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8004582:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004584:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8004586:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004588:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800458c:	4620      	mov	r0, r4
 800458e:	f7ff fe0b 	bl	80041a8 <USBD_SetClassConfig>
 8004592:	2802      	cmp	r0, #2
 8004594:	f47f af7a 	bne.w	800448c <USBD_StdDevReq+0x94>
 8004598:	e796      	b.n	80044c8 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800459a:	b931      	cbnz	r1, 80045aa <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800459c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800459e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80045a0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80045a4:	f7ff fe0b 	bl	80041be <USBD_ClrClassConfig>
 80045a8:	e770      	b.n	800448c <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 80045aa:	6841      	ldr	r1, [r0, #4]
 80045ac:	2901      	cmp	r1, #1
 80045ae:	f43f af6d 	beq.w	800448c <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80045b2:	b2c9      	uxtb	r1, r1
 80045b4:	f7ff fe03 	bl	80041be <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80045b8:	7829      	ldrb	r1, [r5, #0]
 80045ba:	6061      	str	r1, [r4, #4]
 80045bc:	e7e6      	b.n	800458c <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 80045be:	88ca      	ldrh	r2, [r1, #6]
 80045c0:	2a01      	cmp	r2, #1
 80045c2:	d181      	bne.n	80044c8 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80045c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f43f af7d 	beq.w	80044c8 <USBD_StdDevReq+0xd0>
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d904      	bls.n	80045dc <USBD_StdDevReq+0x1e4>
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	f47f af78 	bne.w	80044c8 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80045d8:	1d01      	adds	r1, r0, #4
 80045da:	e003      	b.n	80045e4 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 80045dc:	4601      	mov	r1, r0
 80045de:	2300      	movs	r3, #0
 80045e0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80045e4:	4620      	mov	r0, r4
 80045e6:	f000 f914 	bl	8004812 <USBD_CtlSendData>
 80045ea:	e726      	b.n	800443a <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 80045ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045f0:	3b01      	subs	r3, #1
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	f63f af68 	bhi.w	80044c8 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 80045f8:	88cb      	ldrh	r3, [r1, #6]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	f47f af64 	bne.w	80044c8 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004600:	2301      	movs	r3, #1
 8004602:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8004604:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004608:	b10b      	cbz	r3, 800460e <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800460a:	2303      	movs	r3, #3
 800460c:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800460e:	2202      	movs	r2, #2
 8004610:	f104 010c 	add.w	r1, r4, #12
 8004614:	e7e6      	b.n	80045e4 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004616:	884b      	ldrh	r3, [r1, #2]
 8004618:	2b01      	cmp	r3, #1
 800461a:	f47f af0e 	bne.w	800443a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800461e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8004622:	e733      	b.n	800448c <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8004624:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004628:	3b01      	subs	r3, #1
 800462a:	2b02      	cmp	r3, #2
 800462c:	f63f af4c 	bhi.w	80044c8 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004630:	884b      	ldrh	r3, [r1, #2]
 8004632:	2b01      	cmp	r3, #1
 8004634:	f47f af01 	bne.w	800443a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	e7f0      	b.n	800461e <USBD_StdDevReq+0x226>
 800463c:	20000438 	.word	0x20000438

08004640 <USBD_StdItfReq>:
{
 8004640:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004642:	780b      	ldrb	r3, [r1, #0]
{
 8004644:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800464a:	2b20      	cmp	r3, #32
{
 800464c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800464e:	d002      	beq.n	8004656 <USBD_StdItfReq+0x16>
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	d000      	beq.n	8004656 <USBD_StdItfReq+0x16>
 8004654:	b9ab      	cbnz	r3, 8004682 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8004656:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800465a:	3b01      	subs	r3, #1
 800465c:	2b02      	cmp	r3, #2
 800465e:	d810      	bhi.n	8004682 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004660:	792b      	ldrb	r3, [r5, #4]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d80d      	bhi.n	8004682 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004666:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800466a:	4629      	mov	r1, r5
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	4620      	mov	r0, r4
 8004670:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004672:	88eb      	ldrh	r3, [r5, #6]
 8004674:	b91b      	cbnz	r3, 800467e <USBD_StdItfReq+0x3e>
 8004676:	b910      	cbnz	r0, 800467e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004678:	4620      	mov	r0, r4
 800467a:	f000 f8f6 	bl	800486a <USBD_CtlSendStatus>
}
 800467e:	2000      	movs	r0, #0
 8004680:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8004682:	4620      	mov	r0, r4
 8004684:	f7ff fead 	bl	80043e2 <USBD_CtlError.constprop.1>
          break;
 8004688:	e7f9      	b.n	800467e <USBD_StdItfReq+0x3e>

0800468a <USBD_StdEPReq>:
{
 800468a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800468c:	780a      	ldrb	r2, [r1, #0]
{
 800468e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004690:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004694:	2a20      	cmp	r2, #32
{
 8004696:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004698:	d014      	beq.n	80046c4 <USBD_StdEPReq+0x3a>
 800469a:	2a40      	cmp	r2, #64	; 0x40
 800469c:	d012      	beq.n	80046c4 <USBD_StdEPReq+0x3a>
 800469e:	b96a      	cbnz	r2, 80046bc <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 80046a0:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80046a2:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 80046a4:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 80046a6:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 80046a8:	d020      	beq.n	80046ec <USBD_StdEPReq+0x62>
 80046aa:	d336      	bcc.n	800471a <USBD_StdEPReq+0x90>
 80046ac:	2a03      	cmp	r2, #3
 80046ae:	d105      	bne.n	80046bc <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80046b0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80046b4:	2a02      	cmp	r2, #2
 80046b6:	d027      	beq.n	8004708 <USBD_StdEPReq+0x7e>
 80046b8:	2a03      	cmp	r2, #3
 80046ba:	d00b      	beq.n	80046d4 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 80046bc:	4620      	mov	r0, r4
 80046be:	f7ff fe90 	bl	80043e2 <USBD_CtlError.constprop.1>
              break;
 80046c2:	e005      	b.n	80046d0 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 80046c4:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80046c8:	4619      	mov	r1, r3
 80046ca:	6892      	ldr	r2, [r2, #8]
 80046cc:	4620      	mov	r0, r4
 80046ce:	4790      	blx	r2
}
 80046d0:	2000      	movs	r0, #0
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80046d4:	885a      	ldrh	r2, [r3, #2]
 80046d6:	b92a      	cbnz	r2, 80046e4 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 80046d8:	064a      	lsls	r2, r1, #25
 80046da:	d003      	beq.n	80046e4 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80046dc:	88db      	ldrh	r3, [r3, #6]
 80046de:	b90b      	cbnz	r3, 80046e4 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 80046e0:	f000 fa8e 	bl	8004c00 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80046e4:	4620      	mov	r0, r4
 80046e6:	f000 f8c0 	bl	800486a <USBD_CtlSendStatus>
              break;
 80046ea:	e7f1      	b.n	80046d0 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80046ec:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80046f0:	2a02      	cmp	r2, #2
 80046f2:	d009      	beq.n	8004708 <USBD_StdEPReq+0x7e>
 80046f4:	2a03      	cmp	r2, #3
 80046f6:	d1e1      	bne.n	80046bc <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80046f8:	885b      	ldrh	r3, [r3, #2]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e8      	bne.n	80046d0 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 80046fe:	064d      	lsls	r5, r1, #25
 8004700:	d0f0      	beq.n	80046e4 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004702:	f000 fa8b 	bl	8004c1c <USBD_LL_ClearStallEP>
 8004706:	e7ed      	b.n	80046e4 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004708:	064b      	lsls	r3, r1, #25
 800470a:	d0d7      	beq.n	80046bc <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 800470c:	f000 fa78 	bl	8004c00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004710:	2180      	movs	r1, #128	; 0x80
 8004712:	4620      	mov	r0, r4
 8004714:	f000 fa74 	bl	8004c00 <USBD_LL_StallEP>
 8004718:	e7da      	b.n	80046d0 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 800471a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800471e:	2b02      	cmp	r3, #2
 8004720:	d018      	beq.n	8004754 <USBD_StdEPReq+0xca>
 8004722:	2b03      	cmp	r3, #3
 8004724:	d1ca      	bne.n	80046bc <USBD_StdEPReq+0x32>
 8004726:	2314      	movs	r3, #20
 8004728:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800472c:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004730:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8004734:	d01f      	beq.n	8004776 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004736:	6992      	ldr	r2, [r2, #24]
 8004738:	2a00      	cmp	r2, #0
 800473a:	d0bf      	beq.n	80046bc <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800473c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004740:	fb05 3503 	mla	r5, r5, r3, r3
 8004744:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004746:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800474a:	d11f      	bne.n	800478c <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 800474c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800474e:	2202      	movs	r2, #2
 8004750:	4629      	mov	r1, r5
 8004752:	e00c      	b.n	800476e <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004754:	064a      	lsls	r2, r1, #25
 8004756:	d1b1      	bne.n	80046bc <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004758:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 800475a:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800475e:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004762:	bf4c      	ite	mi
 8004764:	f100 0114 	addmi.w	r1, r0, #20
 8004768:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800476c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800476e:	4620      	mov	r0, r4
 8004770:	f000 f84f 	bl	8004812 <USBD_CtlSendData>
              break;
 8004774:	e7ac      	b.n	80046d0 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004776:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 800477a:	2a00      	cmp	r2, #0
 800477c:	d09e      	beq.n	80046bc <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800477e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004782:	fb03 0505 	mla	r5, r3, r5, r0
 8004786:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800478a:	e7dc      	b.n	8004746 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800478c:	4620      	mov	r0, r4
 800478e:	f000 fa53 	bl	8004c38 <USBD_LL_IsStallEP>
 8004792:	b108      	cbz	r0, 8004798 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8004794:	2301      	movs	r3, #1
 8004796:	e7d9      	b.n	800474c <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8004798:	6028      	str	r0, [r5, #0]
 800479a:	e7d8      	b.n	800474e <USBD_StdEPReq+0xc4>

0800479c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800479c:	780b      	ldrb	r3, [r1, #0]
 800479e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80047a0:	784b      	ldrb	r3, [r1, #1]
 80047a2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80047a4:	78ca      	ldrb	r2, [r1, #3]
 80047a6:	788b      	ldrb	r3, [r1, #2]
 80047a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80047ac:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80047ae:	794a      	ldrb	r2, [r1, #5]
 80047b0:	790b      	ldrb	r3, [r1, #4]
 80047b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80047b6:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80047b8:	79ca      	ldrb	r2, [r1, #7]
 80047ba:	798b      	ldrb	r3, [r1, #6]
 80047bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80047c0:	80c3      	strh	r3, [r0, #6]
}
 80047c2:	4770      	bx	lr

080047c4 <USBD_CtlError>:
{
 80047c4:	b510      	push	{r4, lr}
 80047c6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80047c8:	2180      	movs	r1, #128	; 0x80
 80047ca:	f000 fa19 	bl	8004c00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80047ce:	4620      	mov	r0, r4
}
 80047d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80047d4:	2100      	movs	r1, #0
 80047d6:	f000 ba13 	b.w	8004c00 <USBD_LL_StallEP>

080047da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80047da:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80047dc:	b188      	cbz	r0, 8004802 <USBD_GetString+0x28>
 80047de:	4605      	mov	r5, r0
 80047e0:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80047e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2c00      	cmp	r4, #0
 80047ea:	d1f9      	bne.n	80047e0 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80047ec:	3301      	adds	r3, #1
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80047f2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80047f4:	2303      	movs	r3, #3
 80047f6:	704b      	strb	r3, [r1, #1]
 80047f8:	2302      	movs	r3, #2
 80047fa:	3801      	subs	r0, #1
    while (*desc != '\0')
 80047fc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004800:	b905      	cbnz	r5, 8004804 <USBD_GetString+0x2a>
}
 8004802:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	54cd      	strb	r5, [r1, r3]
 8004808:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800480a:	3302      	adds	r3, #2
 800480c:	b2db      	uxtb	r3, r3
 800480e:	548c      	strb	r4, [r1, r2]
 8004810:	e7f4      	b.n	80047fc <USBD_GetString+0x22>

08004812 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004812:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004814:	2202      	movs	r2, #2
{
 8004816:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004818:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800481c:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004820:	460a      	mov	r2, r1
 8004822:	2100      	movs	r1, #0
 8004824:	f000 fa28 	bl	8004c78 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004828:	2000      	movs	r0, #0
 800482a:	bd10      	pop	{r4, pc}

0800482c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800482c:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800482e:	4613      	mov	r3, r2
 8004830:	460a      	mov	r2, r1
 8004832:	2100      	movs	r1, #0
 8004834:	f000 fa20 	bl	8004c78 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004838:	2000      	movs	r0, #0
 800483a:	bd08      	pop	{r3, pc}

0800483c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800483c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800483e:	2203      	movs	r2, #3
{
 8004840:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004842:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004846:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800484a:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800484c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004850:	2100      	movs	r1, #0
 8004852:	f000 fa1f 	bl	8004c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004856:	2000      	movs	r0, #0
 8004858:	bd10      	pop	{r4, pc}

0800485a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800485a:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800485c:	4613      	mov	r3, r2
 800485e:	460a      	mov	r2, r1
 8004860:	2100      	movs	r1, #0
 8004862:	f000 fa17 	bl	8004c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004866:	2000      	movs	r0, #0
 8004868:	bd08      	pop	{r3, pc}

0800486a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800486a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800486c:	2304      	movs	r3, #4
 800486e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004872:	2300      	movs	r3, #0
 8004874:	461a      	mov	r2, r3
 8004876:	4619      	mov	r1, r3
 8004878:	f000 f9fe 	bl	8004c78 <USBD_LL_Transmit>

  return USBD_OK;
}
 800487c:	2000      	movs	r0, #0
 800487e:	bd08      	pop	{r3, pc}

08004880 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004880:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004882:	2305      	movs	r3, #5
 8004884:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004888:	2300      	movs	r3, #0
 800488a:	461a      	mov	r2, r3
 800488c:	4619      	mov	r1, r3
 800488e:	f000 fa01 	bl	8004c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004892:	2000      	movs	r0, #0
 8004894:	bd08      	pop	{r3, pc}
	...

08004898 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004898:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800489a:	2200      	movs	r2, #0
 800489c:	490e      	ldr	r1, [pc, #56]	; (80048d8 <MX_USB_DEVICE_Init+0x40>)
 800489e:	480f      	ldr	r0, [pc, #60]	; (80048dc <MX_USB_DEVICE_Init+0x44>)
 80048a0:	f7ff fc61 	bl	8004166 <USBD_Init>
 80048a4:	b108      	cbz	r0, 80048aa <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80048a6:	f7fc fe65 	bl	8001574 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80048aa:	490d      	ldr	r1, [pc, #52]	; (80048e0 <MX_USB_DEVICE_Init+0x48>)
 80048ac:	480b      	ldr	r0, [pc, #44]	; (80048dc <MX_USB_DEVICE_Init+0x44>)
 80048ae:	f7ff fc6f 	bl	8004190 <USBD_RegisterClass>
 80048b2:	b108      	cbz	r0, 80048b8 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80048b4:	f7fc fe5e 	bl	8001574 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80048b8:	490a      	ldr	r1, [pc, #40]	; (80048e4 <MX_USB_DEVICE_Init+0x4c>)
 80048ba:	4808      	ldr	r0, [pc, #32]	; (80048dc <MX_USB_DEVICE_Init+0x44>)
 80048bc:	f7ff fc12 	bl	80040e4 <USBD_CDC_RegisterInterface>
 80048c0:	b108      	cbz	r0, 80048c6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80048c2:	f7fc fe57 	bl	8001574 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80048c6:	4805      	ldr	r0, [pc, #20]	; (80048dc <MX_USB_DEVICE_Init+0x44>)
 80048c8:	f7ff fc69 	bl	800419e <USBD_Start>
 80048cc:	b118      	cbz	r0, 80048d6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80048ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80048d2:	f7fc be4f 	b.w	8001574 <Error_Handler>
}
 80048d6:	bd08      	pop	{r3, pc}
 80048d8:	2000012c 	.word	0x2000012c
 80048dc:	20000668 	.word	0x20000668
 80048e0:	2000000c 	.word	0x2000000c
 80048e4:	2000011c 	.word	0x2000011c

080048e8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS( void )
{
    /* USER CODE BEGIN 4 */
    return ( USBD_OK );
    /* USER CODE END 4 */
}
 80048e8:	2000      	movs	r0, #0
 80048ea:	4770      	bx	lr

080048ec <CDC_Control_FS>:
        break;
    }

    return ( USBD_OK );
    /* USER CODE END 5 */
}
 80048ec:	2000      	movs	r0, #0
 80048ee:	4770      	bx	lr

080048f0 <CDC_Init_FS>:
{
 80048f0:	b510      	push	{r4, lr}
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, UserTxBufferFS, 0 );
 80048f2:	4c06      	ldr	r4, [pc, #24]	; (800490c <CDC_Init_FS+0x1c>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	4906      	ldr	r1, [pc, #24]	; (8004910 <CDC_Init_FS+0x20>)
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7ff fbfa 	bl	80040f2 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, UserRxBufferFS );
 80048fe:	4905      	ldr	r1, [pc, #20]	; (8004914 <CDC_Init_FS+0x24>)
 8004900:	4620      	mov	r0, r4
 8004902:	f7ff fbfe 	bl	8004102 <USBD_CDC_SetRxBuffer>
}
 8004906:	2000      	movs	r0, #0
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	20000668 	.word	0x20000668
 8004910:	20000d14 	.word	0x20000d14
 8004914:	2000092c 	.word	0x2000092c

08004918 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS( uint8_t * Buf, uint16_t Len )
{
 8004918:	b510      	push	{r4, lr}
    uint8_t result = USBD_OK;
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS
 800491a:	4c09      	ldr	r4, [pc, #36]	; (8004940 <CDC_Transmit_FS+0x28>)
{
 800491c:	460a      	mov	r2, r1
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS
 800491e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
            .pClassData;
    if ( hcdc->TxState != 0 )
 8004922:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004926:	b943      	cbnz	r3, 800493a <CDC_Transmit_FS+0x22>
    {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer( &hUsbDeviceFS, Buf, Len );
 8004928:	4601      	mov	r1, r0
 800492a:	4620      	mov	r0, r4
 800492c:	f7ff fbe1 	bl	80040f2 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8004930:	4620      	mov	r0, r4
    /* USER CODE END 7 */
    return result;
}
 8004932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    result = USBD_CDC_TransmitPacket( &hUsbDeviceFS );
 8004936:	f7ff bbea 	b.w	800410e <USBD_CDC_TransmitPacket>
}
 800493a:	2001      	movs	r0, #1
 800493c:	bd10      	pop	{r4, pc}
 800493e:	bf00      	nop
 8004940:	20000668 	.word	0x20000668

08004944 <CDC_Receive_FS>:
{
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	4604      	mov	r4, r0
 8004948:	460e      	mov	r6, r1
    USBD_CDC_SetRxBuffer( &hUsbDeviceFS, &Buf[0] );
 800494a:	4d07      	ldr	r5, [pc, #28]	; (8004968 <CDC_Receive_FS+0x24>)
 800494c:	4601      	mov	r1, r0
 800494e:	4628      	mov	r0, r5
 8004950:	f7ff fbd7 	bl	8004102 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket( &hUsbDeviceFS );
 8004954:	4628      	mov	r0, r5
 8004956:	f7ff fbf3 	bl	8004140 <USBD_CDC_ReceivePacket>
    CDC_ReceiveCallBack( Buf, *Len );
 800495a:	4620      	mov	r0, r4
 800495c:	8831      	ldrh	r1, [r6, #0]
 800495e:	f7fc fdf7 	bl	8001550 <CDC_ReceiveCallBack>
}
 8004962:	2000      	movs	r0, #0
 8004964:	bd70      	pop	{r4, r5, r6, pc}
 8004966:	bf00      	nop
 8004968:	20000668 	.word	0x20000668

0800496c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800496c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800496e:	4801      	ldr	r0, [pc, #4]	; (8004974 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004970:	800b      	strh	r3, [r1, #0]
}
 8004972:	4770      	bx	lr
 8004974:	20000148 	.word	0x20000148

08004978 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004978:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800497a:	4801      	ldr	r0, [pc, #4]	; (8004980 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800497c:	800b      	strh	r3, [r1, #0]
}
 800497e:	4770      	bx	lr
 8004980:	2000015c 	.word	0x2000015c

08004984 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004984:	2300      	movs	r3, #0
 8004986:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004988:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 800498a:	0f05      	lsrs	r5, r0, #28
 800498c:	b2ec      	uxtb	r4, r5
 800498e:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8004990:	bf94      	ite	ls
 8004992:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004994:	3437      	addhi	r4, #55	; 0x37
 8004996:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800499a:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800499e:	3301      	adds	r3, #1
 80049a0:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 80049a2:	b2dc      	uxtb	r4, r3
 80049a4:	42a2      	cmp	r2, r4
    value = value << 4;
 80049a6:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80049aa:	d8ee      	bhi.n	800498a <IntToUnicode+0x6>
  }
}
 80049ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080049b0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80049b0:	231a      	movs	r3, #26
{
 80049b2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80049b4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <USBD_FS_SerialStrDescriptor+0x2c>)
 80049b8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80049ba:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80049bc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80049be:	18c0      	adds	r0, r0, r3
 80049c0:	d00a      	beq.n	80049d8 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80049c4:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80049c6:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80049c8:	4906      	ldr	r1, [pc, #24]	; (80049e4 <USBD_FS_SerialStrDescriptor+0x34>)
 80049ca:	f7ff ffdb 	bl	8004984 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80049ce:	2204      	movs	r2, #4
 80049d0:	4905      	ldr	r1, [pc, #20]	; (80049e8 <USBD_FS_SerialStrDescriptor+0x38>)
 80049d2:	4620      	mov	r0, r4
 80049d4:	f7ff ffd6 	bl	8004984 <IntToUnicode>
}
 80049d8:	4804      	ldr	r0, [pc, #16]	; (80049ec <USBD_FS_SerialStrDescriptor+0x3c>)
 80049da:	bd10      	pop	{r4, pc}
 80049dc:	1ffff7e8 	.word	0x1ffff7e8
 80049e0:	1ffff7ec 	.word	0x1ffff7ec
 80049e4:	20000162 	.word	0x20000162
 80049e8:	20000172 	.word	0x20000172
 80049ec:	20000160 	.word	0x20000160

080049f0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80049f0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80049f2:	4c04      	ldr	r4, [pc, #16]	; (8004a04 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80049f4:	460a      	mov	r2, r1
 80049f6:	4804      	ldr	r0, [pc, #16]	; (8004a08 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80049f8:	4621      	mov	r1, r4
 80049fa:	f7ff feee 	bl	80047da <USBD_GetString>
}
 80049fe:	4620      	mov	r0, r4
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	bf00      	nop
 8004a04:	200010fc 	.word	0x200010fc
 8004a08:	08006f71 	.word	0x08006f71

08004a0c <USBD_FS_ProductStrDescriptor>:
{
 8004a0c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004a0e:	4c04      	ldr	r4, [pc, #16]	; (8004a20 <USBD_FS_ProductStrDescriptor+0x14>)
 8004a10:	460a      	mov	r2, r1
 8004a12:	4804      	ldr	r0, [pc, #16]	; (8004a24 <USBD_FS_ProductStrDescriptor+0x18>)
 8004a14:	4621      	mov	r1, r4
 8004a16:	f7ff fee0 	bl	80047da <USBD_GetString>
}
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	bd10      	pop	{r4, pc}
 8004a1e:	bf00      	nop
 8004a20:	200010fc 	.word	0x200010fc
 8004a24:	08006f84 	.word	0x08006f84

08004a28 <USBD_FS_ConfigStrDescriptor>:
{
 8004a28:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004a2a:	4c04      	ldr	r4, [pc, #16]	; (8004a3c <USBD_FS_ConfigStrDescriptor+0x14>)
 8004a2c:	460a      	mov	r2, r1
 8004a2e:	4804      	ldr	r0, [pc, #16]	; (8004a40 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004a30:	4621      	mov	r1, r4
 8004a32:	f7ff fed2 	bl	80047da <USBD_GetString>
}
 8004a36:	4620      	mov	r0, r4
 8004a38:	bd10      	pop	{r4, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200010fc 	.word	0x200010fc
 8004a40:	08006f58 	.word	0x08006f58

08004a44 <USBD_FS_InterfaceStrDescriptor>:
{
 8004a44:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004a46:	4c04      	ldr	r4, [pc, #16]	; (8004a58 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004a48:	460a      	mov	r2, r1
 8004a4a:	4804      	ldr	r0, [pc, #16]	; (8004a5c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f7ff fec4 	bl	80047da <USBD_GetString>
}
 8004a52:	4620      	mov	r0, r4
 8004a54:	bd10      	pop	{r4, pc}
 8004a56:	bf00      	nop
 8004a58:	200010fc 	.word	0x200010fc
 8004a5c:	08006f63 	.word	0x08006f63

08004a60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004a60:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <HAL_PCD_MspInit+0x3c>)
 8004a64:	6802      	ldr	r2, [r0, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d115      	bne.n	8004a96 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004a6a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004a6e:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004a70:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8004a72:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004a76:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004a78:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004a7a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004a7c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8004a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004a86:	f7fc ff05 	bl	8001894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004a8a:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004a8c:	b003      	add	sp, #12
 8004a8e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004a92:	f7fc bf33 	b.w	80018fc <HAL_NVIC_EnableIRQ>
}
 8004a96:	b003      	add	sp, #12
 8004a98:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a9c:	40005c00 	.word	0x40005c00

08004aa0 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004aa0:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004aa4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004aa8:	f7ff bb90 	b.w	80041cc <USBD_LL_SetupStage>

08004aac <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004aac:	2328      	movs	r3, #40	; 0x28
 8004aae:	fb03 0301 	mla	r3, r3, r1, r0
 8004ab2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004ab6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004aba:	f7ff bbb4 	b.w	8004226 <USBD_LL_DataOutStage>

08004abe <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004abe:	2328      	movs	r3, #40	; 0x28
 8004ac0:	fb03 0301 	mla	r3, r3, r1, r0
 8004ac4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aca:	f7ff bbe6 	b.w	800429a <USBD_LL_DataInStage>

08004ace <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004ace:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004ad2:	f7ff bc7a 	b.w	80043ca <USBD_LL_SOF>

08004ad6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004ad6:	6883      	ldr	r3, [r0, #8]
{
 8004ad8:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004ada:	2b02      	cmp	r3, #2
{
 8004adc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004ade:	d001      	beq.n	8004ae4 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004ae0:	f7fc fd48 	bl	8001574 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004ae4:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004ae8:	2101      	movs	r1, #1
 8004aea:	f7ff fc58 	bl	800439e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004aee:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8004af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004af6:	f7ff bc2b 	b.w	8004350 <USBD_LL_Reset>
	...

08004afc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004afc:	b510      	push	{r4, lr}
 8004afe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004b00:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004b04:	f7ff fc4e 	bl	80043a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004b08:	69a3      	ldr	r3, [r4, #24]
 8004b0a:	b123      	cbz	r3, 8004b16 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004b0c:	4a02      	ldr	r2, [pc, #8]	; (8004b18 <HAL_PCD_SuspendCallback+0x1c>)
 8004b0e:	6913      	ldr	r3, [r2, #16]
 8004b10:	f043 0306 	orr.w	r3, r3, #6
 8004b14:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004b16:	bd10      	pop	{r4, pc}
 8004b18:	e000ed00 	.word	0xe000ed00

08004b1c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004b1c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004b20:	f7ff bc49 	b.w	80043b6 <USBD_LL_Resume>

08004b24 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004b24:	2308      	movs	r3, #8
{
 8004b26:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004b28:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <USBD_LL_Init+0x7c>)
{
 8004b2a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004b2c:	481d      	ldr	r0, [pc, #116]	; (8004ba4 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004b2e:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004b32:	2302      	movs	r3, #2
 8004b34:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004b36:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8004b38:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8004b3c:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004b40:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004b44:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004b46:	f7fc fff1 	bl	8001b2c <HAL_PCD_Init>
 8004b4a:	b108      	cbz	r0, 8004b50 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8004b4c:	f7fc fd12 	bl	8001574 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004b50:	2200      	movs	r2, #0
 8004b52:	2318      	movs	r3, #24
 8004b54:	4611      	mov	r1, r2
 8004b56:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b5a:	f7fd fdab 	bl	80026b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004b5e:	2358      	movs	r3, #88	; 0x58
 8004b60:	2200      	movs	r2, #0
 8004b62:	2180      	movs	r1, #128	; 0x80
 8004b64:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b68:	f7fd fda4 	bl	80026b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004b6c:	23c0      	movs	r3, #192	; 0xc0
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2181      	movs	r1, #129	; 0x81
 8004b72:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b76:	f7fd fd9d 	bl	80026b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004b7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2101      	movs	r1, #1
 8004b82:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b86:	f7fd fd95 	bl	80026b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2182      	movs	r1, #130	; 0x82
 8004b92:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b96:	f7fd fd8d 	bl	80026b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	bd10      	pop	{r4, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40005c00 	.word	0x40005c00
 8004ba4:	200012fc 	.word	0x200012fc

08004ba8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004ba8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8004baa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bae:	f7fd f835 	bl	8001c1c <HAL_PCD_Start>
 8004bb2:	2803      	cmp	r0, #3
 8004bb4:	bf96      	itet	ls
 8004bb6:	4b02      	ldrls	r3, [pc, #8]	; (8004bc0 <USBD_LL_Start+0x18>)
 8004bb8:	2002      	movhi	r0, #2
 8004bba:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004bbc:	bd08      	pop	{r3, pc}
 8004bbe:	bf00      	nop
 8004bc0:	08006f9a 	.word	0x08006f9a

08004bc4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004bc8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bcc:	4613      	mov	r3, r2
 8004bce:	4622      	mov	r2, r4
 8004bd0:	f7fd fc74 	bl	80024bc <HAL_PCD_EP_Open>
 8004bd4:	2803      	cmp	r0, #3
 8004bd6:	bf96      	itet	ls
 8004bd8:	4b01      	ldrls	r3, [pc, #4]	; (8004be0 <USBD_LL_OpenEP+0x1c>)
 8004bda:	2002      	movhi	r0, #2
 8004bdc:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004bde:	bd10      	pop	{r4, pc}
 8004be0:	08006f9a 	.word	0x08006f9a

08004be4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004be4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004be6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bea:	f7fd fc99 	bl	8002520 <HAL_PCD_EP_Close>
 8004bee:	2803      	cmp	r0, #3
 8004bf0:	bf96      	itet	ls
 8004bf2:	4b02      	ldrls	r3, [pc, #8]	; (8004bfc <USBD_LL_CloseEP+0x18>)
 8004bf4:	2002      	movhi	r0, #2
 8004bf6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004bf8:	bd08      	pop	{r3, pc}
 8004bfa:	bf00      	nop
 8004bfc:	08006f9a 	.word	0x08006f9a

08004c00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004c00:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004c02:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c06:	f7fd fcef 	bl	80025e8 <HAL_PCD_EP_SetStall>
 8004c0a:	2803      	cmp	r0, #3
 8004c0c:	bf96      	itet	ls
 8004c0e:	4b02      	ldrls	r3, [pc, #8]	; (8004c18 <USBD_LL_StallEP+0x18>)
 8004c10:	2002      	movhi	r0, #2
 8004c12:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004c14:	bd08      	pop	{r3, pc}
 8004c16:	bf00      	nop
 8004c18:	08006f9a 	.word	0x08006f9a

08004c1c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004c1c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004c1e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c22:	f7fd fd15 	bl	8002650 <HAL_PCD_EP_ClrStall>
 8004c26:	2803      	cmp	r0, #3
 8004c28:	bf96      	itet	ls
 8004c2a:	4b02      	ldrls	r3, [pc, #8]	; (8004c34 <USBD_LL_ClearStallEP+0x18>)
 8004c2c:	2002      	movhi	r0, #2
 8004c2e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004c30:	bd08      	pop	{r3, pc}
 8004c32:	bf00      	nop
 8004c34:	08006f9a 	.word	0x08006f9a

08004c38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004c38:	2228      	movs	r2, #40	; 0x28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8004c3a:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004c3e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004c42:	bf1b      	ittet	ne
 8004c44:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8004c48:	fb03 2102 	mlane	r1, r3, r2, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004c4c:	fb02 0101 	mlaeq	r1, r2, r1, r0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004c50:	1809      	addne	r1, r1, r0
 8004c52:	bf14      	ite	ne
 8004c54:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004c56:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
  }
}
 8004c5a:	4770      	bx	lr

08004c5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004c5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004c5e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c62:	f7fc fff4 	bl	8001c4e <HAL_PCD_SetAddress>
 8004c66:	2803      	cmp	r0, #3
 8004c68:	bf96      	itet	ls
 8004c6a:	4b02      	ldrls	r3, [pc, #8]	; (8004c74 <USBD_LL_SetUSBAddress+0x18>)
 8004c6c:	2002      	movhi	r0, #2
 8004c6e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004c70:	bd08      	pop	{r3, pc}
 8004c72:	bf00      	nop
 8004c74:	08006f9a 	.word	0x08006f9a

08004c78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004c78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004c7a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c7e:	f7fd fc99 	bl	80025b4 <HAL_PCD_EP_Transmit>
 8004c82:	2803      	cmp	r0, #3
 8004c84:	bf96      	itet	ls
 8004c86:	4b02      	ldrls	r3, [pc, #8]	; (8004c90 <USBD_LL_Transmit+0x18>)
 8004c88:	2002      	movhi	r0, #2
 8004c8a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004c8c:	bd08      	pop	{r3, pc}
 8004c8e:	bf00      	nop
 8004c90:	08006f9a 	.word	0x08006f9a

08004c94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004c94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004c96:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c9a:	f7fd fc6a 	bl	8002572 <HAL_PCD_EP_Receive>
 8004c9e:	2803      	cmp	r0, #3
 8004ca0:	bf96      	itet	ls
 8004ca2:	4b02      	ldrls	r3, [pc, #8]	; (8004cac <USBD_LL_PrepareReceive+0x18>)
 8004ca4:	2002      	movhi	r0, #2
 8004ca6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004ca8:	bd08      	pop	{r3, pc}
 8004caa:	bf00      	nop
 8004cac:	08006f9a 	.word	0x08006f9a

08004cb0 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004cb0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004cb4:	f7fd bc76 	b.w	80025a4 <HAL_PCD_EP_GetRxCount>

08004cb8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004cb8:	4800      	ldr	r0, [pc, #0]	; (8004cbc <USBD_static_malloc+0x4>)
 8004cba:	4770      	bx	lr
 8004cbc:	2000043c 	.word	0x2000043c

08004cc0 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8004cc2:	4770      	bx	lr

08004cc4 <_ZdlPvj>:
 8004cc4:	f000 b812 	b.w	8004cec <_ZdlPv>

08004cc8 <__cxa_guard_acquire>:
 8004cc8:	6803      	ldr	r3, [r0, #0]
 8004cca:	07db      	lsls	r3, r3, #31
 8004ccc:	d406      	bmi.n	8004cdc <__cxa_guard_acquire+0x14>
 8004cce:	7843      	ldrb	r3, [r0, #1]
 8004cd0:	b103      	cbz	r3, 8004cd4 <__cxa_guard_acquire+0xc>
 8004cd2:	deff      	udf	#255	; 0xff
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	7043      	strb	r3, [r0, #1]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	4770      	bx	lr
 8004cdc:	2000      	movs	r0, #0
 8004cde:	4770      	bx	lr

08004ce0 <__cxa_guard_release>:
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	6003      	str	r3, [r0, #0]
 8004ce4:	4770      	bx	lr

08004ce6 <__cxa_pure_virtual>:
 8004ce6:	b508      	push	{r3, lr}
 8004ce8:	f000 f80e 	bl	8004d08 <_ZSt9terminatev>

08004cec <_ZdlPv>:
 8004cec:	f000 b84a 	b.w	8004d84 <free>

08004cf0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004cf0:	b508      	push	{r3, lr}
 8004cf2:	4780      	blx	r0
 8004cf4:	f000 f80d 	bl	8004d12 <abort>

08004cf8 <_ZSt13get_terminatev>:
 8004cf8:	4b02      	ldr	r3, [pc, #8]	; (8004d04 <_ZSt13get_terminatev+0xc>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	f3bf 8f5b 	dmb	ish
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000017c 	.word	0x2000017c

08004d08 <_ZSt9terminatev>:
 8004d08:	b508      	push	{r3, lr}
 8004d0a:	f7ff fff5 	bl	8004cf8 <_ZSt13get_terminatev>
 8004d0e:	f7ff ffef 	bl	8004cf0 <_ZN10__cxxabiv111__terminateEPFvvE>

08004d12 <abort>:
 8004d12:	b508      	push	{r3, lr}
 8004d14:	2006      	movs	r0, #6
 8004d16:	f000 fd73 	bl	8005800 <raise>
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	f7fc fd00 	bl	8001720 <_exit>

08004d20 <__errno>:
 8004d20:	4b01      	ldr	r3, [pc, #4]	; (8004d28 <__errno+0x8>)
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20000180 	.word	0x20000180

08004d2c <__libc_init_array>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	2500      	movs	r5, #0
 8004d30:	4e0c      	ldr	r6, [pc, #48]	; (8004d64 <__libc_init_array+0x38>)
 8004d32:	4c0d      	ldr	r4, [pc, #52]	; (8004d68 <__libc_init_array+0x3c>)
 8004d34:	1ba4      	subs	r4, r4, r6
 8004d36:	10a4      	asrs	r4, r4, #2
 8004d38:	42a5      	cmp	r5, r4
 8004d3a:	d109      	bne.n	8004d50 <__libc_init_array+0x24>
 8004d3c:	f002 f8ac 	bl	8006e98 <_init>
 8004d40:	2500      	movs	r5, #0
 8004d42:	4e0a      	ldr	r6, [pc, #40]	; (8004d6c <__libc_init_array+0x40>)
 8004d44:	4c0a      	ldr	r4, [pc, #40]	; (8004d70 <__libc_init_array+0x44>)
 8004d46:	1ba4      	subs	r4, r4, r6
 8004d48:	10a4      	asrs	r4, r4, #2
 8004d4a:	42a5      	cmp	r5, r4
 8004d4c:	d105      	bne.n	8004d5a <__libc_init_array+0x2e>
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d54:	4798      	blx	r3
 8004d56:	3501      	adds	r5, #1
 8004d58:	e7ee      	b.n	8004d38 <__libc_init_array+0xc>
 8004d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d5e:	4798      	blx	r3
 8004d60:	3501      	adds	r5, #1
 8004d62:	e7f2      	b.n	8004d4a <__libc_init_array+0x1e>
 8004d64:	080071f8 	.word	0x080071f8
 8004d68:	080071f8 	.word	0x080071f8
 8004d6c:	080071f8 	.word	0x080071f8
 8004d70:	08007200 	.word	0x08007200

08004d74 <malloc>:
 8004d74:	4b02      	ldr	r3, [pc, #8]	; (8004d80 <malloc+0xc>)
 8004d76:	4601      	mov	r1, r0
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f000 b85f 	b.w	8004e3c <_malloc_r>
 8004d7e:	bf00      	nop
 8004d80:	20000180 	.word	0x20000180

08004d84 <free>:
 8004d84:	4b02      	ldr	r3, [pc, #8]	; (8004d90 <free+0xc>)
 8004d86:	4601      	mov	r1, r0
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	f000 b80b 	b.w	8004da4 <_free_r>
 8004d8e:	bf00      	nop
 8004d90:	20000180 	.word	0x20000180

08004d94 <memset>:
 8004d94:	4603      	mov	r3, r0
 8004d96:	4402      	add	r2, r0
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d100      	bne.n	8004d9e <memset+0xa>
 8004d9c:	4770      	bx	lr
 8004d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004da2:	e7f9      	b.n	8004d98 <memset+0x4>

08004da4 <_free_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4605      	mov	r5, r0
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d043      	beq.n	8004e34 <_free_r+0x90>
 8004dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db0:	1f0c      	subs	r4, r1, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bfb8      	it	lt
 8004db6:	18e4      	addlt	r4, r4, r3
 8004db8:	f001 fbc9 	bl	800654e <__malloc_lock>
 8004dbc:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <_free_r+0x94>)
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	b933      	cbnz	r3, 8004dd2 <_free_r+0x2e>
 8004dc4:	6063      	str	r3, [r4, #4]
 8004dc6:	6014      	str	r4, [r2, #0]
 8004dc8:	4628      	mov	r0, r5
 8004dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dce:	f001 bbbf 	b.w	8006550 <__malloc_unlock>
 8004dd2:	42a3      	cmp	r3, r4
 8004dd4:	d90b      	bls.n	8004dee <_free_r+0x4a>
 8004dd6:	6821      	ldr	r1, [r4, #0]
 8004dd8:	1862      	adds	r2, r4, r1
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	bf01      	itttt	eq
 8004dde:	681a      	ldreq	r2, [r3, #0]
 8004de0:	685b      	ldreq	r3, [r3, #4]
 8004de2:	1852      	addeq	r2, r2, r1
 8004de4:	6022      	streq	r2, [r4, #0]
 8004de6:	6063      	str	r3, [r4, #4]
 8004de8:	6004      	str	r4, [r0, #0]
 8004dea:	e7ed      	b.n	8004dc8 <_free_r+0x24>
 8004dec:	4613      	mov	r3, r2
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	b10a      	cbz	r2, 8004df6 <_free_r+0x52>
 8004df2:	42a2      	cmp	r2, r4
 8004df4:	d9fa      	bls.n	8004dec <_free_r+0x48>
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	1858      	adds	r0, r3, r1
 8004dfa:	42a0      	cmp	r0, r4
 8004dfc:	d10b      	bne.n	8004e16 <_free_r+0x72>
 8004dfe:	6820      	ldr	r0, [r4, #0]
 8004e00:	4401      	add	r1, r0
 8004e02:	1858      	adds	r0, r3, r1
 8004e04:	4282      	cmp	r2, r0
 8004e06:	6019      	str	r1, [r3, #0]
 8004e08:	d1de      	bne.n	8004dc8 <_free_r+0x24>
 8004e0a:	6810      	ldr	r0, [r2, #0]
 8004e0c:	6852      	ldr	r2, [r2, #4]
 8004e0e:	4401      	add	r1, r0
 8004e10:	6019      	str	r1, [r3, #0]
 8004e12:	605a      	str	r2, [r3, #4]
 8004e14:	e7d8      	b.n	8004dc8 <_free_r+0x24>
 8004e16:	d902      	bls.n	8004e1e <_free_r+0x7a>
 8004e18:	230c      	movs	r3, #12
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	e7d4      	b.n	8004dc8 <_free_r+0x24>
 8004e1e:	6820      	ldr	r0, [r4, #0]
 8004e20:	1821      	adds	r1, r4, r0
 8004e22:	428a      	cmp	r2, r1
 8004e24:	bf01      	itttt	eq
 8004e26:	6811      	ldreq	r1, [r2, #0]
 8004e28:	6852      	ldreq	r2, [r2, #4]
 8004e2a:	1809      	addeq	r1, r1, r0
 8004e2c:	6021      	streq	r1, [r4, #0]
 8004e2e:	6062      	str	r2, [r4, #4]
 8004e30:	605c      	str	r4, [r3, #4]
 8004e32:	e7c9      	b.n	8004dc8 <_free_r+0x24>
 8004e34:	bd38      	pop	{r3, r4, r5, pc}
 8004e36:	bf00      	nop
 8004e38:	2000065c 	.word	0x2000065c

08004e3c <_malloc_r>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	1ccd      	adds	r5, r1, #3
 8004e40:	f025 0503 	bic.w	r5, r5, #3
 8004e44:	3508      	adds	r5, #8
 8004e46:	2d0c      	cmp	r5, #12
 8004e48:	bf38      	it	cc
 8004e4a:	250c      	movcc	r5, #12
 8004e4c:	2d00      	cmp	r5, #0
 8004e4e:	4606      	mov	r6, r0
 8004e50:	db01      	blt.n	8004e56 <_malloc_r+0x1a>
 8004e52:	42a9      	cmp	r1, r5
 8004e54:	d903      	bls.n	8004e5e <_malloc_r+0x22>
 8004e56:	230c      	movs	r3, #12
 8004e58:	6033      	str	r3, [r6, #0]
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	bd70      	pop	{r4, r5, r6, pc}
 8004e5e:	f001 fb76 	bl	800654e <__malloc_lock>
 8004e62:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <_malloc_r+0xac>)
 8004e64:	6814      	ldr	r4, [r2, #0]
 8004e66:	4621      	mov	r1, r4
 8004e68:	b991      	cbnz	r1, 8004e90 <_malloc_r+0x54>
 8004e6a:	4c20      	ldr	r4, [pc, #128]	; (8004eec <_malloc_r+0xb0>)
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	b91b      	cbnz	r3, 8004e78 <_malloc_r+0x3c>
 8004e70:	4630      	mov	r0, r6
 8004e72:	f000 fc8d 	bl	8005790 <_sbrk_r>
 8004e76:	6020      	str	r0, [r4, #0]
 8004e78:	4629      	mov	r1, r5
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f000 fc88 	bl	8005790 <_sbrk_r>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d124      	bne.n	8004ece <_malloc_r+0x92>
 8004e84:	230c      	movs	r3, #12
 8004e86:	4630      	mov	r0, r6
 8004e88:	6033      	str	r3, [r6, #0]
 8004e8a:	f001 fb61 	bl	8006550 <__malloc_unlock>
 8004e8e:	e7e4      	b.n	8004e5a <_malloc_r+0x1e>
 8004e90:	680b      	ldr	r3, [r1, #0]
 8004e92:	1b5b      	subs	r3, r3, r5
 8004e94:	d418      	bmi.n	8004ec8 <_malloc_r+0x8c>
 8004e96:	2b0b      	cmp	r3, #11
 8004e98:	d90f      	bls.n	8004eba <_malloc_r+0x7e>
 8004e9a:	600b      	str	r3, [r1, #0]
 8004e9c:	18cc      	adds	r4, r1, r3
 8004e9e:	50cd      	str	r5, [r1, r3]
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f001 fb55 	bl	8006550 <__malloc_unlock>
 8004ea6:	f104 000b 	add.w	r0, r4, #11
 8004eaa:	1d23      	adds	r3, r4, #4
 8004eac:	f020 0007 	bic.w	r0, r0, #7
 8004eb0:	1ac3      	subs	r3, r0, r3
 8004eb2:	d0d3      	beq.n	8004e5c <_malloc_r+0x20>
 8004eb4:	425a      	negs	r2, r3
 8004eb6:	50e2      	str	r2, [r4, r3]
 8004eb8:	e7d0      	b.n	8004e5c <_malloc_r+0x20>
 8004eba:	684b      	ldr	r3, [r1, #4]
 8004ebc:	428c      	cmp	r4, r1
 8004ebe:	bf16      	itet	ne
 8004ec0:	6063      	strne	r3, [r4, #4]
 8004ec2:	6013      	streq	r3, [r2, #0]
 8004ec4:	460c      	movne	r4, r1
 8004ec6:	e7eb      	b.n	8004ea0 <_malloc_r+0x64>
 8004ec8:	460c      	mov	r4, r1
 8004eca:	6849      	ldr	r1, [r1, #4]
 8004ecc:	e7cc      	b.n	8004e68 <_malloc_r+0x2c>
 8004ece:	1cc4      	adds	r4, r0, #3
 8004ed0:	f024 0403 	bic.w	r4, r4, #3
 8004ed4:	42a0      	cmp	r0, r4
 8004ed6:	d005      	beq.n	8004ee4 <_malloc_r+0xa8>
 8004ed8:	1a21      	subs	r1, r4, r0
 8004eda:	4630      	mov	r0, r6
 8004edc:	f000 fc58 	bl	8005790 <_sbrk_r>
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d0cf      	beq.n	8004e84 <_malloc_r+0x48>
 8004ee4:	6025      	str	r5, [r4, #0]
 8004ee6:	e7db      	b.n	8004ea0 <_malloc_r+0x64>
 8004ee8:	2000065c 	.word	0x2000065c
 8004eec:	20000660 	.word	0x20000660

08004ef0 <__cvt>:
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef6:	461e      	mov	r6, r3
 8004ef8:	bfbb      	ittet	lt
 8004efa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004efe:	461e      	movlt	r6, r3
 8004f00:	2300      	movge	r3, #0
 8004f02:	232d      	movlt	r3, #45	; 0x2d
 8004f04:	b088      	sub	sp, #32
 8004f06:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004f08:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004f0c:	f027 0720 	bic.w	r7, r7, #32
 8004f10:	2f46      	cmp	r7, #70	; 0x46
 8004f12:	4614      	mov	r4, r2
 8004f14:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004f16:	700b      	strb	r3, [r1, #0]
 8004f18:	d004      	beq.n	8004f24 <__cvt+0x34>
 8004f1a:	2f45      	cmp	r7, #69	; 0x45
 8004f1c:	d100      	bne.n	8004f20 <__cvt+0x30>
 8004f1e:	3501      	adds	r5, #1
 8004f20:	2302      	movs	r3, #2
 8004f22:	e000      	b.n	8004f26 <__cvt+0x36>
 8004f24:	2303      	movs	r3, #3
 8004f26:	aa07      	add	r2, sp, #28
 8004f28:	9204      	str	r2, [sp, #16]
 8004f2a:	aa06      	add	r2, sp, #24
 8004f2c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004f30:	e9cd 3500 	strd	r3, r5, [sp]
 8004f34:	4622      	mov	r2, r4
 8004f36:	4633      	mov	r3, r6
 8004f38:	f000 fd2e 	bl	8005998 <_dtoa_r>
 8004f3c:	2f47      	cmp	r7, #71	; 0x47
 8004f3e:	4680      	mov	r8, r0
 8004f40:	d102      	bne.n	8004f48 <__cvt+0x58>
 8004f42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f44:	07db      	lsls	r3, r3, #31
 8004f46:	d526      	bpl.n	8004f96 <__cvt+0xa6>
 8004f48:	2f46      	cmp	r7, #70	; 0x46
 8004f4a:	eb08 0905 	add.w	r9, r8, r5
 8004f4e:	d111      	bne.n	8004f74 <__cvt+0x84>
 8004f50:	f898 3000 	ldrb.w	r3, [r8]
 8004f54:	2b30      	cmp	r3, #48	; 0x30
 8004f56:	d10a      	bne.n	8004f6e <__cvt+0x7e>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	4631      	mov	r1, r6
 8004f60:	f7fb fd22 	bl	80009a8 <__aeabi_dcmpeq>
 8004f64:	b918      	cbnz	r0, 8004f6e <__cvt+0x7e>
 8004f66:	f1c5 0501 	rsb	r5, r5, #1
 8004f6a:	f8ca 5000 	str.w	r5, [sl]
 8004f6e:	f8da 3000 	ldr.w	r3, [sl]
 8004f72:	4499      	add	r9, r3
 8004f74:	2200      	movs	r2, #0
 8004f76:	2300      	movs	r3, #0
 8004f78:	4620      	mov	r0, r4
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	f7fb fd14 	bl	80009a8 <__aeabi_dcmpeq>
 8004f80:	b938      	cbnz	r0, 8004f92 <__cvt+0xa2>
 8004f82:	2230      	movs	r2, #48	; 0x30
 8004f84:	9b07      	ldr	r3, [sp, #28]
 8004f86:	454b      	cmp	r3, r9
 8004f88:	d205      	bcs.n	8004f96 <__cvt+0xa6>
 8004f8a:	1c59      	adds	r1, r3, #1
 8004f8c:	9107      	str	r1, [sp, #28]
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	e7f8      	b.n	8004f84 <__cvt+0x94>
 8004f92:	f8cd 901c 	str.w	r9, [sp, #28]
 8004f96:	4640      	mov	r0, r8
 8004f98:	9b07      	ldr	r3, [sp, #28]
 8004f9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f9c:	eba3 0308 	sub.w	r3, r3, r8
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	b008      	add	sp, #32
 8004fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004fa8 <__exponent>:
 8004fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004faa:	2900      	cmp	r1, #0
 8004fac:	bfb4      	ite	lt
 8004fae:	232d      	movlt	r3, #45	; 0x2d
 8004fb0:	232b      	movge	r3, #43	; 0x2b
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	bfb8      	it	lt
 8004fb6:	4249      	neglt	r1, r1
 8004fb8:	2909      	cmp	r1, #9
 8004fba:	f804 2b02 	strb.w	r2, [r4], #2
 8004fbe:	7043      	strb	r3, [r0, #1]
 8004fc0:	dd21      	ble.n	8005006 <__exponent+0x5e>
 8004fc2:	f10d 0307 	add.w	r3, sp, #7
 8004fc6:	461f      	mov	r7, r3
 8004fc8:	260a      	movs	r6, #10
 8004fca:	fb91 f5f6 	sdiv	r5, r1, r6
 8004fce:	fb06 1115 	mls	r1, r6, r5, r1
 8004fd2:	2d09      	cmp	r5, #9
 8004fd4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004fd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004fdc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	dc09      	bgt.n	8004ff8 <__exponent+0x50>
 8004fe4:	3130      	adds	r1, #48	; 0x30
 8004fe6:	3b02      	subs	r3, #2
 8004fe8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004fec:	42bb      	cmp	r3, r7
 8004fee:	4622      	mov	r2, r4
 8004ff0:	d304      	bcc.n	8004ffc <__exponent+0x54>
 8004ff2:	1a10      	subs	r0, r2, r0
 8004ff4:	b003      	add	sp, #12
 8004ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	e7e6      	b.n	8004fca <__exponent+0x22>
 8004ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005000:	f804 2b01 	strb.w	r2, [r4], #1
 8005004:	e7f2      	b.n	8004fec <__exponent+0x44>
 8005006:	2330      	movs	r3, #48	; 0x30
 8005008:	4419      	add	r1, r3
 800500a:	7083      	strb	r3, [r0, #2]
 800500c:	1d02      	adds	r2, r0, #4
 800500e:	70c1      	strb	r1, [r0, #3]
 8005010:	e7ef      	b.n	8004ff2 <__exponent+0x4a>
	...

08005014 <_printf_float>:
 8005014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005018:	b091      	sub	sp, #68	; 0x44
 800501a:	460c      	mov	r4, r1
 800501c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800501e:	4693      	mov	fp, r2
 8005020:	461e      	mov	r6, r3
 8005022:	4605      	mov	r5, r0
 8005024:	f001 fa6c 	bl	8006500 <_localeconv_r>
 8005028:	6803      	ldr	r3, [r0, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	9309      	str	r3, [sp, #36]	; 0x24
 800502e:	f7fb f88f 	bl	8000150 <strlen>
 8005032:	2300      	movs	r3, #0
 8005034:	930e      	str	r3, [sp, #56]	; 0x38
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	900a      	str	r0, [sp, #40]	; 0x28
 800503a:	3307      	adds	r3, #7
 800503c:	f023 0307 	bic.w	r3, r3, #7
 8005040:	f103 0208 	add.w	r2, r3, #8
 8005044:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005048:	f8d4 a000 	ldr.w	sl, [r4]
 800504c:	603a      	str	r2, [r7, #0]
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005056:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800505a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800505e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005064:	4ba6      	ldr	r3, [pc, #664]	; (8005300 <_printf_float+0x2ec>)
 8005066:	4638      	mov	r0, r7
 8005068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800506a:	f7fb fccf 	bl	8000a0c <__aeabi_dcmpun>
 800506e:	bb68      	cbnz	r0, 80050cc <_printf_float+0xb8>
 8005070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005074:	4ba2      	ldr	r3, [pc, #648]	; (8005300 <_printf_float+0x2ec>)
 8005076:	4638      	mov	r0, r7
 8005078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800507a:	f7fb fca9 	bl	80009d0 <__aeabi_dcmple>
 800507e:	bb28      	cbnz	r0, 80050cc <_printf_float+0xb8>
 8005080:	2200      	movs	r2, #0
 8005082:	2300      	movs	r3, #0
 8005084:	4638      	mov	r0, r7
 8005086:	4649      	mov	r1, r9
 8005088:	f7fb fc98 	bl	80009bc <__aeabi_dcmplt>
 800508c:	b110      	cbz	r0, 8005094 <_printf_float+0x80>
 800508e:	232d      	movs	r3, #45	; 0x2d
 8005090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005094:	4f9b      	ldr	r7, [pc, #620]	; (8005304 <_printf_float+0x2f0>)
 8005096:	4b9c      	ldr	r3, [pc, #624]	; (8005308 <_printf_float+0x2f4>)
 8005098:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800509c:	bf98      	it	ls
 800509e:	461f      	movls	r7, r3
 80050a0:	2303      	movs	r3, #3
 80050a2:	f04f 0900 	mov.w	r9, #0
 80050a6:	6123      	str	r3, [r4, #16]
 80050a8:	f02a 0304 	bic.w	r3, sl, #4
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	9600      	str	r6, [sp, #0]
 80050b0:	465b      	mov	r3, fp
 80050b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80050b4:	4621      	mov	r1, r4
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 f9e2 	bl	8005480 <_printf_common>
 80050bc:	3001      	adds	r0, #1
 80050be:	f040 8090 	bne.w	80051e2 <_printf_float+0x1ce>
 80050c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050c6:	b011      	add	sp, #68	; 0x44
 80050c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050cc:	463a      	mov	r2, r7
 80050ce:	464b      	mov	r3, r9
 80050d0:	4638      	mov	r0, r7
 80050d2:	4649      	mov	r1, r9
 80050d4:	f7fb fc9a 	bl	8000a0c <__aeabi_dcmpun>
 80050d8:	b110      	cbz	r0, 80050e0 <_printf_float+0xcc>
 80050da:	4f8c      	ldr	r7, [pc, #560]	; (800530c <_printf_float+0x2f8>)
 80050dc:	4b8c      	ldr	r3, [pc, #560]	; (8005310 <_printf_float+0x2fc>)
 80050de:	e7db      	b.n	8005098 <_printf_float+0x84>
 80050e0:	6863      	ldr	r3, [r4, #4]
 80050e2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80050e6:	1c59      	adds	r1, r3, #1
 80050e8:	a80d      	add	r0, sp, #52	; 0x34
 80050ea:	a90e      	add	r1, sp, #56	; 0x38
 80050ec:	d140      	bne.n	8005170 <_printf_float+0x15c>
 80050ee:	2306      	movs	r3, #6
 80050f0:	6063      	str	r3, [r4, #4]
 80050f2:	f04f 0c00 	mov.w	ip, #0
 80050f6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80050fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80050fe:	6863      	ldr	r3, [r4, #4]
 8005100:	6022      	str	r2, [r4, #0]
 8005102:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	463a      	mov	r2, r7
 800510a:	464b      	mov	r3, r9
 800510c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005110:	4628      	mov	r0, r5
 8005112:	f7ff feed 	bl	8004ef0 <__cvt>
 8005116:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800511a:	2b47      	cmp	r3, #71	; 0x47
 800511c:	4607      	mov	r7, r0
 800511e:	d109      	bne.n	8005134 <_printf_float+0x120>
 8005120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005122:	1cd8      	adds	r0, r3, #3
 8005124:	db02      	blt.n	800512c <_printf_float+0x118>
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	4293      	cmp	r3, r2
 800512a:	dd47      	ble.n	80051bc <_printf_float+0x1a8>
 800512c:	f1a8 0802 	sub.w	r8, r8, #2
 8005130:	fa5f f888 	uxtb.w	r8, r8
 8005134:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005138:	990d      	ldr	r1, [sp, #52]	; 0x34
 800513a:	d824      	bhi.n	8005186 <_printf_float+0x172>
 800513c:	3901      	subs	r1, #1
 800513e:	4642      	mov	r2, r8
 8005140:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005144:	910d      	str	r1, [sp, #52]	; 0x34
 8005146:	f7ff ff2f 	bl	8004fa8 <__exponent>
 800514a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800514c:	4681      	mov	r9, r0
 800514e:	1813      	adds	r3, r2, r0
 8005150:	2a01      	cmp	r2, #1
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	dc02      	bgt.n	800515c <_printf_float+0x148>
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	07d1      	lsls	r1, r2, #31
 800515a:	d501      	bpl.n	8005160 <_printf_float+0x14c>
 800515c:	3301      	adds	r3, #1
 800515e:	6123      	str	r3, [r4, #16]
 8005160:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0a2      	beq.n	80050ae <_printf_float+0x9a>
 8005168:	232d      	movs	r3, #45	; 0x2d
 800516a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800516e:	e79e      	b.n	80050ae <_printf_float+0x9a>
 8005170:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005174:	f000 816e 	beq.w	8005454 <_printf_float+0x440>
 8005178:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800517c:	d1b9      	bne.n	80050f2 <_printf_float+0xde>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1b7      	bne.n	80050f2 <_printf_float+0xde>
 8005182:	2301      	movs	r3, #1
 8005184:	e7b4      	b.n	80050f0 <_printf_float+0xdc>
 8005186:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800518a:	d119      	bne.n	80051c0 <_printf_float+0x1ac>
 800518c:	2900      	cmp	r1, #0
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	dd0c      	ble.n	80051ac <_printf_float+0x198>
 8005192:	6121      	str	r1, [r4, #16]
 8005194:	b913      	cbnz	r3, 800519c <_printf_float+0x188>
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	07d2      	lsls	r2, r2, #31
 800519a:	d502      	bpl.n	80051a2 <_printf_float+0x18e>
 800519c:	3301      	adds	r3, #1
 800519e:	440b      	add	r3, r1
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051a4:	f04f 0900 	mov.w	r9, #0
 80051a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80051aa:	e7d9      	b.n	8005160 <_printf_float+0x14c>
 80051ac:	b913      	cbnz	r3, 80051b4 <_printf_float+0x1a0>
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	07d0      	lsls	r0, r2, #31
 80051b2:	d501      	bpl.n	80051b8 <_printf_float+0x1a4>
 80051b4:	3302      	adds	r3, #2
 80051b6:	e7f3      	b.n	80051a0 <_printf_float+0x18c>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e7f1      	b.n	80051a0 <_printf_float+0x18c>
 80051bc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80051c0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80051c4:	4293      	cmp	r3, r2
 80051c6:	db05      	blt.n	80051d4 <_printf_float+0x1c0>
 80051c8:	6822      	ldr	r2, [r4, #0]
 80051ca:	6123      	str	r3, [r4, #16]
 80051cc:	07d1      	lsls	r1, r2, #31
 80051ce:	d5e8      	bpl.n	80051a2 <_printf_float+0x18e>
 80051d0:	3301      	adds	r3, #1
 80051d2:	e7e5      	b.n	80051a0 <_printf_float+0x18c>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bfcc      	ite	gt
 80051d8:	2301      	movgt	r3, #1
 80051da:	f1c3 0302 	rsble	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	e7de      	b.n	80051a0 <_printf_float+0x18c>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	055a      	lsls	r2, r3, #21
 80051e6:	d407      	bmi.n	80051f8 <_printf_float+0x1e4>
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	463a      	mov	r2, r7
 80051ec:	4659      	mov	r1, fp
 80051ee:	4628      	mov	r0, r5
 80051f0:	47b0      	blx	r6
 80051f2:	3001      	adds	r0, #1
 80051f4:	d129      	bne.n	800524a <_printf_float+0x236>
 80051f6:	e764      	b.n	80050c2 <_printf_float+0xae>
 80051f8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80051fc:	f240 80d7 	bls.w	80053ae <_printf_float+0x39a>
 8005200:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005204:	2200      	movs	r2, #0
 8005206:	2300      	movs	r3, #0
 8005208:	f7fb fbce 	bl	80009a8 <__aeabi_dcmpeq>
 800520c:	b388      	cbz	r0, 8005272 <_printf_float+0x25e>
 800520e:	2301      	movs	r3, #1
 8005210:	4a40      	ldr	r2, [pc, #256]	; (8005314 <_printf_float+0x300>)
 8005212:	4659      	mov	r1, fp
 8005214:	4628      	mov	r0, r5
 8005216:	47b0      	blx	r6
 8005218:	3001      	adds	r0, #1
 800521a:	f43f af52 	beq.w	80050c2 <_printf_float+0xae>
 800521e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005222:	429a      	cmp	r2, r3
 8005224:	db02      	blt.n	800522c <_printf_float+0x218>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	07d8      	lsls	r0, r3, #31
 800522a:	d50e      	bpl.n	800524a <_printf_float+0x236>
 800522c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005230:	4659      	mov	r1, fp
 8005232:	4628      	mov	r0, r5
 8005234:	47b0      	blx	r6
 8005236:	3001      	adds	r0, #1
 8005238:	f43f af43 	beq.w	80050c2 <_printf_float+0xae>
 800523c:	2700      	movs	r7, #0
 800523e:	f104 081a 	add.w	r8, r4, #26
 8005242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005244:	3b01      	subs	r3, #1
 8005246:	42bb      	cmp	r3, r7
 8005248:	dc09      	bgt.n	800525e <_printf_float+0x24a>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	079f      	lsls	r7, r3, #30
 800524e:	f100 80fd 	bmi.w	800544c <_printf_float+0x438>
 8005252:	68e0      	ldr	r0, [r4, #12]
 8005254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005256:	4298      	cmp	r0, r3
 8005258:	bfb8      	it	lt
 800525a:	4618      	movlt	r0, r3
 800525c:	e733      	b.n	80050c6 <_printf_float+0xb2>
 800525e:	2301      	movs	r3, #1
 8005260:	4642      	mov	r2, r8
 8005262:	4659      	mov	r1, fp
 8005264:	4628      	mov	r0, r5
 8005266:	47b0      	blx	r6
 8005268:	3001      	adds	r0, #1
 800526a:	f43f af2a 	beq.w	80050c2 <_printf_float+0xae>
 800526e:	3701      	adds	r7, #1
 8005270:	e7e7      	b.n	8005242 <_printf_float+0x22e>
 8005272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005274:	2b00      	cmp	r3, #0
 8005276:	dc2b      	bgt.n	80052d0 <_printf_float+0x2bc>
 8005278:	2301      	movs	r3, #1
 800527a:	4a26      	ldr	r2, [pc, #152]	; (8005314 <_printf_float+0x300>)
 800527c:	4659      	mov	r1, fp
 800527e:	4628      	mov	r0, r5
 8005280:	47b0      	blx	r6
 8005282:	3001      	adds	r0, #1
 8005284:	f43f af1d 	beq.w	80050c2 <_printf_float+0xae>
 8005288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800528a:	b923      	cbnz	r3, 8005296 <_printf_float+0x282>
 800528c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800528e:	b913      	cbnz	r3, 8005296 <_printf_float+0x282>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	07d9      	lsls	r1, r3, #31
 8005294:	d5d9      	bpl.n	800524a <_printf_float+0x236>
 8005296:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800529a:	4659      	mov	r1, fp
 800529c:	4628      	mov	r0, r5
 800529e:	47b0      	blx	r6
 80052a0:	3001      	adds	r0, #1
 80052a2:	f43f af0e 	beq.w	80050c2 <_printf_float+0xae>
 80052a6:	f04f 0800 	mov.w	r8, #0
 80052aa:	f104 091a 	add.w	r9, r4, #26
 80052ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052b0:	425b      	negs	r3, r3
 80052b2:	4543      	cmp	r3, r8
 80052b4:	dc01      	bgt.n	80052ba <_printf_float+0x2a6>
 80052b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052b8:	e797      	b.n	80051ea <_printf_float+0x1d6>
 80052ba:	2301      	movs	r3, #1
 80052bc:	464a      	mov	r2, r9
 80052be:	4659      	mov	r1, fp
 80052c0:	4628      	mov	r0, r5
 80052c2:	47b0      	blx	r6
 80052c4:	3001      	adds	r0, #1
 80052c6:	f43f aefc 	beq.w	80050c2 <_printf_float+0xae>
 80052ca:	f108 0801 	add.w	r8, r8, #1
 80052ce:	e7ee      	b.n	80052ae <_printf_float+0x29a>
 80052d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052d4:	429a      	cmp	r2, r3
 80052d6:	bfa8      	it	ge
 80052d8:	461a      	movge	r2, r3
 80052da:	2a00      	cmp	r2, #0
 80052dc:	4690      	mov	r8, r2
 80052de:	dd07      	ble.n	80052f0 <_printf_float+0x2dc>
 80052e0:	4613      	mov	r3, r2
 80052e2:	4659      	mov	r1, fp
 80052e4:	463a      	mov	r2, r7
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b0      	blx	r6
 80052ea:	3001      	adds	r0, #1
 80052ec:	f43f aee9 	beq.w	80050c2 <_printf_float+0xae>
 80052f0:	f104 031a 	add.w	r3, r4, #26
 80052f4:	f04f 0a00 	mov.w	sl, #0
 80052f8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80052fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80052fe:	e015      	b.n	800532c <_printf_float+0x318>
 8005300:	7fefffff 	.word	0x7fefffff
 8005304:	08006fa2 	.word	0x08006fa2
 8005308:	08006f9e 	.word	0x08006f9e
 800530c:	08006faa 	.word	0x08006faa
 8005310:	08006fa6 	.word	0x08006fa6
 8005314:	08006fae 	.word	0x08006fae
 8005318:	2301      	movs	r3, #1
 800531a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800531c:	4659      	mov	r1, fp
 800531e:	4628      	mov	r0, r5
 8005320:	47b0      	blx	r6
 8005322:	3001      	adds	r0, #1
 8005324:	f43f aecd 	beq.w	80050c2 <_printf_float+0xae>
 8005328:	f10a 0a01 	add.w	sl, sl, #1
 800532c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005330:	eba9 0308 	sub.w	r3, r9, r8
 8005334:	4553      	cmp	r3, sl
 8005336:	dcef      	bgt.n	8005318 <_printf_float+0x304>
 8005338:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800533c:	429a      	cmp	r2, r3
 800533e:	444f      	add	r7, r9
 8005340:	db14      	blt.n	800536c <_printf_float+0x358>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	07da      	lsls	r2, r3, #31
 8005346:	d411      	bmi.n	800536c <_printf_float+0x358>
 8005348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800534a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800534c:	eba3 0209 	sub.w	r2, r3, r9
 8005350:	eba3 0901 	sub.w	r9, r3, r1
 8005354:	4591      	cmp	r9, r2
 8005356:	bfa8      	it	ge
 8005358:	4691      	movge	r9, r2
 800535a:	f1b9 0f00 	cmp.w	r9, #0
 800535e:	dc0d      	bgt.n	800537c <_printf_float+0x368>
 8005360:	2700      	movs	r7, #0
 8005362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005366:	f104 081a 	add.w	r8, r4, #26
 800536a:	e018      	b.n	800539e <_printf_float+0x38a>
 800536c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005370:	4659      	mov	r1, fp
 8005372:	4628      	mov	r0, r5
 8005374:	47b0      	blx	r6
 8005376:	3001      	adds	r0, #1
 8005378:	d1e6      	bne.n	8005348 <_printf_float+0x334>
 800537a:	e6a2      	b.n	80050c2 <_printf_float+0xae>
 800537c:	464b      	mov	r3, r9
 800537e:	463a      	mov	r2, r7
 8005380:	4659      	mov	r1, fp
 8005382:	4628      	mov	r0, r5
 8005384:	47b0      	blx	r6
 8005386:	3001      	adds	r0, #1
 8005388:	d1ea      	bne.n	8005360 <_printf_float+0x34c>
 800538a:	e69a      	b.n	80050c2 <_printf_float+0xae>
 800538c:	2301      	movs	r3, #1
 800538e:	4642      	mov	r2, r8
 8005390:	4659      	mov	r1, fp
 8005392:	4628      	mov	r0, r5
 8005394:	47b0      	blx	r6
 8005396:	3001      	adds	r0, #1
 8005398:	f43f ae93 	beq.w	80050c2 <_printf_float+0xae>
 800539c:	3701      	adds	r7, #1
 800539e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	eba3 0309 	sub.w	r3, r3, r9
 80053a8:	42bb      	cmp	r3, r7
 80053aa:	dcef      	bgt.n	800538c <_printf_float+0x378>
 80053ac:	e74d      	b.n	800524a <_printf_float+0x236>
 80053ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053b0:	2a01      	cmp	r2, #1
 80053b2:	dc01      	bgt.n	80053b8 <_printf_float+0x3a4>
 80053b4:	07db      	lsls	r3, r3, #31
 80053b6:	d538      	bpl.n	800542a <_printf_float+0x416>
 80053b8:	2301      	movs	r3, #1
 80053ba:	463a      	mov	r2, r7
 80053bc:	4659      	mov	r1, fp
 80053be:	4628      	mov	r0, r5
 80053c0:	47b0      	blx	r6
 80053c2:	3001      	adds	r0, #1
 80053c4:	f43f ae7d 	beq.w	80050c2 <_printf_float+0xae>
 80053c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053cc:	4659      	mov	r1, fp
 80053ce:	4628      	mov	r0, r5
 80053d0:	47b0      	blx	r6
 80053d2:	3001      	adds	r0, #1
 80053d4:	f107 0701 	add.w	r7, r7, #1
 80053d8:	f43f ae73 	beq.w	80050c2 <_printf_float+0xae>
 80053dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053e2:	2200      	movs	r2, #0
 80053e4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80053e8:	2300      	movs	r3, #0
 80053ea:	f7fb fadd 	bl	80009a8 <__aeabi_dcmpeq>
 80053ee:	b9c0      	cbnz	r0, 8005422 <_printf_float+0x40e>
 80053f0:	4643      	mov	r3, r8
 80053f2:	463a      	mov	r2, r7
 80053f4:	4659      	mov	r1, fp
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b0      	blx	r6
 80053fa:	3001      	adds	r0, #1
 80053fc:	d10d      	bne.n	800541a <_printf_float+0x406>
 80053fe:	e660      	b.n	80050c2 <_printf_float+0xae>
 8005400:	2301      	movs	r3, #1
 8005402:	4642      	mov	r2, r8
 8005404:	4659      	mov	r1, fp
 8005406:	4628      	mov	r0, r5
 8005408:	47b0      	blx	r6
 800540a:	3001      	adds	r0, #1
 800540c:	f43f ae59 	beq.w	80050c2 <_printf_float+0xae>
 8005410:	3701      	adds	r7, #1
 8005412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005414:	3b01      	subs	r3, #1
 8005416:	42bb      	cmp	r3, r7
 8005418:	dcf2      	bgt.n	8005400 <_printf_float+0x3ec>
 800541a:	464b      	mov	r3, r9
 800541c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005420:	e6e4      	b.n	80051ec <_printf_float+0x1d8>
 8005422:	2700      	movs	r7, #0
 8005424:	f104 081a 	add.w	r8, r4, #26
 8005428:	e7f3      	b.n	8005412 <_printf_float+0x3fe>
 800542a:	2301      	movs	r3, #1
 800542c:	e7e1      	b.n	80053f2 <_printf_float+0x3de>
 800542e:	2301      	movs	r3, #1
 8005430:	4642      	mov	r2, r8
 8005432:	4659      	mov	r1, fp
 8005434:	4628      	mov	r0, r5
 8005436:	47b0      	blx	r6
 8005438:	3001      	adds	r0, #1
 800543a:	f43f ae42 	beq.w	80050c2 <_printf_float+0xae>
 800543e:	3701      	adds	r7, #1
 8005440:	68e3      	ldr	r3, [r4, #12]
 8005442:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	42bb      	cmp	r3, r7
 8005448:	dcf1      	bgt.n	800542e <_printf_float+0x41a>
 800544a:	e702      	b.n	8005252 <_printf_float+0x23e>
 800544c:	2700      	movs	r7, #0
 800544e:	f104 0819 	add.w	r8, r4, #25
 8005452:	e7f5      	b.n	8005440 <_printf_float+0x42c>
 8005454:	2b00      	cmp	r3, #0
 8005456:	f43f ae94 	beq.w	8005182 <_printf_float+0x16e>
 800545a:	f04f 0c00 	mov.w	ip, #0
 800545e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005462:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005466:	6022      	str	r2, [r4, #0]
 8005468:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800546c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	463a      	mov	r2, r7
 8005474:	464b      	mov	r3, r9
 8005476:	4628      	mov	r0, r5
 8005478:	f7ff fd3a 	bl	8004ef0 <__cvt>
 800547c:	4607      	mov	r7, r0
 800547e:	e64f      	b.n	8005120 <_printf_float+0x10c>

08005480 <_printf_common>:
 8005480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	4691      	mov	r9, r2
 8005486:	461f      	mov	r7, r3
 8005488:	688a      	ldr	r2, [r1, #8]
 800548a:	690b      	ldr	r3, [r1, #16]
 800548c:	4606      	mov	r6, r0
 800548e:	4293      	cmp	r3, r2
 8005490:	bfb8      	it	lt
 8005492:	4613      	movlt	r3, r2
 8005494:	f8c9 3000 	str.w	r3, [r9]
 8005498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800549c:	460c      	mov	r4, r1
 800549e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054a2:	b112      	cbz	r2, 80054aa <_printf_common+0x2a>
 80054a4:	3301      	adds	r3, #1
 80054a6:	f8c9 3000 	str.w	r3, [r9]
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	0699      	lsls	r1, r3, #26
 80054ae:	bf42      	ittt	mi
 80054b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054b4:	3302      	addmi	r3, #2
 80054b6:	f8c9 3000 	strmi.w	r3, [r9]
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	f015 0506 	ands.w	r5, r5, #6
 80054c0:	d107      	bne.n	80054d2 <_printf_common+0x52>
 80054c2:	f104 0a19 	add.w	sl, r4, #25
 80054c6:	68e3      	ldr	r3, [r4, #12]
 80054c8:	f8d9 2000 	ldr.w	r2, [r9]
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	42ab      	cmp	r3, r5
 80054d0:	dc29      	bgt.n	8005526 <_printf_common+0xa6>
 80054d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	3300      	adds	r3, #0
 80054da:	bf18      	it	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	0692      	lsls	r2, r2, #26
 80054e0:	d42e      	bmi.n	8005540 <_printf_common+0xc0>
 80054e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054e6:	4639      	mov	r1, r7
 80054e8:	4630      	mov	r0, r6
 80054ea:	47c0      	blx	r8
 80054ec:	3001      	adds	r0, #1
 80054ee:	d021      	beq.n	8005534 <_printf_common+0xb4>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	68e5      	ldr	r5, [r4, #12]
 80054f4:	f003 0306 	and.w	r3, r3, #6
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	bf18      	it	ne
 80054fc:	2500      	movne	r5, #0
 80054fe:	f8d9 2000 	ldr.w	r2, [r9]
 8005502:	f04f 0900 	mov.w	r9, #0
 8005506:	bf08      	it	eq
 8005508:	1aad      	subeq	r5, r5, r2
 800550a:	68a3      	ldr	r3, [r4, #8]
 800550c:	6922      	ldr	r2, [r4, #16]
 800550e:	bf08      	it	eq
 8005510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005514:	4293      	cmp	r3, r2
 8005516:	bfc4      	itt	gt
 8005518:	1a9b      	subgt	r3, r3, r2
 800551a:	18ed      	addgt	r5, r5, r3
 800551c:	341a      	adds	r4, #26
 800551e:	454d      	cmp	r5, r9
 8005520:	d11a      	bne.n	8005558 <_printf_common+0xd8>
 8005522:	2000      	movs	r0, #0
 8005524:	e008      	b.n	8005538 <_printf_common+0xb8>
 8005526:	2301      	movs	r3, #1
 8005528:	4652      	mov	r2, sl
 800552a:	4639      	mov	r1, r7
 800552c:	4630      	mov	r0, r6
 800552e:	47c0      	blx	r8
 8005530:	3001      	adds	r0, #1
 8005532:	d103      	bne.n	800553c <_printf_common+0xbc>
 8005534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553c:	3501      	adds	r5, #1
 800553e:	e7c2      	b.n	80054c6 <_printf_common+0x46>
 8005540:	2030      	movs	r0, #48	; 0x30
 8005542:	18e1      	adds	r1, r4, r3
 8005544:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800554e:	4422      	add	r2, r4
 8005550:	3302      	adds	r3, #2
 8005552:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005556:	e7c4      	b.n	80054e2 <_printf_common+0x62>
 8005558:	2301      	movs	r3, #1
 800555a:	4622      	mov	r2, r4
 800555c:	4639      	mov	r1, r7
 800555e:	4630      	mov	r0, r6
 8005560:	47c0      	blx	r8
 8005562:	3001      	adds	r0, #1
 8005564:	d0e6      	beq.n	8005534 <_printf_common+0xb4>
 8005566:	f109 0901 	add.w	r9, r9, #1
 800556a:	e7d8      	b.n	800551e <_printf_common+0x9e>

0800556c <_printf_i>:
 800556c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005570:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005574:	460c      	mov	r4, r1
 8005576:	7e09      	ldrb	r1, [r1, #24]
 8005578:	b085      	sub	sp, #20
 800557a:	296e      	cmp	r1, #110	; 0x6e
 800557c:	4617      	mov	r7, r2
 800557e:	4606      	mov	r6, r0
 8005580:	4698      	mov	r8, r3
 8005582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005584:	f000 80b3 	beq.w	80056ee <_printf_i+0x182>
 8005588:	d822      	bhi.n	80055d0 <_printf_i+0x64>
 800558a:	2963      	cmp	r1, #99	; 0x63
 800558c:	d036      	beq.n	80055fc <_printf_i+0x90>
 800558e:	d80a      	bhi.n	80055a6 <_printf_i+0x3a>
 8005590:	2900      	cmp	r1, #0
 8005592:	f000 80b9 	beq.w	8005708 <_printf_i+0x19c>
 8005596:	2958      	cmp	r1, #88	; 0x58
 8005598:	f000 8083 	beq.w	80056a2 <_printf_i+0x136>
 800559c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80055a4:	e032      	b.n	800560c <_printf_i+0xa0>
 80055a6:	2964      	cmp	r1, #100	; 0x64
 80055a8:	d001      	beq.n	80055ae <_printf_i+0x42>
 80055aa:	2969      	cmp	r1, #105	; 0x69
 80055ac:	d1f6      	bne.n	800559c <_printf_i+0x30>
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	6813      	ldr	r3, [r2, #0]
 80055b2:	0605      	lsls	r5, r0, #24
 80055b4:	f103 0104 	add.w	r1, r3, #4
 80055b8:	d52a      	bpl.n	8005610 <_printf_i+0xa4>
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6011      	str	r1, [r2, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da03      	bge.n	80055ca <_printf_i+0x5e>
 80055c2:	222d      	movs	r2, #45	; 0x2d
 80055c4:	425b      	negs	r3, r3
 80055c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80055ca:	486f      	ldr	r0, [pc, #444]	; (8005788 <_printf_i+0x21c>)
 80055cc:	220a      	movs	r2, #10
 80055ce:	e039      	b.n	8005644 <_printf_i+0xd8>
 80055d0:	2973      	cmp	r1, #115	; 0x73
 80055d2:	f000 809d 	beq.w	8005710 <_printf_i+0x1a4>
 80055d6:	d808      	bhi.n	80055ea <_printf_i+0x7e>
 80055d8:	296f      	cmp	r1, #111	; 0x6f
 80055da:	d020      	beq.n	800561e <_printf_i+0xb2>
 80055dc:	2970      	cmp	r1, #112	; 0x70
 80055de:	d1dd      	bne.n	800559c <_printf_i+0x30>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	f043 0320 	orr.w	r3, r3, #32
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	e003      	b.n	80055f2 <_printf_i+0x86>
 80055ea:	2975      	cmp	r1, #117	; 0x75
 80055ec:	d017      	beq.n	800561e <_printf_i+0xb2>
 80055ee:	2978      	cmp	r1, #120	; 0x78
 80055f0:	d1d4      	bne.n	800559c <_printf_i+0x30>
 80055f2:	2378      	movs	r3, #120	; 0x78
 80055f4:	4865      	ldr	r0, [pc, #404]	; (800578c <_printf_i+0x220>)
 80055f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055fa:	e055      	b.n	80056a8 <_printf_i+0x13c>
 80055fc:	6813      	ldr	r3, [r2, #0]
 80055fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005602:	1d19      	adds	r1, r3, #4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6011      	str	r1, [r2, #0]
 8005608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800560c:	2301      	movs	r3, #1
 800560e:	e08c      	b.n	800572a <_printf_i+0x1be>
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005616:	6011      	str	r1, [r2, #0]
 8005618:	bf18      	it	ne
 800561a:	b21b      	sxthne	r3, r3
 800561c:	e7cf      	b.n	80055be <_printf_i+0x52>
 800561e:	6813      	ldr	r3, [r2, #0]
 8005620:	6825      	ldr	r5, [r4, #0]
 8005622:	1d18      	adds	r0, r3, #4
 8005624:	6010      	str	r0, [r2, #0]
 8005626:	0628      	lsls	r0, r5, #24
 8005628:	d501      	bpl.n	800562e <_printf_i+0xc2>
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	e002      	b.n	8005634 <_printf_i+0xc8>
 800562e:	0668      	lsls	r0, r5, #25
 8005630:	d5fb      	bpl.n	800562a <_printf_i+0xbe>
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	296f      	cmp	r1, #111	; 0x6f
 8005636:	bf14      	ite	ne
 8005638:	220a      	movne	r2, #10
 800563a:	2208      	moveq	r2, #8
 800563c:	4852      	ldr	r0, [pc, #328]	; (8005788 <_printf_i+0x21c>)
 800563e:	2100      	movs	r1, #0
 8005640:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005644:	6865      	ldr	r5, [r4, #4]
 8005646:	2d00      	cmp	r5, #0
 8005648:	60a5      	str	r5, [r4, #8]
 800564a:	f2c0 8095 	blt.w	8005778 <_printf_i+0x20c>
 800564e:	6821      	ldr	r1, [r4, #0]
 8005650:	f021 0104 	bic.w	r1, r1, #4
 8005654:	6021      	str	r1, [r4, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d13d      	bne.n	80056d6 <_printf_i+0x16a>
 800565a:	2d00      	cmp	r5, #0
 800565c:	f040 808e 	bne.w	800577c <_printf_i+0x210>
 8005660:	4665      	mov	r5, ip
 8005662:	2a08      	cmp	r2, #8
 8005664:	d10b      	bne.n	800567e <_printf_i+0x112>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	07db      	lsls	r3, r3, #31
 800566a:	d508      	bpl.n	800567e <_printf_i+0x112>
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	6862      	ldr	r2, [r4, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	bfde      	ittt	le
 8005674:	2330      	movle	r3, #48	; 0x30
 8005676:	f805 3c01 	strble.w	r3, [r5, #-1]
 800567a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800567e:	ebac 0305 	sub.w	r3, ip, r5
 8005682:	6123      	str	r3, [r4, #16]
 8005684:	f8cd 8000 	str.w	r8, [sp]
 8005688:	463b      	mov	r3, r7
 800568a:	aa03      	add	r2, sp, #12
 800568c:	4621      	mov	r1, r4
 800568e:	4630      	mov	r0, r6
 8005690:	f7ff fef6 	bl	8005480 <_printf_common>
 8005694:	3001      	adds	r0, #1
 8005696:	d14d      	bne.n	8005734 <_printf_i+0x1c8>
 8005698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800569c:	b005      	add	sp, #20
 800569e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056a2:	4839      	ldr	r0, [pc, #228]	; (8005788 <_printf_i+0x21c>)
 80056a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80056a8:	6813      	ldr	r3, [r2, #0]
 80056aa:	6821      	ldr	r1, [r4, #0]
 80056ac:	1d1d      	adds	r5, r3, #4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6015      	str	r5, [r2, #0]
 80056b2:	060a      	lsls	r2, r1, #24
 80056b4:	d50b      	bpl.n	80056ce <_printf_i+0x162>
 80056b6:	07ca      	lsls	r2, r1, #31
 80056b8:	bf44      	itt	mi
 80056ba:	f041 0120 	orrmi.w	r1, r1, #32
 80056be:	6021      	strmi	r1, [r4, #0]
 80056c0:	b91b      	cbnz	r3, 80056ca <_printf_i+0x15e>
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	f022 0220 	bic.w	r2, r2, #32
 80056c8:	6022      	str	r2, [r4, #0]
 80056ca:	2210      	movs	r2, #16
 80056cc:	e7b7      	b.n	800563e <_printf_i+0xd2>
 80056ce:	064d      	lsls	r5, r1, #25
 80056d0:	bf48      	it	mi
 80056d2:	b29b      	uxthmi	r3, r3
 80056d4:	e7ef      	b.n	80056b6 <_printf_i+0x14a>
 80056d6:	4665      	mov	r5, ip
 80056d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80056dc:	fb02 3311 	mls	r3, r2, r1, r3
 80056e0:	5cc3      	ldrb	r3, [r0, r3]
 80056e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056e6:	460b      	mov	r3, r1
 80056e8:	2900      	cmp	r1, #0
 80056ea:	d1f5      	bne.n	80056d8 <_printf_i+0x16c>
 80056ec:	e7b9      	b.n	8005662 <_printf_i+0xf6>
 80056ee:	6813      	ldr	r3, [r2, #0]
 80056f0:	6825      	ldr	r5, [r4, #0]
 80056f2:	1d18      	adds	r0, r3, #4
 80056f4:	6961      	ldr	r1, [r4, #20]
 80056f6:	6010      	str	r0, [r2, #0]
 80056f8:	0628      	lsls	r0, r5, #24
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	d501      	bpl.n	8005702 <_printf_i+0x196>
 80056fe:	6019      	str	r1, [r3, #0]
 8005700:	e002      	b.n	8005708 <_printf_i+0x19c>
 8005702:	066a      	lsls	r2, r5, #25
 8005704:	d5fb      	bpl.n	80056fe <_printf_i+0x192>
 8005706:	8019      	strh	r1, [r3, #0]
 8005708:	2300      	movs	r3, #0
 800570a:	4665      	mov	r5, ip
 800570c:	6123      	str	r3, [r4, #16]
 800570e:	e7b9      	b.n	8005684 <_printf_i+0x118>
 8005710:	6813      	ldr	r3, [r2, #0]
 8005712:	1d19      	adds	r1, r3, #4
 8005714:	6011      	str	r1, [r2, #0]
 8005716:	681d      	ldr	r5, [r3, #0]
 8005718:	6862      	ldr	r2, [r4, #4]
 800571a:	2100      	movs	r1, #0
 800571c:	4628      	mov	r0, r5
 800571e:	f000 fefd 	bl	800651c <memchr>
 8005722:	b108      	cbz	r0, 8005728 <_printf_i+0x1bc>
 8005724:	1b40      	subs	r0, r0, r5
 8005726:	6060      	str	r0, [r4, #4]
 8005728:	6863      	ldr	r3, [r4, #4]
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	2300      	movs	r3, #0
 800572e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005732:	e7a7      	b.n	8005684 <_printf_i+0x118>
 8005734:	6923      	ldr	r3, [r4, #16]
 8005736:	462a      	mov	r2, r5
 8005738:	4639      	mov	r1, r7
 800573a:	4630      	mov	r0, r6
 800573c:	47c0      	blx	r8
 800573e:	3001      	adds	r0, #1
 8005740:	d0aa      	beq.n	8005698 <_printf_i+0x12c>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	079b      	lsls	r3, r3, #30
 8005746:	d413      	bmi.n	8005770 <_printf_i+0x204>
 8005748:	68e0      	ldr	r0, [r4, #12]
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	4298      	cmp	r0, r3
 800574e:	bfb8      	it	lt
 8005750:	4618      	movlt	r0, r3
 8005752:	e7a3      	b.n	800569c <_printf_i+0x130>
 8005754:	2301      	movs	r3, #1
 8005756:	464a      	mov	r2, r9
 8005758:	4639      	mov	r1, r7
 800575a:	4630      	mov	r0, r6
 800575c:	47c0      	blx	r8
 800575e:	3001      	adds	r0, #1
 8005760:	d09a      	beq.n	8005698 <_printf_i+0x12c>
 8005762:	3501      	adds	r5, #1
 8005764:	68e3      	ldr	r3, [r4, #12]
 8005766:	9a03      	ldr	r2, [sp, #12]
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	42ab      	cmp	r3, r5
 800576c:	dcf2      	bgt.n	8005754 <_printf_i+0x1e8>
 800576e:	e7eb      	b.n	8005748 <_printf_i+0x1dc>
 8005770:	2500      	movs	r5, #0
 8005772:	f104 0919 	add.w	r9, r4, #25
 8005776:	e7f5      	b.n	8005764 <_printf_i+0x1f8>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1ac      	bne.n	80056d6 <_printf_i+0x16a>
 800577c:	7803      	ldrb	r3, [r0, #0]
 800577e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005782:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005786:	e76c      	b.n	8005662 <_printf_i+0xf6>
 8005788:	08006fb0 	.word	0x08006fb0
 800578c:	08006fc1 	.word	0x08006fc1

08005790 <_sbrk_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	2300      	movs	r3, #0
 8005794:	4c05      	ldr	r4, [pc, #20]	; (80057ac <_sbrk_r+0x1c>)
 8005796:	4605      	mov	r5, r0
 8005798:	4608      	mov	r0, r1
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	f7fb ffc6 	bl	800172c <_sbrk>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_sbrk_r+0x1a>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_sbrk_r+0x1a>
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	200015e8 	.word	0x200015e8

080057b0 <_raise_r>:
 80057b0:	291f      	cmp	r1, #31
 80057b2:	b538      	push	{r3, r4, r5, lr}
 80057b4:	4604      	mov	r4, r0
 80057b6:	460d      	mov	r5, r1
 80057b8:	d904      	bls.n	80057c4 <_raise_r+0x14>
 80057ba:	2316      	movs	r3, #22
 80057bc:	6003      	str	r3, [r0, #0]
 80057be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057c6:	b112      	cbz	r2, 80057ce <_raise_r+0x1e>
 80057c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057cc:	b94b      	cbnz	r3, 80057e2 <_raise_r+0x32>
 80057ce:	4620      	mov	r0, r4
 80057d0:	f000 f830 	bl	8005834 <_getpid_r>
 80057d4:	462a      	mov	r2, r5
 80057d6:	4601      	mov	r1, r0
 80057d8:	4620      	mov	r0, r4
 80057da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057de:	f000 b817 	b.w	8005810 <_kill_r>
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d00a      	beq.n	80057fc <_raise_r+0x4c>
 80057e6:	1c59      	adds	r1, r3, #1
 80057e8:	d103      	bne.n	80057f2 <_raise_r+0x42>
 80057ea:	2316      	movs	r3, #22
 80057ec:	6003      	str	r3, [r0, #0]
 80057ee:	2001      	movs	r0, #1
 80057f0:	e7e7      	b.n	80057c2 <_raise_r+0x12>
 80057f2:	2400      	movs	r4, #0
 80057f4:	4628      	mov	r0, r5
 80057f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057fa:	4798      	blx	r3
 80057fc:	2000      	movs	r0, #0
 80057fe:	e7e0      	b.n	80057c2 <_raise_r+0x12>

08005800 <raise>:
 8005800:	4b02      	ldr	r3, [pc, #8]	; (800580c <raise+0xc>)
 8005802:	4601      	mov	r1, r0
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	f7ff bfd3 	b.w	80057b0 <_raise_r>
 800580a:	bf00      	nop
 800580c:	20000180 	.word	0x20000180

08005810 <_kill_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	2300      	movs	r3, #0
 8005814:	4c06      	ldr	r4, [pc, #24]	; (8005830 <_kill_r+0x20>)
 8005816:	4605      	mov	r5, r0
 8005818:	4608      	mov	r0, r1
 800581a:	4611      	mov	r1, r2
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	f7fb ff77 	bl	8001710 <_kill>
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	d102      	bne.n	800582c <_kill_r+0x1c>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	b103      	cbz	r3, 800582c <_kill_r+0x1c>
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	bd38      	pop	{r3, r4, r5, pc}
 800582e:	bf00      	nop
 8005830:	200015e8 	.word	0x200015e8

08005834 <_getpid_r>:
 8005834:	f7fb bf6a 	b.w	800170c <_getpid>

08005838 <_vsiprintf_r>:
 8005838:	b500      	push	{lr}
 800583a:	b09b      	sub	sp, #108	; 0x6c
 800583c:	9100      	str	r1, [sp, #0]
 800583e:	9104      	str	r1, [sp, #16]
 8005840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005844:	9105      	str	r1, [sp, #20]
 8005846:	9102      	str	r1, [sp, #8]
 8005848:	4905      	ldr	r1, [pc, #20]	; (8005860 <_vsiprintf_r+0x28>)
 800584a:	9103      	str	r1, [sp, #12]
 800584c:	4669      	mov	r1, sp
 800584e:	f001 f9c5 	bl	8006bdc <_svfiprintf_r>
 8005852:	2200      	movs	r2, #0
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	b01b      	add	sp, #108	; 0x6c
 800585a:	f85d fb04 	ldr.w	pc, [sp], #4
 800585e:	bf00      	nop
 8005860:	ffff0208 	.word	0xffff0208

08005864 <vsiprintf>:
 8005864:	4613      	mov	r3, r2
 8005866:	460a      	mov	r2, r1
 8005868:	4601      	mov	r1, r0
 800586a:	4802      	ldr	r0, [pc, #8]	; (8005874 <vsiprintf+0x10>)
 800586c:	6800      	ldr	r0, [r0, #0]
 800586e:	f7ff bfe3 	b.w	8005838 <_vsiprintf_r>
 8005872:	bf00      	nop
 8005874:	20000180 	.word	0x20000180

08005878 <quorem>:
 8005878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	6903      	ldr	r3, [r0, #16]
 800587e:	690c      	ldr	r4, [r1, #16]
 8005880:	4680      	mov	r8, r0
 8005882:	42a3      	cmp	r3, r4
 8005884:	f2c0 8084 	blt.w	8005990 <quorem+0x118>
 8005888:	3c01      	subs	r4, #1
 800588a:	f101 0714 	add.w	r7, r1, #20
 800588e:	f100 0614 	add.w	r6, r0, #20
 8005892:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005896:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800589a:	3501      	adds	r5, #1
 800589c:	fbb0 f5f5 	udiv	r5, r0, r5
 80058a0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80058a4:	eb06 030c 	add.w	r3, r6, ip
 80058a8:	eb07 090c 	add.w	r9, r7, ip
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	b39d      	cbz	r5, 8005918 <quorem+0xa0>
 80058b0:	f04f 0a00 	mov.w	sl, #0
 80058b4:	4638      	mov	r0, r7
 80058b6:	46b6      	mov	lr, r6
 80058b8:	46d3      	mov	fp, sl
 80058ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80058be:	b293      	uxth	r3, r2
 80058c0:	fb05 a303 	mla	r3, r5, r3, sl
 80058c4:	0c12      	lsrs	r2, r2, #16
 80058c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058ca:	fb05 a202 	mla	r2, r5, r2, sl
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	ebab 0303 	sub.w	r3, fp, r3
 80058d4:	f8de b000 	ldr.w	fp, [lr]
 80058d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80058dc:	fa1f fb8b 	uxth.w	fp, fp
 80058e0:	445b      	add	r3, fp
 80058e2:	fa1f fb82 	uxth.w	fp, r2
 80058e6:	f8de 2000 	ldr.w	r2, [lr]
 80058ea:	4581      	cmp	r9, r0
 80058ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80058f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058fa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80058fe:	f84e 3b04 	str.w	r3, [lr], #4
 8005902:	d2da      	bcs.n	80058ba <quorem+0x42>
 8005904:	f856 300c 	ldr.w	r3, [r6, ip]
 8005908:	b933      	cbnz	r3, 8005918 <quorem+0xa0>
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	3b04      	subs	r3, #4
 800590e:	429e      	cmp	r6, r3
 8005910:	461a      	mov	r2, r3
 8005912:	d331      	bcc.n	8005978 <quorem+0x100>
 8005914:	f8c8 4010 	str.w	r4, [r8, #16]
 8005918:	4640      	mov	r0, r8
 800591a:	f001 f82f 	bl	800697c <__mcmp>
 800591e:	2800      	cmp	r0, #0
 8005920:	db26      	blt.n	8005970 <quorem+0xf8>
 8005922:	4630      	mov	r0, r6
 8005924:	f04f 0c00 	mov.w	ip, #0
 8005928:	3501      	adds	r5, #1
 800592a:	f857 1b04 	ldr.w	r1, [r7], #4
 800592e:	f8d0 e000 	ldr.w	lr, [r0]
 8005932:	b28b      	uxth	r3, r1
 8005934:	ebac 0303 	sub.w	r3, ip, r3
 8005938:	fa1f f28e 	uxth.w	r2, lr
 800593c:	4413      	add	r3, r2
 800593e:	0c0a      	lsrs	r2, r1, #16
 8005940:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005944:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005948:	b29b      	uxth	r3, r3
 800594a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800594e:	45b9      	cmp	r9, r7
 8005950:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005954:	f840 3b04 	str.w	r3, [r0], #4
 8005958:	d2e7      	bcs.n	800592a <quorem+0xb2>
 800595a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800595e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005962:	b92a      	cbnz	r2, 8005970 <quorem+0xf8>
 8005964:	3b04      	subs	r3, #4
 8005966:	429e      	cmp	r6, r3
 8005968:	461a      	mov	r2, r3
 800596a:	d30b      	bcc.n	8005984 <quorem+0x10c>
 800596c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005970:	4628      	mov	r0, r5
 8005972:	b003      	add	sp, #12
 8005974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	3b04      	subs	r3, #4
 800597c:	2a00      	cmp	r2, #0
 800597e:	d1c9      	bne.n	8005914 <quorem+0x9c>
 8005980:	3c01      	subs	r4, #1
 8005982:	e7c4      	b.n	800590e <quorem+0x96>
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	3b04      	subs	r3, #4
 8005988:	2a00      	cmp	r2, #0
 800598a:	d1ef      	bne.n	800596c <quorem+0xf4>
 800598c:	3c01      	subs	r4, #1
 800598e:	e7ea      	b.n	8005966 <quorem+0xee>
 8005990:	2000      	movs	r0, #0
 8005992:	e7ee      	b.n	8005972 <quorem+0xfa>
 8005994:	0000      	movs	r0, r0
	...

08005998 <_dtoa_r>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	4616      	mov	r6, r2
 800599e:	461f      	mov	r7, r3
 80059a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059a2:	b095      	sub	sp, #84	; 0x54
 80059a4:	4604      	mov	r4, r0
 80059a6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80059aa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80059ae:	b93d      	cbnz	r5, 80059c0 <_dtoa_r+0x28>
 80059b0:	2010      	movs	r0, #16
 80059b2:	f7ff f9df 	bl	8004d74 <malloc>
 80059b6:	6260      	str	r0, [r4, #36]	; 0x24
 80059b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059bc:	6005      	str	r5, [r0, #0]
 80059be:	60c5      	str	r5, [r0, #12]
 80059c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	b151      	cbz	r1, 80059dc <_dtoa_r+0x44>
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	2301      	movs	r3, #1
 80059ca:	4093      	lsls	r3, r2
 80059cc:	604a      	str	r2, [r1, #4]
 80059ce:	608b      	str	r3, [r1, #8]
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 fdf2 	bl	80065ba <_Bfree>
 80059d6:	2200      	movs	r2, #0
 80059d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	1e3b      	subs	r3, r7, #0
 80059de:	bfaf      	iteee	ge
 80059e0:	2300      	movge	r3, #0
 80059e2:	2201      	movlt	r2, #1
 80059e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059e8:	9303      	strlt	r3, [sp, #12]
 80059ea:	bfac      	ite	ge
 80059ec:	f8c8 3000 	strge.w	r3, [r8]
 80059f0:	f8c8 2000 	strlt.w	r2, [r8]
 80059f4:	4bae      	ldr	r3, [pc, #696]	; (8005cb0 <_dtoa_r+0x318>)
 80059f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059fa:	ea33 0308 	bics.w	r3, r3, r8
 80059fe:	d11b      	bne.n	8005a38 <_dtoa_r+0xa0>
 8005a00:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	9b02      	ldr	r3, [sp, #8]
 8005a0a:	b923      	cbnz	r3, 8005a16 <_dtoa_r+0x7e>
 8005a0c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005a10:	2800      	cmp	r0, #0
 8005a12:	f000 8545 	beq.w	80064a0 <_dtoa_r+0xb08>
 8005a16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a18:	b953      	cbnz	r3, 8005a30 <_dtoa_r+0x98>
 8005a1a:	4ba6      	ldr	r3, [pc, #664]	; (8005cb4 <_dtoa_r+0x31c>)
 8005a1c:	e021      	b.n	8005a62 <_dtoa_r+0xca>
 8005a1e:	4ba6      	ldr	r3, [pc, #664]	; (8005cb8 <_dtoa_r+0x320>)
 8005a20:	9306      	str	r3, [sp, #24]
 8005a22:	3308      	adds	r3, #8
 8005a24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	9806      	ldr	r0, [sp, #24]
 8005a2a:	b015      	add	sp, #84	; 0x54
 8005a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a30:	4ba0      	ldr	r3, [pc, #640]	; (8005cb4 <_dtoa_r+0x31c>)
 8005a32:	9306      	str	r3, [sp, #24]
 8005a34:	3303      	adds	r3, #3
 8005a36:	e7f5      	b.n	8005a24 <_dtoa_r+0x8c>
 8005a38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2300      	movs	r3, #0
 8005a40:	4630      	mov	r0, r6
 8005a42:	4639      	mov	r1, r7
 8005a44:	f7fa ffb0 	bl	80009a8 <__aeabi_dcmpeq>
 8005a48:	4682      	mov	sl, r0
 8005a4a:	b160      	cbz	r0, 8005a66 <_dtoa_r+0xce>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8520 	beq.w	800649a <_dtoa_r+0xb02>
 8005a5a:	4b98      	ldr	r3, [pc, #608]	; (8005cbc <_dtoa_r+0x324>)
 8005a5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	9306      	str	r3, [sp, #24]
 8005a64:	e7e0      	b.n	8005a28 <_dtoa_r+0x90>
 8005a66:	ab12      	add	r3, sp, #72	; 0x48
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	ab13      	add	r3, sp, #76	; 0x4c
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	4632      	mov	r2, r6
 8005a70:	463b      	mov	r3, r7
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 fffa 	bl	8006a6c <__d2b>
 8005a78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005a7c:	4683      	mov	fp, r0
 8005a7e:	2d00      	cmp	r5, #0
 8005a80:	d07d      	beq.n	8005b7e <_dtoa_r+0x1e6>
 8005a82:	46b0      	mov	r8, r6
 8005a84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a88:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005a8c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005a90:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a94:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4b89      	ldr	r3, [pc, #548]	; (8005cc0 <_dtoa_r+0x328>)
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	f7fa fb62 	bl	8000168 <__aeabi_dsub>
 8005aa4:	a37c      	add	r3, pc, #496	; (adr r3, 8005c98 <_dtoa_r+0x300>)
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f7fa fd15 	bl	80004d8 <__aeabi_dmul>
 8005aae:	a37c      	add	r3, pc, #496	; (adr r3, 8005ca0 <_dtoa_r+0x308>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f7fa fb5a 	bl	800016c <__adddf3>
 8005ab8:	4606      	mov	r6, r0
 8005aba:	4628      	mov	r0, r5
 8005abc:	460f      	mov	r7, r1
 8005abe:	f7fa fca1 	bl	8000404 <__aeabi_i2d>
 8005ac2:	a379      	add	r3, pc, #484	; (adr r3, 8005ca8 <_dtoa_r+0x310>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f7fa fd06 	bl	80004d8 <__aeabi_dmul>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	f7fa fb4a 	bl	800016c <__adddf3>
 8005ad8:	4606      	mov	r6, r0
 8005ada:	460f      	mov	r7, r1
 8005adc:	f7fa ffac 	bl	8000a38 <__aeabi_d2iz>
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4682      	mov	sl, r0
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	4639      	mov	r1, r7
 8005aea:	f7fa ff67 	bl	80009bc <__aeabi_dcmplt>
 8005aee:	b148      	cbz	r0, 8005b04 <_dtoa_r+0x16c>
 8005af0:	4650      	mov	r0, sl
 8005af2:	f7fa fc87 	bl	8000404 <__aeabi_i2d>
 8005af6:	4632      	mov	r2, r6
 8005af8:	463b      	mov	r3, r7
 8005afa:	f7fa ff55 	bl	80009a8 <__aeabi_dcmpeq>
 8005afe:	b908      	cbnz	r0, 8005b04 <_dtoa_r+0x16c>
 8005b00:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b04:	f1ba 0f16 	cmp.w	sl, #22
 8005b08:	d85a      	bhi.n	8005bc0 <_dtoa_r+0x228>
 8005b0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b0e:	496d      	ldr	r1, [pc, #436]	; (8005cc4 <_dtoa_r+0x32c>)
 8005b10:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b18:	f7fa ff6e 	bl	80009f8 <__aeabi_dcmpgt>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d051      	beq.n	8005bc4 <_dtoa_r+0x22c>
 8005b20:	2300      	movs	r3, #0
 8005b22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b26:	930d      	str	r3, [sp, #52]	; 0x34
 8005b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b2a:	1b5d      	subs	r5, r3, r5
 8005b2c:	1e6b      	subs	r3, r5, #1
 8005b2e:	9307      	str	r3, [sp, #28]
 8005b30:	bf43      	ittte	mi
 8005b32:	2300      	movmi	r3, #0
 8005b34:	f1c5 0901 	rsbmi	r9, r5, #1
 8005b38:	9307      	strmi	r3, [sp, #28]
 8005b3a:	f04f 0900 	movpl.w	r9, #0
 8005b3e:	f1ba 0f00 	cmp.w	sl, #0
 8005b42:	db41      	blt.n	8005bc8 <_dtoa_r+0x230>
 8005b44:	9b07      	ldr	r3, [sp, #28]
 8005b46:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005b4a:	4453      	add	r3, sl
 8005b4c:	9307      	str	r3, [sp, #28]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9308      	str	r3, [sp, #32]
 8005b52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b54:	2b09      	cmp	r3, #9
 8005b56:	f200 808f 	bhi.w	8005c78 <_dtoa_r+0x2e0>
 8005b5a:	2b05      	cmp	r3, #5
 8005b5c:	bfc4      	itt	gt
 8005b5e:	3b04      	subgt	r3, #4
 8005b60:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005b62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b64:	bfc8      	it	gt
 8005b66:	2500      	movgt	r5, #0
 8005b68:	f1a3 0302 	sub.w	r3, r3, #2
 8005b6c:	bfd8      	it	le
 8005b6e:	2501      	movle	r5, #1
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	f200 808d 	bhi.w	8005c90 <_dtoa_r+0x2f8>
 8005b76:	e8df f003 	tbb	[pc, r3]
 8005b7a:	7d7b      	.short	0x7d7b
 8005b7c:	6f2f      	.short	0x6f2f
 8005b7e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005b82:	441d      	add	r5, r3
 8005b84:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005b88:	2820      	cmp	r0, #32
 8005b8a:	dd13      	ble.n	8005bb4 <_dtoa_r+0x21c>
 8005b8c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005b90:	9b02      	ldr	r3, [sp, #8]
 8005b92:	fa08 f800 	lsl.w	r8, r8, r0
 8005b96:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005b9a:	fa23 f000 	lsr.w	r0, r3, r0
 8005b9e:	ea48 0000 	orr.w	r0, r8, r0
 8005ba2:	f7fa fc1f 	bl	80003e4 <__aeabi_ui2d>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4680      	mov	r8, r0
 8005baa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005bae:	3d01      	subs	r5, #1
 8005bb0:	9310      	str	r3, [sp, #64]	; 0x40
 8005bb2:	e771      	b.n	8005a98 <_dtoa_r+0x100>
 8005bb4:	9b02      	ldr	r3, [sp, #8]
 8005bb6:	f1c0 0020 	rsb	r0, r0, #32
 8005bba:	fa03 f000 	lsl.w	r0, r3, r0
 8005bbe:	e7f0      	b.n	8005ba2 <_dtoa_r+0x20a>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e7b0      	b.n	8005b26 <_dtoa_r+0x18e>
 8005bc4:	900d      	str	r0, [sp, #52]	; 0x34
 8005bc6:	e7af      	b.n	8005b28 <_dtoa_r+0x190>
 8005bc8:	f1ca 0300 	rsb	r3, sl, #0
 8005bcc:	9308      	str	r3, [sp, #32]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	eba9 090a 	sub.w	r9, r9, sl
 8005bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8005bd6:	e7bc      	b.n	8005b52 <_dtoa_r+0x1ba>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	9309      	str	r3, [sp, #36]	; 0x24
 8005bdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	dd74      	ble.n	8005ccc <_dtoa_r+0x334>
 8005be2:	4698      	mov	r8, r3
 8005be4:	9304      	str	r3, [sp, #16]
 8005be6:	2200      	movs	r2, #0
 8005be8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005bea:	6072      	str	r2, [r6, #4]
 8005bec:	2204      	movs	r2, #4
 8005bee:	f102 0014 	add.w	r0, r2, #20
 8005bf2:	4298      	cmp	r0, r3
 8005bf4:	6871      	ldr	r1, [r6, #4]
 8005bf6:	d96e      	bls.n	8005cd6 <_dtoa_r+0x33e>
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 fcaa 	bl	8006552 <_Balloc>
 8005bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c00:	6030      	str	r0, [r6, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f1b8 0f0e 	cmp.w	r8, #14
 8005c08:	9306      	str	r3, [sp, #24]
 8005c0a:	f200 80ed 	bhi.w	8005de8 <_dtoa_r+0x450>
 8005c0e:	2d00      	cmp	r5, #0
 8005c10:	f000 80ea 	beq.w	8005de8 <_dtoa_r+0x450>
 8005c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c18:	f1ba 0f00 	cmp.w	sl, #0
 8005c1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005c20:	dd77      	ble.n	8005d12 <_dtoa_r+0x37a>
 8005c22:	4a28      	ldr	r2, [pc, #160]	; (8005cc4 <_dtoa_r+0x32c>)
 8005c24:	f00a 030f 	and.w	r3, sl, #15
 8005c28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005c2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c30:	06f0      	lsls	r0, r6, #27
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c3a:	d568      	bpl.n	8005d0e <_dtoa_r+0x376>
 8005c3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c40:	4b21      	ldr	r3, [pc, #132]	; (8005cc8 <_dtoa_r+0x330>)
 8005c42:	2503      	movs	r5, #3
 8005c44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c48:	f7fa fd70 	bl	800072c <__aeabi_ddiv>
 8005c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c50:	f006 060f 	and.w	r6, r6, #15
 8005c54:	4f1c      	ldr	r7, [pc, #112]	; (8005cc8 <_dtoa_r+0x330>)
 8005c56:	e04f      	b.n	8005cf8 <_dtoa_r+0x360>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c5e:	4453      	add	r3, sl
 8005c60:	f103 0801 	add.w	r8, r3, #1
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	4643      	mov	r3, r8
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	bfb8      	it	lt
 8005c6c:	2301      	movlt	r3, #1
 8005c6e:	e7ba      	b.n	8005be6 <_dtoa_r+0x24e>
 8005c70:	2300      	movs	r3, #0
 8005c72:	e7b2      	b.n	8005bda <_dtoa_r+0x242>
 8005c74:	2300      	movs	r3, #0
 8005c76:	e7f0      	b.n	8005c5a <_dtoa_r+0x2c2>
 8005c78:	2501      	movs	r5, #1
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9509      	str	r5, [sp, #36]	; 0x24
 8005c7e:	931e      	str	r3, [sp, #120]	; 0x78
 8005c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c84:	2200      	movs	r2, #0
 8005c86:	9304      	str	r3, [sp, #16]
 8005c88:	4698      	mov	r8, r3
 8005c8a:	2312      	movs	r3, #18
 8005c8c:	921f      	str	r2, [sp, #124]	; 0x7c
 8005c8e:	e7aa      	b.n	8005be6 <_dtoa_r+0x24e>
 8005c90:	2301      	movs	r3, #1
 8005c92:	9309      	str	r3, [sp, #36]	; 0x24
 8005c94:	e7f4      	b.n	8005c80 <_dtoa_r+0x2e8>
 8005c96:	bf00      	nop
 8005c98:	636f4361 	.word	0x636f4361
 8005c9c:	3fd287a7 	.word	0x3fd287a7
 8005ca0:	8b60c8b3 	.word	0x8b60c8b3
 8005ca4:	3fc68a28 	.word	0x3fc68a28
 8005ca8:	509f79fb 	.word	0x509f79fb
 8005cac:	3fd34413 	.word	0x3fd34413
 8005cb0:	7ff00000 	.word	0x7ff00000
 8005cb4:	08006fdb 	.word	0x08006fdb
 8005cb8:	08006fd2 	.word	0x08006fd2
 8005cbc:	08006faf 	.word	0x08006faf
 8005cc0:	3ff80000 	.word	0x3ff80000
 8005cc4:	08007008 	.word	0x08007008
 8005cc8:	08006fe0 	.word	0x08006fe0
 8005ccc:	2301      	movs	r3, #1
 8005cce:	9304      	str	r3, [sp, #16]
 8005cd0:	4698      	mov	r8, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	e7da      	b.n	8005c8c <_dtoa_r+0x2f4>
 8005cd6:	3101      	adds	r1, #1
 8005cd8:	6071      	str	r1, [r6, #4]
 8005cda:	0052      	lsls	r2, r2, #1
 8005cdc:	e787      	b.n	8005bee <_dtoa_r+0x256>
 8005cde:	07f1      	lsls	r1, r6, #31
 8005ce0:	d508      	bpl.n	8005cf4 <_dtoa_r+0x35c>
 8005ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cea:	f7fa fbf5 	bl	80004d8 <__aeabi_dmul>
 8005cee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005cf2:	3501      	adds	r5, #1
 8005cf4:	1076      	asrs	r6, r6, #1
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	2e00      	cmp	r6, #0
 8005cfa:	d1f0      	bne.n	8005cde <_dtoa_r+0x346>
 8005cfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d04:	f7fa fd12 	bl	800072c <__aeabi_ddiv>
 8005d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d0c:	e01b      	b.n	8005d46 <_dtoa_r+0x3ae>
 8005d0e:	2502      	movs	r5, #2
 8005d10:	e7a0      	b.n	8005c54 <_dtoa_r+0x2bc>
 8005d12:	f000 80a4 	beq.w	8005e5e <_dtoa_r+0x4c6>
 8005d16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005d1a:	f1ca 0600 	rsb	r6, sl, #0
 8005d1e:	4ba0      	ldr	r3, [pc, #640]	; (8005fa0 <_dtoa_r+0x608>)
 8005d20:	f006 020f 	and.w	r2, r6, #15
 8005d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f7fa fbd4 	bl	80004d8 <__aeabi_dmul>
 8005d30:	2502      	movs	r5, #2
 8005d32:	2300      	movs	r3, #0
 8005d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d38:	4f9a      	ldr	r7, [pc, #616]	; (8005fa4 <_dtoa_r+0x60c>)
 8005d3a:	1136      	asrs	r6, r6, #4
 8005d3c:	2e00      	cmp	r6, #0
 8005d3e:	f040 8083 	bne.w	8005e48 <_dtoa_r+0x4b0>
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e0      	bne.n	8005d08 <_dtoa_r+0x370>
 8005d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 808a 	beq.w	8005e62 <_dtoa_r+0x4ca>
 8005d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	4b92      	ldr	r3, [pc, #584]	; (8005fa8 <_dtoa_r+0x610>)
 8005d5e:	f7fa fe2d 	bl	80009bc <__aeabi_dcmplt>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d07d      	beq.n	8005e62 <_dtoa_r+0x4ca>
 8005d66:	f1b8 0f00 	cmp.w	r8, #0
 8005d6a:	d07a      	beq.n	8005e62 <_dtoa_r+0x4ca>
 8005d6c:	9b04      	ldr	r3, [sp, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	dd36      	ble.n	8005de0 <_dtoa_r+0x448>
 8005d72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d76:	2200      	movs	r2, #0
 8005d78:	4b8c      	ldr	r3, [pc, #560]	; (8005fac <_dtoa_r+0x614>)
 8005d7a:	f7fa fbad 	bl	80004d8 <__aeabi_dmul>
 8005d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d82:	9e04      	ldr	r6, [sp, #16]
 8005d84:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005d88:	3501      	adds	r5, #1
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f7fa fb3a 	bl	8000404 <__aeabi_i2d>
 8005d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d94:	f7fa fba0 	bl	80004d8 <__aeabi_dmul>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4b85      	ldr	r3, [pc, #532]	; (8005fb0 <_dtoa_r+0x618>)
 8005d9c:	f7fa f9e6 	bl	800016c <__adddf3>
 8005da0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005da4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005da8:	950b      	str	r5, [sp, #44]	; 0x2c
 8005daa:	2e00      	cmp	r6, #0
 8005dac:	d15c      	bne.n	8005e68 <_dtoa_r+0x4d0>
 8005dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005db2:	2200      	movs	r2, #0
 8005db4:	4b7f      	ldr	r3, [pc, #508]	; (8005fb4 <_dtoa_r+0x61c>)
 8005db6:	f7fa f9d7 	bl	8000168 <__aeabi_dsub>
 8005dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dbc:	462b      	mov	r3, r5
 8005dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc2:	f7fa fe19 	bl	80009f8 <__aeabi_dcmpgt>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f040 8281 	bne.w	80062ce <_dtoa_r+0x936>
 8005dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dd2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005dd6:	f7fa fdf1 	bl	80009bc <__aeabi_dcmplt>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	f040 8275 	bne.w	80062ca <_dtoa_r+0x932>
 8005de0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005de4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005de8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f2c0 814b 	blt.w	8006086 <_dtoa_r+0x6ee>
 8005df0:	f1ba 0f0e 	cmp.w	sl, #14
 8005df4:	f300 8147 	bgt.w	8006086 <_dtoa_r+0x6ee>
 8005df8:	4b69      	ldr	r3, [pc, #420]	; (8005fa0 <_dtoa_r+0x608>)
 8005dfa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f280 80d7 	bge.w	8005fbc <_dtoa_r+0x624>
 8005e0e:	f1b8 0f00 	cmp.w	r8, #0
 8005e12:	f300 80d3 	bgt.w	8005fbc <_dtoa_r+0x624>
 8005e16:	f040 8257 	bne.w	80062c8 <_dtoa_r+0x930>
 8005e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	4b64      	ldr	r3, [pc, #400]	; (8005fb4 <_dtoa_r+0x61c>)
 8005e22:	f7fa fb59 	bl	80004d8 <__aeabi_dmul>
 8005e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e2a:	f7fa fddb 	bl	80009e4 <__aeabi_dcmpge>
 8005e2e:	4646      	mov	r6, r8
 8005e30:	4647      	mov	r7, r8
 8005e32:	2800      	cmp	r0, #0
 8005e34:	f040 822d 	bne.w	8006292 <_dtoa_r+0x8fa>
 8005e38:	9b06      	ldr	r3, [sp, #24]
 8005e3a:	9a06      	ldr	r2, [sp, #24]
 8005e3c:	1c5d      	adds	r5, r3, #1
 8005e3e:	2331      	movs	r3, #49	; 0x31
 8005e40:	f10a 0a01 	add.w	sl, sl, #1
 8005e44:	7013      	strb	r3, [r2, #0]
 8005e46:	e228      	b.n	800629a <_dtoa_r+0x902>
 8005e48:	07f2      	lsls	r2, r6, #31
 8005e4a:	d505      	bpl.n	8005e58 <_dtoa_r+0x4c0>
 8005e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e50:	f7fa fb42 	bl	80004d8 <__aeabi_dmul>
 8005e54:	2301      	movs	r3, #1
 8005e56:	3501      	adds	r5, #1
 8005e58:	1076      	asrs	r6, r6, #1
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	e76e      	b.n	8005d3c <_dtoa_r+0x3a4>
 8005e5e:	2502      	movs	r5, #2
 8005e60:	e771      	b.n	8005d46 <_dtoa_r+0x3ae>
 8005e62:	4657      	mov	r7, sl
 8005e64:	4646      	mov	r6, r8
 8005e66:	e790      	b.n	8005d8a <_dtoa_r+0x3f2>
 8005e68:	4b4d      	ldr	r3, [pc, #308]	; (8005fa0 <_dtoa_r+0x608>)
 8005e6a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e6e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d048      	beq.n	8005f0a <_dtoa_r+0x572>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	494e      	ldr	r1, [pc, #312]	; (8005fb8 <_dtoa_r+0x620>)
 8005e80:	f7fa fc54 	bl	800072c <__aeabi_ddiv>
 8005e84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e88:	f7fa f96e 	bl	8000168 <__aeabi_dsub>
 8005e8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e90:	9d06      	ldr	r5, [sp, #24]
 8005e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e96:	f7fa fdcf 	bl	8000a38 <__aeabi_d2iz>
 8005e9a:	9011      	str	r0, [sp, #68]	; 0x44
 8005e9c:	f7fa fab2 	bl	8000404 <__aeabi_i2d>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ea8:	f7fa f95e 	bl	8000168 <__aeabi_dsub>
 8005eac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eb2:	3330      	adds	r3, #48	; 0x30
 8005eb4:	f805 3b01 	strb.w	r3, [r5], #1
 8005eb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ebc:	f7fa fd7e 	bl	80009bc <__aeabi_dcmplt>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d163      	bne.n	8005f8c <_dtoa_r+0x5f4>
 8005ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ec8:	2000      	movs	r0, #0
 8005eca:	4937      	ldr	r1, [pc, #220]	; (8005fa8 <_dtoa_r+0x610>)
 8005ecc:	f7fa f94c 	bl	8000168 <__aeabi_dsub>
 8005ed0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ed4:	f7fa fd72 	bl	80009bc <__aeabi_dcmplt>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	f040 80b5 	bne.w	8006048 <_dtoa_r+0x6b0>
 8005ede:	9b06      	ldr	r3, [sp, #24]
 8005ee0:	1aeb      	subs	r3, r5, r3
 8005ee2:	429e      	cmp	r6, r3
 8005ee4:	f77f af7c 	ble.w	8005de0 <_dtoa_r+0x448>
 8005ee8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005eec:	2200      	movs	r2, #0
 8005eee:	4b2f      	ldr	r3, [pc, #188]	; (8005fac <_dtoa_r+0x614>)
 8005ef0:	f7fa faf2 	bl	80004d8 <__aeabi_dmul>
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005efe:	4b2b      	ldr	r3, [pc, #172]	; (8005fac <_dtoa_r+0x614>)
 8005f00:	f7fa faea 	bl	80004d8 <__aeabi_dmul>
 8005f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f08:	e7c3      	b.n	8005e92 <_dtoa_r+0x4fa>
 8005f0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f0e:	f7fa fae3 	bl	80004d8 <__aeabi_dmul>
 8005f12:	9b06      	ldr	r3, [sp, #24]
 8005f14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f18:	199d      	adds	r5, r3, r6
 8005f1a:	461e      	mov	r6, r3
 8005f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f20:	f7fa fd8a 	bl	8000a38 <__aeabi_d2iz>
 8005f24:	9011      	str	r0, [sp, #68]	; 0x44
 8005f26:	f7fa fa6d 	bl	8000404 <__aeabi_i2d>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f32:	f7fa f919 	bl	8000168 <__aeabi_dsub>
 8005f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f3c:	3330      	adds	r3, #48	; 0x30
 8005f3e:	f806 3b01 	strb.w	r3, [r6], #1
 8005f42:	42ae      	cmp	r6, r5
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	d124      	bne.n	8005f94 <_dtoa_r+0x5fc>
 8005f4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f4e:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <_dtoa_r+0x620>)
 8005f50:	f7fa f90c 	bl	800016c <__adddf3>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f5c:	f7fa fd4c 	bl	80009f8 <__aeabi_dcmpgt>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d171      	bne.n	8006048 <_dtoa_r+0x6b0>
 8005f64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f68:	2000      	movs	r0, #0
 8005f6a:	4913      	ldr	r1, [pc, #76]	; (8005fb8 <_dtoa_r+0x620>)
 8005f6c:	f7fa f8fc 	bl	8000168 <__aeabi_dsub>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f78:	f7fa fd20 	bl	80009bc <__aeabi_dcmplt>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f43f af2f 	beq.w	8005de0 <_dtoa_r+0x448>
 8005f82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f86:	1e6a      	subs	r2, r5, #1
 8005f88:	2b30      	cmp	r3, #48	; 0x30
 8005f8a:	d001      	beq.n	8005f90 <_dtoa_r+0x5f8>
 8005f8c:	46ba      	mov	sl, r7
 8005f8e:	e04a      	b.n	8006026 <_dtoa_r+0x68e>
 8005f90:	4615      	mov	r5, r2
 8005f92:	e7f6      	b.n	8005f82 <_dtoa_r+0x5ea>
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <_dtoa_r+0x614>)
 8005f96:	f7fa fa9f 	bl	80004d8 <__aeabi_dmul>
 8005f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f9e:	e7bd      	b.n	8005f1c <_dtoa_r+0x584>
 8005fa0:	08007008 	.word	0x08007008
 8005fa4:	08006fe0 	.word	0x08006fe0
 8005fa8:	3ff00000 	.word	0x3ff00000
 8005fac:	40240000 	.word	0x40240000
 8005fb0:	401c0000 	.word	0x401c0000
 8005fb4:	40140000 	.word	0x40140000
 8005fb8:	3fe00000 	.word	0x3fe00000
 8005fbc:	9d06      	ldr	r5, [sp, #24]
 8005fbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	4639      	mov	r1, r7
 8005fca:	f7fa fbaf 	bl	800072c <__aeabi_ddiv>
 8005fce:	f7fa fd33 	bl	8000a38 <__aeabi_d2iz>
 8005fd2:	4681      	mov	r9, r0
 8005fd4:	f7fa fa16 	bl	8000404 <__aeabi_i2d>
 8005fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fdc:	f7fa fa7c 	bl	80004d8 <__aeabi_dmul>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	f7fa f8be 	bl	8000168 <__aeabi_dsub>
 8005fec:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ff4:	9e06      	ldr	r6, [sp, #24]
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	1bae      	subs	r6, r5, r6
 8005ffa:	45b0      	cmp	r8, r6
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	d135      	bne.n	800606c <_dtoa_r+0x6d4>
 8006000:	f7fa f8b4 	bl	800016c <__adddf3>
 8006004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006008:	4606      	mov	r6, r0
 800600a:	460f      	mov	r7, r1
 800600c:	f7fa fcf4 	bl	80009f8 <__aeabi_dcmpgt>
 8006010:	b9c8      	cbnz	r0, 8006046 <_dtoa_r+0x6ae>
 8006012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	f7fa fcc5 	bl	80009a8 <__aeabi_dcmpeq>
 800601e:	b110      	cbz	r0, 8006026 <_dtoa_r+0x68e>
 8006020:	f019 0f01 	tst.w	r9, #1
 8006024:	d10f      	bne.n	8006046 <_dtoa_r+0x6ae>
 8006026:	4659      	mov	r1, fp
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fac6 	bl	80065ba <_Bfree>
 800602e:	2300      	movs	r3, #0
 8006030:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006032:	702b      	strb	r3, [r5, #0]
 8006034:	f10a 0301 	add.w	r3, sl, #1
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800603c:	2b00      	cmp	r3, #0
 800603e:	f43f acf3 	beq.w	8005a28 <_dtoa_r+0x90>
 8006042:	601d      	str	r5, [r3, #0]
 8006044:	e4f0      	b.n	8005a28 <_dtoa_r+0x90>
 8006046:	4657      	mov	r7, sl
 8006048:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800604c:	1e6b      	subs	r3, r5, #1
 800604e:	2a39      	cmp	r2, #57	; 0x39
 8006050:	d106      	bne.n	8006060 <_dtoa_r+0x6c8>
 8006052:	9a06      	ldr	r2, [sp, #24]
 8006054:	429a      	cmp	r2, r3
 8006056:	d107      	bne.n	8006068 <_dtoa_r+0x6d0>
 8006058:	2330      	movs	r3, #48	; 0x30
 800605a:	7013      	strb	r3, [r2, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	3701      	adds	r7, #1
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	3201      	adds	r2, #1
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	e791      	b.n	8005f8c <_dtoa_r+0x5f4>
 8006068:	461d      	mov	r5, r3
 800606a:	e7ed      	b.n	8006048 <_dtoa_r+0x6b0>
 800606c:	2200      	movs	r2, #0
 800606e:	4b99      	ldr	r3, [pc, #612]	; (80062d4 <_dtoa_r+0x93c>)
 8006070:	f7fa fa32 	bl	80004d8 <__aeabi_dmul>
 8006074:	2200      	movs	r2, #0
 8006076:	2300      	movs	r3, #0
 8006078:	4606      	mov	r6, r0
 800607a:	460f      	mov	r7, r1
 800607c:	f7fa fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8006080:	2800      	cmp	r0, #0
 8006082:	d09e      	beq.n	8005fc2 <_dtoa_r+0x62a>
 8006084:	e7cf      	b.n	8006026 <_dtoa_r+0x68e>
 8006086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006088:	2a00      	cmp	r2, #0
 800608a:	f000 8088 	beq.w	800619e <_dtoa_r+0x806>
 800608e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006090:	2a01      	cmp	r2, #1
 8006092:	dc6d      	bgt.n	8006170 <_dtoa_r+0x7d8>
 8006094:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006096:	2a00      	cmp	r2, #0
 8006098:	d066      	beq.n	8006168 <_dtoa_r+0x7d0>
 800609a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800609e:	464d      	mov	r5, r9
 80060a0:	9e08      	ldr	r6, [sp, #32]
 80060a2:	9a07      	ldr	r2, [sp, #28]
 80060a4:	2101      	movs	r1, #1
 80060a6:	441a      	add	r2, r3
 80060a8:	4620      	mov	r0, r4
 80060aa:	4499      	add	r9, r3
 80060ac:	9207      	str	r2, [sp, #28]
 80060ae:	f000 fb24 	bl	80066fa <__i2b>
 80060b2:	4607      	mov	r7, r0
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	dd0b      	ble.n	80060d0 <_dtoa_r+0x738>
 80060b8:	9b07      	ldr	r3, [sp, #28]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dd08      	ble.n	80060d0 <_dtoa_r+0x738>
 80060be:	42ab      	cmp	r3, r5
 80060c0:	bfa8      	it	ge
 80060c2:	462b      	movge	r3, r5
 80060c4:	9a07      	ldr	r2, [sp, #28]
 80060c6:	eba9 0903 	sub.w	r9, r9, r3
 80060ca:	1aed      	subs	r5, r5, r3
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	9307      	str	r3, [sp, #28]
 80060d0:	9b08      	ldr	r3, [sp, #32]
 80060d2:	b1eb      	cbz	r3, 8006110 <_dtoa_r+0x778>
 80060d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d065      	beq.n	80061a6 <_dtoa_r+0x80e>
 80060da:	b18e      	cbz	r6, 8006100 <_dtoa_r+0x768>
 80060dc:	4639      	mov	r1, r7
 80060de:	4632      	mov	r2, r6
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 fba9 	bl	8006838 <__pow5mult>
 80060e6:	465a      	mov	r2, fp
 80060e8:	4601      	mov	r1, r0
 80060ea:	4607      	mov	r7, r0
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 fb0d 	bl	800670c <__multiply>
 80060f2:	4659      	mov	r1, fp
 80060f4:	900a      	str	r0, [sp, #40]	; 0x28
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 fa5f 	bl	80065ba <_Bfree>
 80060fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060fe:	469b      	mov	fp, r3
 8006100:	9b08      	ldr	r3, [sp, #32]
 8006102:	1b9a      	subs	r2, r3, r6
 8006104:	d004      	beq.n	8006110 <_dtoa_r+0x778>
 8006106:	4659      	mov	r1, fp
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fb95 	bl	8006838 <__pow5mult>
 800610e:	4683      	mov	fp, r0
 8006110:	2101      	movs	r1, #1
 8006112:	4620      	mov	r0, r4
 8006114:	f000 faf1 	bl	80066fa <__i2b>
 8006118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800611a:	4606      	mov	r6, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 81c6 	beq.w	80064ae <_dtoa_r+0xb16>
 8006122:	461a      	mov	r2, r3
 8006124:	4601      	mov	r1, r0
 8006126:	4620      	mov	r0, r4
 8006128:	f000 fb86 	bl	8006838 <__pow5mult>
 800612c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800612e:	4606      	mov	r6, r0
 8006130:	2b01      	cmp	r3, #1
 8006132:	dc3e      	bgt.n	80061b2 <_dtoa_r+0x81a>
 8006134:	9b02      	ldr	r3, [sp, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d137      	bne.n	80061aa <_dtoa_r+0x812>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006140:	2b00      	cmp	r3, #0
 8006142:	d134      	bne.n	80061ae <_dtoa_r+0x816>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800614a:	0d1b      	lsrs	r3, r3, #20
 800614c:	051b      	lsls	r3, r3, #20
 800614e:	b12b      	cbz	r3, 800615c <_dtoa_r+0x7c4>
 8006150:	9b07      	ldr	r3, [sp, #28]
 8006152:	f109 0901 	add.w	r9, r9, #1
 8006156:	3301      	adds	r3, #1
 8006158:	9307      	str	r3, [sp, #28]
 800615a:	2301      	movs	r3, #1
 800615c:	9308      	str	r3, [sp, #32]
 800615e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006160:	2b00      	cmp	r3, #0
 8006162:	d128      	bne.n	80061b6 <_dtoa_r+0x81e>
 8006164:	2001      	movs	r0, #1
 8006166:	e02e      	b.n	80061c6 <_dtoa_r+0x82e>
 8006168:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800616a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800616e:	e796      	b.n	800609e <_dtoa_r+0x706>
 8006170:	9b08      	ldr	r3, [sp, #32]
 8006172:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8006176:	42b3      	cmp	r3, r6
 8006178:	bfb7      	itett	lt
 800617a:	9b08      	ldrlt	r3, [sp, #32]
 800617c:	1b9e      	subge	r6, r3, r6
 800617e:	1af2      	sublt	r2, r6, r3
 8006180:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006182:	bfbf      	itttt	lt
 8006184:	9608      	strlt	r6, [sp, #32]
 8006186:	189b      	addlt	r3, r3, r2
 8006188:	930c      	strlt	r3, [sp, #48]	; 0x30
 800618a:	2600      	movlt	r6, #0
 800618c:	f1b8 0f00 	cmp.w	r8, #0
 8006190:	bfb9      	ittee	lt
 8006192:	eba9 0508 	sublt.w	r5, r9, r8
 8006196:	2300      	movlt	r3, #0
 8006198:	464d      	movge	r5, r9
 800619a:	4643      	movge	r3, r8
 800619c:	e781      	b.n	80060a2 <_dtoa_r+0x70a>
 800619e:	9e08      	ldr	r6, [sp, #32]
 80061a0:	464d      	mov	r5, r9
 80061a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80061a4:	e786      	b.n	80060b4 <_dtoa_r+0x71c>
 80061a6:	9a08      	ldr	r2, [sp, #32]
 80061a8:	e7ad      	b.n	8006106 <_dtoa_r+0x76e>
 80061aa:	2300      	movs	r3, #0
 80061ac:	e7d6      	b.n	800615c <_dtoa_r+0x7c4>
 80061ae:	9b02      	ldr	r3, [sp, #8]
 80061b0:	e7d4      	b.n	800615c <_dtoa_r+0x7c4>
 80061b2:	2300      	movs	r3, #0
 80061b4:	9308      	str	r3, [sp, #32]
 80061b6:	6933      	ldr	r3, [r6, #16]
 80061b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061bc:	6918      	ldr	r0, [r3, #16]
 80061be:	f000 fa4e 	bl	800665e <__hi0bits>
 80061c2:	f1c0 0020 	rsb	r0, r0, #32
 80061c6:	9b07      	ldr	r3, [sp, #28]
 80061c8:	4418      	add	r0, r3
 80061ca:	f010 001f 	ands.w	r0, r0, #31
 80061ce:	d047      	beq.n	8006260 <_dtoa_r+0x8c8>
 80061d0:	f1c0 0320 	rsb	r3, r0, #32
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	dd3b      	ble.n	8006250 <_dtoa_r+0x8b8>
 80061d8:	9b07      	ldr	r3, [sp, #28]
 80061da:	f1c0 001c 	rsb	r0, r0, #28
 80061de:	4481      	add	r9, r0
 80061e0:	4405      	add	r5, r0
 80061e2:	4403      	add	r3, r0
 80061e4:	9307      	str	r3, [sp, #28]
 80061e6:	f1b9 0f00 	cmp.w	r9, #0
 80061ea:	dd05      	ble.n	80061f8 <_dtoa_r+0x860>
 80061ec:	4659      	mov	r1, fp
 80061ee:	464a      	mov	r2, r9
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 fb6f 	bl	80068d4 <__lshift>
 80061f6:	4683      	mov	fp, r0
 80061f8:	9b07      	ldr	r3, [sp, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	dd05      	ble.n	800620a <_dtoa_r+0x872>
 80061fe:	4631      	mov	r1, r6
 8006200:	461a      	mov	r2, r3
 8006202:	4620      	mov	r0, r4
 8006204:	f000 fb66 	bl	80068d4 <__lshift>
 8006208:	4606      	mov	r6, r0
 800620a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800620c:	b353      	cbz	r3, 8006264 <_dtoa_r+0x8cc>
 800620e:	4631      	mov	r1, r6
 8006210:	4658      	mov	r0, fp
 8006212:	f000 fbb3 	bl	800697c <__mcmp>
 8006216:	2800      	cmp	r0, #0
 8006218:	da24      	bge.n	8006264 <_dtoa_r+0x8cc>
 800621a:	2300      	movs	r3, #0
 800621c:	4659      	mov	r1, fp
 800621e:	220a      	movs	r2, #10
 8006220:	4620      	mov	r0, r4
 8006222:	f000 f9e1 	bl	80065e8 <__multadd>
 8006226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006228:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800622c:	4683      	mov	fp, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8144 	beq.w	80064bc <_dtoa_r+0xb24>
 8006234:	2300      	movs	r3, #0
 8006236:	4639      	mov	r1, r7
 8006238:	220a      	movs	r2, #10
 800623a:	4620      	mov	r0, r4
 800623c:	f000 f9d4 	bl	80065e8 <__multadd>
 8006240:	9b04      	ldr	r3, [sp, #16]
 8006242:	4607      	mov	r7, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	dc4d      	bgt.n	80062e4 <_dtoa_r+0x94c>
 8006248:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800624a:	2b02      	cmp	r3, #2
 800624c:	dd4a      	ble.n	80062e4 <_dtoa_r+0x94c>
 800624e:	e011      	b.n	8006274 <_dtoa_r+0x8dc>
 8006250:	d0c9      	beq.n	80061e6 <_dtoa_r+0x84e>
 8006252:	9a07      	ldr	r2, [sp, #28]
 8006254:	331c      	adds	r3, #28
 8006256:	441a      	add	r2, r3
 8006258:	4499      	add	r9, r3
 800625a:	441d      	add	r5, r3
 800625c:	4613      	mov	r3, r2
 800625e:	e7c1      	b.n	80061e4 <_dtoa_r+0x84c>
 8006260:	4603      	mov	r3, r0
 8006262:	e7f6      	b.n	8006252 <_dtoa_r+0x8ba>
 8006264:	f1b8 0f00 	cmp.w	r8, #0
 8006268:	dc36      	bgt.n	80062d8 <_dtoa_r+0x940>
 800626a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800626c:	2b02      	cmp	r3, #2
 800626e:	dd33      	ble.n	80062d8 <_dtoa_r+0x940>
 8006270:	f8cd 8010 	str.w	r8, [sp, #16]
 8006274:	9b04      	ldr	r3, [sp, #16]
 8006276:	b963      	cbnz	r3, 8006292 <_dtoa_r+0x8fa>
 8006278:	4631      	mov	r1, r6
 800627a:	2205      	movs	r2, #5
 800627c:	4620      	mov	r0, r4
 800627e:	f000 f9b3 	bl	80065e8 <__multadd>
 8006282:	4601      	mov	r1, r0
 8006284:	4606      	mov	r6, r0
 8006286:	4658      	mov	r0, fp
 8006288:	f000 fb78 	bl	800697c <__mcmp>
 800628c:	2800      	cmp	r0, #0
 800628e:	f73f add3 	bgt.w	8005e38 <_dtoa_r+0x4a0>
 8006292:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006294:	9d06      	ldr	r5, [sp, #24]
 8006296:	ea6f 0a03 	mvn.w	sl, r3
 800629a:	f04f 0900 	mov.w	r9, #0
 800629e:	4631      	mov	r1, r6
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 f98a 	bl	80065ba <_Bfree>
 80062a6:	2f00      	cmp	r7, #0
 80062a8:	f43f aebd 	beq.w	8006026 <_dtoa_r+0x68e>
 80062ac:	f1b9 0f00 	cmp.w	r9, #0
 80062b0:	d005      	beq.n	80062be <_dtoa_r+0x926>
 80062b2:	45b9      	cmp	r9, r7
 80062b4:	d003      	beq.n	80062be <_dtoa_r+0x926>
 80062b6:	4649      	mov	r1, r9
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 f97e 	bl	80065ba <_Bfree>
 80062be:	4639      	mov	r1, r7
 80062c0:	4620      	mov	r0, r4
 80062c2:	f000 f97a 	bl	80065ba <_Bfree>
 80062c6:	e6ae      	b.n	8006026 <_dtoa_r+0x68e>
 80062c8:	2600      	movs	r6, #0
 80062ca:	4637      	mov	r7, r6
 80062cc:	e7e1      	b.n	8006292 <_dtoa_r+0x8fa>
 80062ce:	46ba      	mov	sl, r7
 80062d0:	4637      	mov	r7, r6
 80062d2:	e5b1      	b.n	8005e38 <_dtoa_r+0x4a0>
 80062d4:	40240000 	.word	0x40240000
 80062d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062da:	f8cd 8010 	str.w	r8, [sp, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 80f3 	beq.w	80064ca <_dtoa_r+0xb32>
 80062e4:	2d00      	cmp	r5, #0
 80062e6:	dd05      	ble.n	80062f4 <_dtoa_r+0x95c>
 80062e8:	4639      	mov	r1, r7
 80062ea:	462a      	mov	r2, r5
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 faf1 	bl	80068d4 <__lshift>
 80062f2:	4607      	mov	r7, r0
 80062f4:	9b08      	ldr	r3, [sp, #32]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d04c      	beq.n	8006394 <_dtoa_r+0x9fc>
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 f928 	bl	8006552 <_Balloc>
 8006302:	4605      	mov	r5, r0
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	f107 010c 	add.w	r1, r7, #12
 800630a:	3202      	adds	r2, #2
 800630c:	0092      	lsls	r2, r2, #2
 800630e:	300c      	adds	r0, #12
 8006310:	f000 f912 	bl	8006538 <memcpy>
 8006314:	2201      	movs	r2, #1
 8006316:	4629      	mov	r1, r5
 8006318:	4620      	mov	r0, r4
 800631a:	f000 fadb 	bl	80068d4 <__lshift>
 800631e:	46b9      	mov	r9, r7
 8006320:	4607      	mov	r7, r0
 8006322:	9b06      	ldr	r3, [sp, #24]
 8006324:	9307      	str	r3, [sp, #28]
 8006326:	9b02      	ldr	r3, [sp, #8]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	9308      	str	r3, [sp, #32]
 800632e:	4631      	mov	r1, r6
 8006330:	4658      	mov	r0, fp
 8006332:	f7ff faa1 	bl	8005878 <quorem>
 8006336:	4649      	mov	r1, r9
 8006338:	4605      	mov	r5, r0
 800633a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800633e:	4658      	mov	r0, fp
 8006340:	f000 fb1c 	bl	800697c <__mcmp>
 8006344:	463a      	mov	r2, r7
 8006346:	9002      	str	r0, [sp, #8]
 8006348:	4631      	mov	r1, r6
 800634a:	4620      	mov	r0, r4
 800634c:	f000 fb30 	bl	80069b0 <__mdiff>
 8006350:	68c3      	ldr	r3, [r0, #12]
 8006352:	4602      	mov	r2, r0
 8006354:	bb03      	cbnz	r3, 8006398 <_dtoa_r+0xa00>
 8006356:	4601      	mov	r1, r0
 8006358:	9009      	str	r0, [sp, #36]	; 0x24
 800635a:	4658      	mov	r0, fp
 800635c:	f000 fb0e 	bl	800697c <__mcmp>
 8006360:	4603      	mov	r3, r0
 8006362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006364:	4611      	mov	r1, r2
 8006366:	4620      	mov	r0, r4
 8006368:	9309      	str	r3, [sp, #36]	; 0x24
 800636a:	f000 f926 	bl	80065ba <_Bfree>
 800636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006370:	b9a3      	cbnz	r3, 800639c <_dtoa_r+0xa04>
 8006372:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006374:	b992      	cbnz	r2, 800639c <_dtoa_r+0xa04>
 8006376:	9a08      	ldr	r2, [sp, #32]
 8006378:	b982      	cbnz	r2, 800639c <_dtoa_r+0xa04>
 800637a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800637e:	d029      	beq.n	80063d4 <_dtoa_r+0xa3c>
 8006380:	9b02      	ldr	r3, [sp, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	dd01      	ble.n	800638a <_dtoa_r+0x9f2>
 8006386:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800638a:	9b07      	ldr	r3, [sp, #28]
 800638c:	1c5d      	adds	r5, r3, #1
 800638e:	f883 8000 	strb.w	r8, [r3]
 8006392:	e784      	b.n	800629e <_dtoa_r+0x906>
 8006394:	4638      	mov	r0, r7
 8006396:	e7c2      	b.n	800631e <_dtoa_r+0x986>
 8006398:	2301      	movs	r3, #1
 800639a:	e7e3      	b.n	8006364 <_dtoa_r+0x9cc>
 800639c:	9a02      	ldr	r2, [sp, #8]
 800639e:	2a00      	cmp	r2, #0
 80063a0:	db04      	blt.n	80063ac <_dtoa_r+0xa14>
 80063a2:	d123      	bne.n	80063ec <_dtoa_r+0xa54>
 80063a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80063a6:	bb0a      	cbnz	r2, 80063ec <_dtoa_r+0xa54>
 80063a8:	9a08      	ldr	r2, [sp, #32]
 80063aa:	b9fa      	cbnz	r2, 80063ec <_dtoa_r+0xa54>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	ddec      	ble.n	800638a <_dtoa_r+0x9f2>
 80063b0:	4659      	mov	r1, fp
 80063b2:	2201      	movs	r2, #1
 80063b4:	4620      	mov	r0, r4
 80063b6:	f000 fa8d 	bl	80068d4 <__lshift>
 80063ba:	4631      	mov	r1, r6
 80063bc:	4683      	mov	fp, r0
 80063be:	f000 fadd 	bl	800697c <__mcmp>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	dc03      	bgt.n	80063ce <_dtoa_r+0xa36>
 80063c6:	d1e0      	bne.n	800638a <_dtoa_r+0x9f2>
 80063c8:	f018 0f01 	tst.w	r8, #1
 80063cc:	d0dd      	beq.n	800638a <_dtoa_r+0x9f2>
 80063ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063d2:	d1d8      	bne.n	8006386 <_dtoa_r+0x9ee>
 80063d4:	9b07      	ldr	r3, [sp, #28]
 80063d6:	9a07      	ldr	r2, [sp, #28]
 80063d8:	1c5d      	adds	r5, r3, #1
 80063da:	2339      	movs	r3, #57	; 0x39
 80063dc:	7013      	strb	r3, [r2, #0]
 80063de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063e2:	1e6a      	subs	r2, r5, #1
 80063e4:	2b39      	cmp	r3, #57	; 0x39
 80063e6:	d04d      	beq.n	8006484 <_dtoa_r+0xaec>
 80063e8:	3301      	adds	r3, #1
 80063ea:	e052      	b.n	8006492 <_dtoa_r+0xafa>
 80063ec:	9a07      	ldr	r2, [sp, #28]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f102 0501 	add.w	r5, r2, #1
 80063f4:	dd06      	ble.n	8006404 <_dtoa_r+0xa6c>
 80063f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063fa:	d0eb      	beq.n	80063d4 <_dtoa_r+0xa3c>
 80063fc:	f108 0801 	add.w	r8, r8, #1
 8006400:	9b07      	ldr	r3, [sp, #28]
 8006402:	e7c4      	b.n	800638e <_dtoa_r+0x9f6>
 8006404:	9b06      	ldr	r3, [sp, #24]
 8006406:	9a04      	ldr	r2, [sp, #16]
 8006408:	1aeb      	subs	r3, r5, r3
 800640a:	4293      	cmp	r3, r2
 800640c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006410:	d021      	beq.n	8006456 <_dtoa_r+0xabe>
 8006412:	4659      	mov	r1, fp
 8006414:	2300      	movs	r3, #0
 8006416:	220a      	movs	r2, #10
 8006418:	4620      	mov	r0, r4
 800641a:	f000 f8e5 	bl	80065e8 <__multadd>
 800641e:	45b9      	cmp	r9, r7
 8006420:	4683      	mov	fp, r0
 8006422:	f04f 0300 	mov.w	r3, #0
 8006426:	f04f 020a 	mov.w	r2, #10
 800642a:	4649      	mov	r1, r9
 800642c:	4620      	mov	r0, r4
 800642e:	d105      	bne.n	800643c <_dtoa_r+0xaa4>
 8006430:	f000 f8da 	bl	80065e8 <__multadd>
 8006434:	4681      	mov	r9, r0
 8006436:	4607      	mov	r7, r0
 8006438:	9507      	str	r5, [sp, #28]
 800643a:	e778      	b.n	800632e <_dtoa_r+0x996>
 800643c:	f000 f8d4 	bl	80065e8 <__multadd>
 8006440:	4639      	mov	r1, r7
 8006442:	4681      	mov	r9, r0
 8006444:	2300      	movs	r3, #0
 8006446:	220a      	movs	r2, #10
 8006448:	4620      	mov	r0, r4
 800644a:	f000 f8cd 	bl	80065e8 <__multadd>
 800644e:	4607      	mov	r7, r0
 8006450:	e7f2      	b.n	8006438 <_dtoa_r+0xaa0>
 8006452:	f04f 0900 	mov.w	r9, #0
 8006456:	4659      	mov	r1, fp
 8006458:	2201      	movs	r2, #1
 800645a:	4620      	mov	r0, r4
 800645c:	f000 fa3a 	bl	80068d4 <__lshift>
 8006460:	4631      	mov	r1, r6
 8006462:	4683      	mov	fp, r0
 8006464:	f000 fa8a 	bl	800697c <__mcmp>
 8006468:	2800      	cmp	r0, #0
 800646a:	dcb8      	bgt.n	80063de <_dtoa_r+0xa46>
 800646c:	d102      	bne.n	8006474 <_dtoa_r+0xadc>
 800646e:	f018 0f01 	tst.w	r8, #1
 8006472:	d1b4      	bne.n	80063de <_dtoa_r+0xa46>
 8006474:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006478:	1e6a      	subs	r2, r5, #1
 800647a:	2b30      	cmp	r3, #48	; 0x30
 800647c:	f47f af0f 	bne.w	800629e <_dtoa_r+0x906>
 8006480:	4615      	mov	r5, r2
 8006482:	e7f7      	b.n	8006474 <_dtoa_r+0xadc>
 8006484:	9b06      	ldr	r3, [sp, #24]
 8006486:	4293      	cmp	r3, r2
 8006488:	d105      	bne.n	8006496 <_dtoa_r+0xafe>
 800648a:	2331      	movs	r3, #49	; 0x31
 800648c:	9a06      	ldr	r2, [sp, #24]
 800648e:	f10a 0a01 	add.w	sl, sl, #1
 8006492:	7013      	strb	r3, [r2, #0]
 8006494:	e703      	b.n	800629e <_dtoa_r+0x906>
 8006496:	4615      	mov	r5, r2
 8006498:	e7a1      	b.n	80063de <_dtoa_r+0xa46>
 800649a:	4b17      	ldr	r3, [pc, #92]	; (80064f8 <_dtoa_r+0xb60>)
 800649c:	f7ff bae1 	b.w	8005a62 <_dtoa_r+0xca>
 80064a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f47f aabb 	bne.w	8005a1e <_dtoa_r+0x86>
 80064a8:	4b14      	ldr	r3, [pc, #80]	; (80064fc <_dtoa_r+0xb64>)
 80064aa:	f7ff bada 	b.w	8005a62 <_dtoa_r+0xca>
 80064ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	f77f ae3f 	ble.w	8006134 <_dtoa_r+0x79c>
 80064b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064b8:	9308      	str	r3, [sp, #32]
 80064ba:	e653      	b.n	8006164 <_dtoa_r+0x7cc>
 80064bc:	9b04      	ldr	r3, [sp, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dc03      	bgt.n	80064ca <_dtoa_r+0xb32>
 80064c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	f73f aed5 	bgt.w	8006274 <_dtoa_r+0x8dc>
 80064ca:	9d06      	ldr	r5, [sp, #24]
 80064cc:	4631      	mov	r1, r6
 80064ce:	4658      	mov	r0, fp
 80064d0:	f7ff f9d2 	bl	8005878 <quorem>
 80064d4:	9b06      	ldr	r3, [sp, #24]
 80064d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80064da:	f805 8b01 	strb.w	r8, [r5], #1
 80064de:	9a04      	ldr	r2, [sp, #16]
 80064e0:	1aeb      	subs	r3, r5, r3
 80064e2:	429a      	cmp	r2, r3
 80064e4:	ddb5      	ble.n	8006452 <_dtoa_r+0xaba>
 80064e6:	4659      	mov	r1, fp
 80064e8:	2300      	movs	r3, #0
 80064ea:	220a      	movs	r2, #10
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 f87b 	bl	80065e8 <__multadd>
 80064f2:	4683      	mov	fp, r0
 80064f4:	e7ea      	b.n	80064cc <_dtoa_r+0xb34>
 80064f6:	bf00      	nop
 80064f8:	08006fae 	.word	0x08006fae
 80064fc:	08006fd2 	.word	0x08006fd2

08006500 <_localeconv_r>:
 8006500:	4b04      	ldr	r3, [pc, #16]	; (8006514 <_localeconv_r+0x14>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6a18      	ldr	r0, [r3, #32]
 8006506:	4b04      	ldr	r3, [pc, #16]	; (8006518 <_localeconv_r+0x18>)
 8006508:	2800      	cmp	r0, #0
 800650a:	bf08      	it	eq
 800650c:	4618      	moveq	r0, r3
 800650e:	30f0      	adds	r0, #240	; 0xf0
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000180 	.word	0x20000180
 8006518:	200001e4 	.word	0x200001e4

0800651c <memchr>:
 800651c:	b510      	push	{r4, lr}
 800651e:	b2c9      	uxtb	r1, r1
 8006520:	4402      	add	r2, r0
 8006522:	4290      	cmp	r0, r2
 8006524:	4603      	mov	r3, r0
 8006526:	d101      	bne.n	800652c <memchr+0x10>
 8006528:	2300      	movs	r3, #0
 800652a:	e003      	b.n	8006534 <memchr+0x18>
 800652c:	781c      	ldrb	r4, [r3, #0]
 800652e:	3001      	adds	r0, #1
 8006530:	428c      	cmp	r4, r1
 8006532:	d1f6      	bne.n	8006522 <memchr+0x6>
 8006534:	4618      	mov	r0, r3
 8006536:	bd10      	pop	{r4, pc}

08006538 <memcpy>:
 8006538:	b510      	push	{r4, lr}
 800653a:	1e43      	subs	r3, r0, #1
 800653c:	440a      	add	r2, r1
 800653e:	4291      	cmp	r1, r2
 8006540:	d100      	bne.n	8006544 <memcpy+0xc>
 8006542:	bd10      	pop	{r4, pc}
 8006544:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006548:	f803 4f01 	strb.w	r4, [r3, #1]!
 800654c:	e7f7      	b.n	800653e <memcpy+0x6>

0800654e <__malloc_lock>:
 800654e:	4770      	bx	lr

08006550 <__malloc_unlock>:
 8006550:	4770      	bx	lr

08006552 <_Balloc>:
 8006552:	b570      	push	{r4, r5, r6, lr}
 8006554:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006556:	4604      	mov	r4, r0
 8006558:	460e      	mov	r6, r1
 800655a:	b93d      	cbnz	r5, 800656c <_Balloc+0x1a>
 800655c:	2010      	movs	r0, #16
 800655e:	f7fe fc09 	bl	8004d74 <malloc>
 8006562:	6260      	str	r0, [r4, #36]	; 0x24
 8006564:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006568:	6005      	str	r5, [r0, #0]
 800656a:	60c5      	str	r5, [r0, #12]
 800656c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800656e:	68eb      	ldr	r3, [r5, #12]
 8006570:	b183      	cbz	r3, 8006594 <_Balloc+0x42>
 8006572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800657a:	b9b8      	cbnz	r0, 80065ac <_Balloc+0x5a>
 800657c:	2101      	movs	r1, #1
 800657e:	fa01 f506 	lsl.w	r5, r1, r6
 8006582:	1d6a      	adds	r2, r5, #5
 8006584:	0092      	lsls	r2, r2, #2
 8006586:	4620      	mov	r0, r4
 8006588:	f000 fabf 	bl	8006b0a <_calloc_r>
 800658c:	b160      	cbz	r0, 80065a8 <_Balloc+0x56>
 800658e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006592:	e00e      	b.n	80065b2 <_Balloc+0x60>
 8006594:	2221      	movs	r2, #33	; 0x21
 8006596:	2104      	movs	r1, #4
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fab6 	bl	8006b0a <_calloc_r>
 800659e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065a0:	60e8      	str	r0, [r5, #12]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e4      	bne.n	8006572 <_Balloc+0x20>
 80065a8:	2000      	movs	r0, #0
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	6802      	ldr	r2, [r0, #0]
 80065ae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80065b2:	2300      	movs	r3, #0
 80065b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065b8:	e7f7      	b.n	80065aa <_Balloc+0x58>

080065ba <_Bfree>:
 80065ba:	b570      	push	{r4, r5, r6, lr}
 80065bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065be:	4606      	mov	r6, r0
 80065c0:	460d      	mov	r5, r1
 80065c2:	b93c      	cbnz	r4, 80065d4 <_Bfree+0x1a>
 80065c4:	2010      	movs	r0, #16
 80065c6:	f7fe fbd5 	bl	8004d74 <malloc>
 80065ca:	6270      	str	r0, [r6, #36]	; 0x24
 80065cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065d0:	6004      	str	r4, [r0, #0]
 80065d2:	60c4      	str	r4, [r0, #12]
 80065d4:	b13d      	cbz	r5, 80065e6 <_Bfree+0x2c>
 80065d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065d8:	686a      	ldr	r2, [r5, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065e0:	6029      	str	r1, [r5, #0]
 80065e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80065e6:	bd70      	pop	{r4, r5, r6, pc}

080065e8 <__multadd>:
 80065e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ec:	461f      	mov	r7, r3
 80065ee:	4606      	mov	r6, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	2300      	movs	r3, #0
 80065f4:	690d      	ldr	r5, [r1, #16]
 80065f6:	f101 0c14 	add.w	ip, r1, #20
 80065fa:	f8dc 0000 	ldr.w	r0, [ip]
 80065fe:	3301      	adds	r3, #1
 8006600:	b281      	uxth	r1, r0
 8006602:	fb02 7101 	mla	r1, r2, r1, r7
 8006606:	0c00      	lsrs	r0, r0, #16
 8006608:	0c0f      	lsrs	r7, r1, #16
 800660a:	fb02 7000 	mla	r0, r2, r0, r7
 800660e:	b289      	uxth	r1, r1
 8006610:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006614:	429d      	cmp	r5, r3
 8006616:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800661a:	f84c 1b04 	str.w	r1, [ip], #4
 800661e:	dcec      	bgt.n	80065fa <__multadd+0x12>
 8006620:	b1d7      	cbz	r7, 8006658 <__multadd+0x70>
 8006622:	68a3      	ldr	r3, [r4, #8]
 8006624:	42ab      	cmp	r3, r5
 8006626:	dc12      	bgt.n	800664e <__multadd+0x66>
 8006628:	6861      	ldr	r1, [r4, #4]
 800662a:	4630      	mov	r0, r6
 800662c:	3101      	adds	r1, #1
 800662e:	f7ff ff90 	bl	8006552 <_Balloc>
 8006632:	4680      	mov	r8, r0
 8006634:	6922      	ldr	r2, [r4, #16]
 8006636:	f104 010c 	add.w	r1, r4, #12
 800663a:	3202      	adds	r2, #2
 800663c:	0092      	lsls	r2, r2, #2
 800663e:	300c      	adds	r0, #12
 8006640:	f7ff ff7a 	bl	8006538 <memcpy>
 8006644:	4621      	mov	r1, r4
 8006646:	4630      	mov	r0, r6
 8006648:	f7ff ffb7 	bl	80065ba <_Bfree>
 800664c:	4644      	mov	r4, r8
 800664e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006652:	3501      	adds	r5, #1
 8006654:	615f      	str	r7, [r3, #20]
 8006656:	6125      	str	r5, [r4, #16]
 8006658:	4620      	mov	r0, r4
 800665a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800665e <__hi0bits>:
 800665e:	0c02      	lsrs	r2, r0, #16
 8006660:	0412      	lsls	r2, r2, #16
 8006662:	4603      	mov	r3, r0
 8006664:	b9b2      	cbnz	r2, 8006694 <__hi0bits+0x36>
 8006666:	0403      	lsls	r3, r0, #16
 8006668:	2010      	movs	r0, #16
 800666a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800666e:	bf04      	itt	eq
 8006670:	021b      	lsleq	r3, r3, #8
 8006672:	3008      	addeq	r0, #8
 8006674:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006678:	bf04      	itt	eq
 800667a:	011b      	lsleq	r3, r3, #4
 800667c:	3004      	addeq	r0, #4
 800667e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006682:	bf04      	itt	eq
 8006684:	009b      	lsleq	r3, r3, #2
 8006686:	3002      	addeq	r0, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	db06      	blt.n	800669a <__hi0bits+0x3c>
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	d503      	bpl.n	8006698 <__hi0bits+0x3a>
 8006690:	3001      	adds	r0, #1
 8006692:	4770      	bx	lr
 8006694:	2000      	movs	r0, #0
 8006696:	e7e8      	b.n	800666a <__hi0bits+0xc>
 8006698:	2020      	movs	r0, #32
 800669a:	4770      	bx	lr

0800669c <__lo0bits>:
 800669c:	6803      	ldr	r3, [r0, #0]
 800669e:	4601      	mov	r1, r0
 80066a0:	f013 0207 	ands.w	r2, r3, #7
 80066a4:	d00b      	beq.n	80066be <__lo0bits+0x22>
 80066a6:	07da      	lsls	r2, r3, #31
 80066a8:	d423      	bmi.n	80066f2 <__lo0bits+0x56>
 80066aa:	0798      	lsls	r0, r3, #30
 80066ac:	bf49      	itett	mi
 80066ae:	085b      	lsrmi	r3, r3, #1
 80066b0:	089b      	lsrpl	r3, r3, #2
 80066b2:	2001      	movmi	r0, #1
 80066b4:	600b      	strmi	r3, [r1, #0]
 80066b6:	bf5c      	itt	pl
 80066b8:	600b      	strpl	r3, [r1, #0]
 80066ba:	2002      	movpl	r0, #2
 80066bc:	4770      	bx	lr
 80066be:	b298      	uxth	r0, r3
 80066c0:	b9a8      	cbnz	r0, 80066ee <__lo0bits+0x52>
 80066c2:	2010      	movs	r0, #16
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066ca:	bf04      	itt	eq
 80066cc:	0a1b      	lsreq	r3, r3, #8
 80066ce:	3008      	addeq	r0, #8
 80066d0:	071a      	lsls	r2, r3, #28
 80066d2:	bf04      	itt	eq
 80066d4:	091b      	lsreq	r3, r3, #4
 80066d6:	3004      	addeq	r0, #4
 80066d8:	079a      	lsls	r2, r3, #30
 80066da:	bf04      	itt	eq
 80066dc:	089b      	lsreq	r3, r3, #2
 80066de:	3002      	addeq	r0, #2
 80066e0:	07da      	lsls	r2, r3, #31
 80066e2:	d402      	bmi.n	80066ea <__lo0bits+0x4e>
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	d006      	beq.n	80066f6 <__lo0bits+0x5a>
 80066e8:	3001      	adds	r0, #1
 80066ea:	600b      	str	r3, [r1, #0]
 80066ec:	4770      	bx	lr
 80066ee:	4610      	mov	r0, r2
 80066f0:	e7e9      	b.n	80066c6 <__lo0bits+0x2a>
 80066f2:	2000      	movs	r0, #0
 80066f4:	4770      	bx	lr
 80066f6:	2020      	movs	r0, #32
 80066f8:	4770      	bx	lr

080066fa <__i2b>:
 80066fa:	b510      	push	{r4, lr}
 80066fc:	460c      	mov	r4, r1
 80066fe:	2101      	movs	r1, #1
 8006700:	f7ff ff27 	bl	8006552 <_Balloc>
 8006704:	2201      	movs	r2, #1
 8006706:	6144      	str	r4, [r0, #20]
 8006708:	6102      	str	r2, [r0, #16]
 800670a:	bd10      	pop	{r4, pc}

0800670c <__multiply>:
 800670c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	4614      	mov	r4, r2
 8006712:	690a      	ldr	r2, [r1, #16]
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	4688      	mov	r8, r1
 8006718:	429a      	cmp	r2, r3
 800671a:	bfbe      	ittt	lt
 800671c:	460b      	movlt	r3, r1
 800671e:	46a0      	movlt	r8, r4
 8006720:	461c      	movlt	r4, r3
 8006722:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006726:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800672a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800672e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006732:	eb07 0609 	add.w	r6, r7, r9
 8006736:	42b3      	cmp	r3, r6
 8006738:	bfb8      	it	lt
 800673a:	3101      	addlt	r1, #1
 800673c:	f7ff ff09 	bl	8006552 <_Balloc>
 8006740:	f100 0514 	add.w	r5, r0, #20
 8006744:	462b      	mov	r3, r5
 8006746:	2200      	movs	r2, #0
 8006748:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800674c:	4573      	cmp	r3, lr
 800674e:	d316      	bcc.n	800677e <__multiply+0x72>
 8006750:	f104 0214 	add.w	r2, r4, #20
 8006754:	f108 0114 	add.w	r1, r8, #20
 8006758:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800675c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	9201      	str	r2, [sp, #4]
 8006766:	4293      	cmp	r3, r2
 8006768:	d80c      	bhi.n	8006784 <__multiply+0x78>
 800676a:	2e00      	cmp	r6, #0
 800676c:	dd03      	ble.n	8006776 <__multiply+0x6a>
 800676e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006772:	2b00      	cmp	r3, #0
 8006774:	d05d      	beq.n	8006832 <__multiply+0x126>
 8006776:	6106      	str	r6, [r0, #16]
 8006778:	b003      	add	sp, #12
 800677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677e:	f843 2b04 	str.w	r2, [r3], #4
 8006782:	e7e3      	b.n	800674c <__multiply+0x40>
 8006784:	f8b2 b000 	ldrh.w	fp, [r2]
 8006788:	f1bb 0f00 	cmp.w	fp, #0
 800678c:	d023      	beq.n	80067d6 <__multiply+0xca>
 800678e:	4689      	mov	r9, r1
 8006790:	46ac      	mov	ip, r5
 8006792:	f04f 0800 	mov.w	r8, #0
 8006796:	f859 4b04 	ldr.w	r4, [r9], #4
 800679a:	f8dc a000 	ldr.w	sl, [ip]
 800679e:	b2a3      	uxth	r3, r4
 80067a0:	fa1f fa8a 	uxth.w	sl, sl
 80067a4:	fb0b a303 	mla	r3, fp, r3, sl
 80067a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067ac:	f8dc 4000 	ldr.w	r4, [ip]
 80067b0:	4443      	add	r3, r8
 80067b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067b6:	fb0b 840a 	mla	r4, fp, sl, r8
 80067ba:	46e2      	mov	sl, ip
 80067bc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80067c6:	454f      	cmp	r7, r9
 80067c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067cc:	f84a 3b04 	str.w	r3, [sl], #4
 80067d0:	d82b      	bhi.n	800682a <__multiply+0x11e>
 80067d2:	f8cc 8004 	str.w	r8, [ip, #4]
 80067d6:	9b01      	ldr	r3, [sp, #4]
 80067d8:	3204      	adds	r2, #4
 80067da:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80067de:	f1ba 0f00 	cmp.w	sl, #0
 80067e2:	d020      	beq.n	8006826 <__multiply+0x11a>
 80067e4:	4689      	mov	r9, r1
 80067e6:	46a8      	mov	r8, r5
 80067e8:	f04f 0b00 	mov.w	fp, #0
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	f8b9 c000 	ldrh.w	ip, [r9]
 80067f2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	fb0a 440c 	mla	r4, sl, ip, r4
 80067fc:	46c4      	mov	ip, r8
 80067fe:	445c      	add	r4, fp
 8006800:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006804:	f84c 3b04 	str.w	r3, [ip], #4
 8006808:	f859 3b04 	ldr.w	r3, [r9], #4
 800680c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006810:	0c1b      	lsrs	r3, r3, #16
 8006812:	fb0a b303 	mla	r3, sl, r3, fp
 8006816:	454f      	cmp	r7, r9
 8006818:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800681c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006820:	d805      	bhi.n	800682e <__multiply+0x122>
 8006822:	f8c8 3004 	str.w	r3, [r8, #4]
 8006826:	3504      	adds	r5, #4
 8006828:	e79b      	b.n	8006762 <__multiply+0x56>
 800682a:	46d4      	mov	ip, sl
 800682c:	e7b3      	b.n	8006796 <__multiply+0x8a>
 800682e:	46e0      	mov	r8, ip
 8006830:	e7dd      	b.n	80067ee <__multiply+0xe2>
 8006832:	3e01      	subs	r6, #1
 8006834:	e799      	b.n	800676a <__multiply+0x5e>
	...

08006838 <__pow5mult>:
 8006838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800683c:	4615      	mov	r5, r2
 800683e:	f012 0203 	ands.w	r2, r2, #3
 8006842:	4606      	mov	r6, r0
 8006844:	460f      	mov	r7, r1
 8006846:	d007      	beq.n	8006858 <__pow5mult+0x20>
 8006848:	4c21      	ldr	r4, [pc, #132]	; (80068d0 <__pow5mult+0x98>)
 800684a:	3a01      	subs	r2, #1
 800684c:	2300      	movs	r3, #0
 800684e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006852:	f7ff fec9 	bl	80065e8 <__multadd>
 8006856:	4607      	mov	r7, r0
 8006858:	10ad      	asrs	r5, r5, #2
 800685a:	d035      	beq.n	80068c8 <__pow5mult+0x90>
 800685c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800685e:	b93c      	cbnz	r4, 8006870 <__pow5mult+0x38>
 8006860:	2010      	movs	r0, #16
 8006862:	f7fe fa87 	bl	8004d74 <malloc>
 8006866:	6270      	str	r0, [r6, #36]	; 0x24
 8006868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800686c:	6004      	str	r4, [r0, #0]
 800686e:	60c4      	str	r4, [r0, #12]
 8006870:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006878:	b94c      	cbnz	r4, 800688e <__pow5mult+0x56>
 800687a:	f240 2171 	movw	r1, #625	; 0x271
 800687e:	4630      	mov	r0, r6
 8006880:	f7ff ff3b 	bl	80066fa <__i2b>
 8006884:	2300      	movs	r3, #0
 8006886:	4604      	mov	r4, r0
 8006888:	f8c8 0008 	str.w	r0, [r8, #8]
 800688c:	6003      	str	r3, [r0, #0]
 800688e:	f04f 0800 	mov.w	r8, #0
 8006892:	07eb      	lsls	r3, r5, #31
 8006894:	d50a      	bpl.n	80068ac <__pow5mult+0x74>
 8006896:	4639      	mov	r1, r7
 8006898:	4622      	mov	r2, r4
 800689a:	4630      	mov	r0, r6
 800689c:	f7ff ff36 	bl	800670c <__multiply>
 80068a0:	4681      	mov	r9, r0
 80068a2:	4639      	mov	r1, r7
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7ff fe88 	bl	80065ba <_Bfree>
 80068aa:	464f      	mov	r7, r9
 80068ac:	106d      	asrs	r5, r5, #1
 80068ae:	d00b      	beq.n	80068c8 <__pow5mult+0x90>
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	b938      	cbnz	r0, 80068c4 <__pow5mult+0x8c>
 80068b4:	4622      	mov	r2, r4
 80068b6:	4621      	mov	r1, r4
 80068b8:	4630      	mov	r0, r6
 80068ba:	f7ff ff27 	bl	800670c <__multiply>
 80068be:	6020      	str	r0, [r4, #0]
 80068c0:	f8c0 8000 	str.w	r8, [r0]
 80068c4:	4604      	mov	r4, r0
 80068c6:	e7e4      	b.n	8006892 <__pow5mult+0x5a>
 80068c8:	4638      	mov	r0, r7
 80068ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ce:	bf00      	nop
 80068d0:	080070d0 	.word	0x080070d0

080068d4 <__lshift>:
 80068d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d8:	460c      	mov	r4, r1
 80068da:	4607      	mov	r7, r0
 80068dc:	4616      	mov	r6, r2
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068e4:	eb0a 0903 	add.w	r9, sl, r3
 80068e8:	6849      	ldr	r1, [r1, #4]
 80068ea:	68a3      	ldr	r3, [r4, #8]
 80068ec:	f109 0501 	add.w	r5, r9, #1
 80068f0:	42ab      	cmp	r3, r5
 80068f2:	db32      	blt.n	800695a <__lshift+0x86>
 80068f4:	4638      	mov	r0, r7
 80068f6:	f7ff fe2c 	bl	8006552 <_Balloc>
 80068fa:	2300      	movs	r3, #0
 80068fc:	4680      	mov	r8, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	f100 0114 	add.w	r1, r0, #20
 8006904:	4553      	cmp	r3, sl
 8006906:	db2b      	blt.n	8006960 <__lshift+0x8c>
 8006908:	6920      	ldr	r0, [r4, #16]
 800690a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800690e:	f104 0314 	add.w	r3, r4, #20
 8006912:	f016 021f 	ands.w	r2, r6, #31
 8006916:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800691a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800691e:	d025      	beq.n	800696c <__lshift+0x98>
 8006920:	2000      	movs	r0, #0
 8006922:	f1c2 0e20 	rsb	lr, r2, #32
 8006926:	468a      	mov	sl, r1
 8006928:	681e      	ldr	r6, [r3, #0]
 800692a:	4096      	lsls	r6, r2
 800692c:	4330      	orrs	r0, r6
 800692e:	f84a 0b04 	str.w	r0, [sl], #4
 8006932:	f853 0b04 	ldr.w	r0, [r3], #4
 8006936:	459c      	cmp	ip, r3
 8006938:	fa20 f00e 	lsr.w	r0, r0, lr
 800693c:	d814      	bhi.n	8006968 <__lshift+0x94>
 800693e:	6048      	str	r0, [r1, #4]
 8006940:	b108      	cbz	r0, 8006946 <__lshift+0x72>
 8006942:	f109 0502 	add.w	r5, r9, #2
 8006946:	3d01      	subs	r5, #1
 8006948:	4638      	mov	r0, r7
 800694a:	f8c8 5010 	str.w	r5, [r8, #16]
 800694e:	4621      	mov	r1, r4
 8006950:	f7ff fe33 	bl	80065ba <_Bfree>
 8006954:	4640      	mov	r0, r8
 8006956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695a:	3101      	adds	r1, #1
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	e7c7      	b.n	80068f0 <__lshift+0x1c>
 8006960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006964:	3301      	adds	r3, #1
 8006966:	e7cd      	b.n	8006904 <__lshift+0x30>
 8006968:	4651      	mov	r1, sl
 800696a:	e7dc      	b.n	8006926 <__lshift+0x52>
 800696c:	3904      	subs	r1, #4
 800696e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006972:	459c      	cmp	ip, r3
 8006974:	f841 2f04 	str.w	r2, [r1, #4]!
 8006978:	d8f9      	bhi.n	800696e <__lshift+0x9a>
 800697a:	e7e4      	b.n	8006946 <__lshift+0x72>

0800697c <__mcmp>:
 800697c:	6903      	ldr	r3, [r0, #16]
 800697e:	690a      	ldr	r2, [r1, #16]
 8006980:	b530      	push	{r4, r5, lr}
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	d10c      	bne.n	80069a0 <__mcmp+0x24>
 8006986:	0092      	lsls	r2, r2, #2
 8006988:	3014      	adds	r0, #20
 800698a:	3114      	adds	r1, #20
 800698c:	1884      	adds	r4, r0, r2
 800698e:	4411      	add	r1, r2
 8006990:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006994:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006998:	4295      	cmp	r5, r2
 800699a:	d003      	beq.n	80069a4 <__mcmp+0x28>
 800699c:	d305      	bcc.n	80069aa <__mcmp+0x2e>
 800699e:	2301      	movs	r3, #1
 80069a0:	4618      	mov	r0, r3
 80069a2:	bd30      	pop	{r4, r5, pc}
 80069a4:	42a0      	cmp	r0, r4
 80069a6:	d3f3      	bcc.n	8006990 <__mcmp+0x14>
 80069a8:	e7fa      	b.n	80069a0 <__mcmp+0x24>
 80069aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ae:	e7f7      	b.n	80069a0 <__mcmp+0x24>

080069b0 <__mdiff>:
 80069b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b4:	460d      	mov	r5, r1
 80069b6:	4607      	mov	r7, r0
 80069b8:	4611      	mov	r1, r2
 80069ba:	4628      	mov	r0, r5
 80069bc:	4614      	mov	r4, r2
 80069be:	f7ff ffdd 	bl	800697c <__mcmp>
 80069c2:	1e06      	subs	r6, r0, #0
 80069c4:	d108      	bne.n	80069d8 <__mdiff+0x28>
 80069c6:	4631      	mov	r1, r6
 80069c8:	4638      	mov	r0, r7
 80069ca:	f7ff fdc2 	bl	8006552 <_Balloc>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80069d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d8:	bfa4      	itt	ge
 80069da:	4623      	movge	r3, r4
 80069dc:	462c      	movge	r4, r5
 80069de:	4638      	mov	r0, r7
 80069e0:	6861      	ldr	r1, [r4, #4]
 80069e2:	bfa6      	itte	ge
 80069e4:	461d      	movge	r5, r3
 80069e6:	2600      	movge	r6, #0
 80069e8:	2601      	movlt	r6, #1
 80069ea:	f7ff fdb2 	bl	8006552 <_Balloc>
 80069ee:	f04f 0e00 	mov.w	lr, #0
 80069f2:	60c6      	str	r6, [r0, #12]
 80069f4:	692b      	ldr	r3, [r5, #16]
 80069f6:	6926      	ldr	r6, [r4, #16]
 80069f8:	f104 0214 	add.w	r2, r4, #20
 80069fc:	f105 0914 	add.w	r9, r5, #20
 8006a00:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a04:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a08:	f100 0114 	add.w	r1, r0, #20
 8006a0c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a10:	f859 5b04 	ldr.w	r5, [r9], #4
 8006a14:	fa1f f38a 	uxth.w	r3, sl
 8006a18:	4473      	add	r3, lr
 8006a1a:	b2ac      	uxth	r4, r5
 8006a1c:	1b1b      	subs	r3, r3, r4
 8006a1e:	0c2c      	lsrs	r4, r5, #16
 8006a20:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006a24:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006a2e:	45c8      	cmp	r8, r9
 8006a30:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006a34:	4694      	mov	ip, r2
 8006a36:	f841 4b04 	str.w	r4, [r1], #4
 8006a3a:	d8e7      	bhi.n	8006a0c <__mdiff+0x5c>
 8006a3c:	45bc      	cmp	ip, r7
 8006a3e:	d304      	bcc.n	8006a4a <__mdiff+0x9a>
 8006a40:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a44:	b183      	cbz	r3, 8006a68 <__mdiff+0xb8>
 8006a46:	6106      	str	r6, [r0, #16]
 8006a48:	e7c4      	b.n	80069d4 <__mdiff+0x24>
 8006a4a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006a4e:	b2a2      	uxth	r2, r4
 8006a50:	4472      	add	r2, lr
 8006a52:	1413      	asrs	r3, r2, #16
 8006a54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a58:	b292      	uxth	r2, r2
 8006a5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a5e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a62:	f841 2b04 	str.w	r2, [r1], #4
 8006a66:	e7e9      	b.n	8006a3c <__mdiff+0x8c>
 8006a68:	3e01      	subs	r6, #1
 8006a6a:	e7e9      	b.n	8006a40 <__mdiff+0x90>

08006a6c <__d2b>:
 8006a6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a70:	461c      	mov	r4, r3
 8006a72:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006a76:	2101      	movs	r1, #1
 8006a78:	4690      	mov	r8, r2
 8006a7a:	f7ff fd6a 	bl	8006552 <_Balloc>
 8006a7e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006a82:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006a86:	4607      	mov	r7, r0
 8006a88:	bb34      	cbnz	r4, 8006ad8 <__d2b+0x6c>
 8006a8a:	9201      	str	r2, [sp, #4]
 8006a8c:	f1b8 0200 	subs.w	r2, r8, #0
 8006a90:	d027      	beq.n	8006ae2 <__d2b+0x76>
 8006a92:	a802      	add	r0, sp, #8
 8006a94:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006a98:	f7ff fe00 	bl	800669c <__lo0bits>
 8006a9c:	9900      	ldr	r1, [sp, #0]
 8006a9e:	b1f0      	cbz	r0, 8006ade <__d2b+0x72>
 8006aa0:	9a01      	ldr	r2, [sp, #4]
 8006aa2:	f1c0 0320 	rsb	r3, r0, #32
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	40c2      	lsrs	r2, r0
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	9b01      	ldr	r3, [sp, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bf14      	ite	ne
 8006ab8:	2102      	movne	r1, #2
 8006aba:	2101      	moveq	r1, #1
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	6139      	str	r1, [r7, #16]
 8006ac0:	b1c4      	cbz	r4, 8006af4 <__d2b+0x88>
 8006ac2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ac6:	4404      	add	r4, r0
 8006ac8:	6034      	str	r4, [r6, #0]
 8006aca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ace:	6028      	str	r0, [r5, #0]
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	b002      	add	sp, #8
 8006ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006adc:	e7d5      	b.n	8006a8a <__d2b+0x1e>
 8006ade:	6179      	str	r1, [r7, #20]
 8006ae0:	e7e7      	b.n	8006ab2 <__d2b+0x46>
 8006ae2:	a801      	add	r0, sp, #4
 8006ae4:	f7ff fdda 	bl	800669c <__lo0bits>
 8006ae8:	2101      	movs	r1, #1
 8006aea:	9b01      	ldr	r3, [sp, #4]
 8006aec:	6139      	str	r1, [r7, #16]
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	3020      	adds	r0, #32
 8006af2:	e7e5      	b.n	8006ac0 <__d2b+0x54>
 8006af4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006af8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006afc:	6030      	str	r0, [r6, #0]
 8006afe:	6918      	ldr	r0, [r3, #16]
 8006b00:	f7ff fdad 	bl	800665e <__hi0bits>
 8006b04:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b08:	e7e1      	b.n	8006ace <__d2b+0x62>

08006b0a <_calloc_r>:
 8006b0a:	b538      	push	{r3, r4, r5, lr}
 8006b0c:	fb02 f401 	mul.w	r4, r2, r1
 8006b10:	4621      	mov	r1, r4
 8006b12:	f7fe f993 	bl	8004e3c <_malloc_r>
 8006b16:	4605      	mov	r5, r0
 8006b18:	b118      	cbz	r0, 8006b22 <_calloc_r+0x18>
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	f7fe f939 	bl	8004d94 <memset>
 8006b22:	4628      	mov	r0, r5
 8006b24:	bd38      	pop	{r3, r4, r5, pc}

08006b26 <__ssputs_r>:
 8006b26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b2a:	688e      	ldr	r6, [r1, #8]
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	429e      	cmp	r6, r3
 8006b30:	460c      	mov	r4, r1
 8006b32:	4690      	mov	r8, r2
 8006b34:	4699      	mov	r9, r3
 8006b36:	d837      	bhi.n	8006ba8 <__ssputs_r+0x82>
 8006b38:	898a      	ldrh	r2, [r1, #12]
 8006b3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b3e:	d031      	beq.n	8006ba4 <__ssputs_r+0x7e>
 8006b40:	2302      	movs	r3, #2
 8006b42:	6825      	ldr	r5, [r4, #0]
 8006b44:	6909      	ldr	r1, [r1, #16]
 8006b46:	1a6f      	subs	r7, r5, r1
 8006b48:	6965      	ldr	r5, [r4, #20]
 8006b4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b4e:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b52:	f109 0301 	add.w	r3, r9, #1
 8006b56:	443b      	add	r3, r7
 8006b58:	429d      	cmp	r5, r3
 8006b5a:	bf38      	it	cc
 8006b5c:	461d      	movcc	r5, r3
 8006b5e:	0553      	lsls	r3, r2, #21
 8006b60:	d530      	bpl.n	8006bc4 <__ssputs_r+0x9e>
 8006b62:	4629      	mov	r1, r5
 8006b64:	f7fe f96a 	bl	8004e3c <_malloc_r>
 8006b68:	4606      	mov	r6, r0
 8006b6a:	b950      	cbnz	r0, 8006b82 <__ssputs_r+0x5c>
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b72:	f8ca 3000 	str.w	r3, [sl]
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b7c:	81a3      	strh	r3, [r4, #12]
 8006b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b82:	463a      	mov	r2, r7
 8006b84:	6921      	ldr	r1, [r4, #16]
 8006b86:	f7ff fcd7 	bl	8006538 <memcpy>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	6126      	str	r6, [r4, #16]
 8006b98:	443e      	add	r6, r7
 8006b9a:	6026      	str	r6, [r4, #0]
 8006b9c:	464e      	mov	r6, r9
 8006b9e:	6165      	str	r5, [r4, #20]
 8006ba0:	1bed      	subs	r5, r5, r7
 8006ba2:	60a5      	str	r5, [r4, #8]
 8006ba4:	454e      	cmp	r6, r9
 8006ba6:	d900      	bls.n	8006baa <__ssputs_r+0x84>
 8006ba8:	464e      	mov	r6, r9
 8006baa:	4632      	mov	r2, r6
 8006bac:	4641      	mov	r1, r8
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	f000 f91e 	bl	8006df0 <memmove>
 8006bb4:	68a3      	ldr	r3, [r4, #8]
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	1b9b      	subs	r3, r3, r6
 8006bba:	60a3      	str	r3, [r4, #8]
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	441e      	add	r6, r3
 8006bc0:	6026      	str	r6, [r4, #0]
 8006bc2:	e7dc      	b.n	8006b7e <__ssputs_r+0x58>
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	f000 f92c 	bl	8006e22 <_realloc_r>
 8006bca:	4606      	mov	r6, r0
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d1e2      	bne.n	8006b96 <__ssputs_r+0x70>
 8006bd0:	6921      	ldr	r1, [r4, #16]
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	f7fe f8e6 	bl	8004da4 <_free_r>
 8006bd8:	e7c8      	b.n	8006b6c <__ssputs_r+0x46>
	...

08006bdc <_svfiprintf_r>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	461d      	mov	r5, r3
 8006be2:	898b      	ldrh	r3, [r1, #12]
 8006be4:	b09d      	sub	sp, #116	; 0x74
 8006be6:	061f      	lsls	r7, r3, #24
 8006be8:	4680      	mov	r8, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	4616      	mov	r6, r2
 8006bee:	d50f      	bpl.n	8006c10 <_svfiprintf_r+0x34>
 8006bf0:	690b      	ldr	r3, [r1, #16]
 8006bf2:	b96b      	cbnz	r3, 8006c10 <_svfiprintf_r+0x34>
 8006bf4:	2140      	movs	r1, #64	; 0x40
 8006bf6:	f7fe f921 	bl	8004e3c <_malloc_r>
 8006bfa:	6020      	str	r0, [r4, #0]
 8006bfc:	6120      	str	r0, [r4, #16]
 8006bfe:	b928      	cbnz	r0, 8006c0c <_svfiprintf_r+0x30>
 8006c00:	230c      	movs	r3, #12
 8006c02:	f8c8 3000 	str.w	r3, [r8]
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c0a:	e0c8      	b.n	8006d9e <_svfiprintf_r+0x1c2>
 8006c0c:	2340      	movs	r3, #64	; 0x40
 8006c0e:	6163      	str	r3, [r4, #20]
 8006c10:	2300      	movs	r3, #0
 8006c12:	9309      	str	r3, [sp, #36]	; 0x24
 8006c14:	2320      	movs	r3, #32
 8006c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c1a:	2330      	movs	r3, #48	; 0x30
 8006c1c:	f04f 0b01 	mov.w	fp, #1
 8006c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c24:	9503      	str	r5, [sp, #12]
 8006c26:	4637      	mov	r7, r6
 8006c28:	463d      	mov	r5, r7
 8006c2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c2e:	b10b      	cbz	r3, 8006c34 <_svfiprintf_r+0x58>
 8006c30:	2b25      	cmp	r3, #37	; 0x25
 8006c32:	d13e      	bne.n	8006cb2 <_svfiprintf_r+0xd6>
 8006c34:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c38:	d00b      	beq.n	8006c52 <_svfiprintf_r+0x76>
 8006c3a:	4653      	mov	r3, sl
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4640      	mov	r0, r8
 8006c42:	f7ff ff70 	bl	8006b26 <__ssputs_r>
 8006c46:	3001      	adds	r0, #1
 8006c48:	f000 80a4 	beq.w	8006d94 <_svfiprintf_r+0x1b8>
 8006c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4e:	4453      	add	r3, sl
 8006c50:	9309      	str	r3, [sp, #36]	; 0x24
 8006c52:	783b      	ldrb	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 809d 	beq.w	8006d94 <_svfiprintf_r+0x1b8>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6e:	462f      	mov	r7, r5
 8006c70:	2205      	movs	r2, #5
 8006c72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c76:	4850      	ldr	r0, [pc, #320]	; (8006db8 <_svfiprintf_r+0x1dc>)
 8006c78:	f7ff fc50 	bl	800651c <memchr>
 8006c7c:	9b04      	ldr	r3, [sp, #16]
 8006c7e:	b9d0      	cbnz	r0, 8006cb6 <_svfiprintf_r+0xda>
 8006c80:	06d9      	lsls	r1, r3, #27
 8006c82:	bf44      	itt	mi
 8006c84:	2220      	movmi	r2, #32
 8006c86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c8a:	071a      	lsls	r2, r3, #28
 8006c8c:	bf44      	itt	mi
 8006c8e:	222b      	movmi	r2, #43	; 0x2b
 8006c90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c94:	782a      	ldrb	r2, [r5, #0]
 8006c96:	2a2a      	cmp	r2, #42	; 0x2a
 8006c98:	d015      	beq.n	8006cc6 <_svfiprintf_r+0xea>
 8006c9a:	462f      	mov	r7, r5
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	250a      	movs	r5, #10
 8006ca0:	9a07      	ldr	r2, [sp, #28]
 8006ca2:	4639      	mov	r1, r7
 8006ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ca8:	3b30      	subs	r3, #48	; 0x30
 8006caa:	2b09      	cmp	r3, #9
 8006cac:	d94d      	bls.n	8006d4a <_svfiprintf_r+0x16e>
 8006cae:	b1b8      	cbz	r0, 8006ce0 <_svfiprintf_r+0x104>
 8006cb0:	e00f      	b.n	8006cd2 <_svfiprintf_r+0xf6>
 8006cb2:	462f      	mov	r7, r5
 8006cb4:	e7b8      	b.n	8006c28 <_svfiprintf_r+0x4c>
 8006cb6:	4a40      	ldr	r2, [pc, #256]	; (8006db8 <_svfiprintf_r+0x1dc>)
 8006cb8:	463d      	mov	r5, r7
 8006cba:	1a80      	subs	r0, r0, r2
 8006cbc:	fa0b f000 	lsl.w	r0, fp, r0
 8006cc0:	4318      	orrs	r0, r3
 8006cc2:	9004      	str	r0, [sp, #16]
 8006cc4:	e7d3      	b.n	8006c6e <_svfiprintf_r+0x92>
 8006cc6:	9a03      	ldr	r2, [sp, #12]
 8006cc8:	1d11      	adds	r1, r2, #4
 8006cca:	6812      	ldr	r2, [r2, #0]
 8006ccc:	9103      	str	r1, [sp, #12]
 8006cce:	2a00      	cmp	r2, #0
 8006cd0:	db01      	blt.n	8006cd6 <_svfiprintf_r+0xfa>
 8006cd2:	9207      	str	r2, [sp, #28]
 8006cd4:	e004      	b.n	8006ce0 <_svfiprintf_r+0x104>
 8006cd6:	4252      	negs	r2, r2
 8006cd8:	f043 0302 	orr.w	r3, r3, #2
 8006cdc:	9207      	str	r2, [sp, #28]
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	783b      	ldrb	r3, [r7, #0]
 8006ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce4:	d10c      	bne.n	8006d00 <_svfiprintf_r+0x124>
 8006ce6:	787b      	ldrb	r3, [r7, #1]
 8006ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cea:	d133      	bne.n	8006d54 <_svfiprintf_r+0x178>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	3702      	adds	r7, #2
 8006cf0:	1d1a      	adds	r2, r3, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	9203      	str	r2, [sp, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfb8      	it	lt
 8006cfa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cfe:	9305      	str	r3, [sp, #20]
 8006d00:	4d2e      	ldr	r5, [pc, #184]	; (8006dbc <_svfiprintf_r+0x1e0>)
 8006d02:	2203      	movs	r2, #3
 8006d04:	7839      	ldrb	r1, [r7, #0]
 8006d06:	4628      	mov	r0, r5
 8006d08:	f7ff fc08 	bl	800651c <memchr>
 8006d0c:	b138      	cbz	r0, 8006d1e <_svfiprintf_r+0x142>
 8006d0e:	2340      	movs	r3, #64	; 0x40
 8006d10:	1b40      	subs	r0, r0, r5
 8006d12:	fa03 f000 	lsl.w	r0, r3, r0
 8006d16:	9b04      	ldr	r3, [sp, #16]
 8006d18:	3701      	adds	r7, #1
 8006d1a:	4303      	orrs	r3, r0
 8006d1c:	9304      	str	r3, [sp, #16]
 8006d1e:	7839      	ldrb	r1, [r7, #0]
 8006d20:	2206      	movs	r2, #6
 8006d22:	4827      	ldr	r0, [pc, #156]	; (8006dc0 <_svfiprintf_r+0x1e4>)
 8006d24:	1c7e      	adds	r6, r7, #1
 8006d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d2a:	f7ff fbf7 	bl	800651c <memchr>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d038      	beq.n	8006da4 <_svfiprintf_r+0x1c8>
 8006d32:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <_svfiprintf_r+0x1e8>)
 8006d34:	bb13      	cbnz	r3, 8006d7c <_svfiprintf_r+0x1a0>
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	3307      	adds	r3, #7
 8006d3a:	f023 0307 	bic.w	r3, r3, #7
 8006d3e:	3308      	adds	r3, #8
 8006d40:	9303      	str	r3, [sp, #12]
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	444b      	add	r3, r9
 8006d46:	9309      	str	r3, [sp, #36]	; 0x24
 8006d48:	e76d      	b.n	8006c26 <_svfiprintf_r+0x4a>
 8006d4a:	fb05 3202 	mla	r2, r5, r2, r3
 8006d4e:	2001      	movs	r0, #1
 8006d50:	460f      	mov	r7, r1
 8006d52:	e7a6      	b.n	8006ca2 <_svfiprintf_r+0xc6>
 8006d54:	2300      	movs	r3, #0
 8006d56:	250a      	movs	r5, #10
 8006d58:	4619      	mov	r1, r3
 8006d5a:	3701      	adds	r7, #1
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d64:	3a30      	subs	r2, #48	; 0x30
 8006d66:	2a09      	cmp	r2, #9
 8006d68:	d903      	bls.n	8006d72 <_svfiprintf_r+0x196>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0c8      	beq.n	8006d00 <_svfiprintf_r+0x124>
 8006d6e:	9105      	str	r1, [sp, #20]
 8006d70:	e7c6      	b.n	8006d00 <_svfiprintf_r+0x124>
 8006d72:	fb05 2101 	mla	r1, r5, r1, r2
 8006d76:	2301      	movs	r3, #1
 8006d78:	4607      	mov	r7, r0
 8006d7a:	e7f0      	b.n	8006d5e <_svfiprintf_r+0x182>
 8006d7c:	ab03      	add	r3, sp, #12
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4622      	mov	r2, r4
 8006d82:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <_svfiprintf_r+0x1ec>)
 8006d84:	a904      	add	r1, sp, #16
 8006d86:	4640      	mov	r0, r8
 8006d88:	f7fe f944 	bl	8005014 <_printf_float>
 8006d8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006d90:	4681      	mov	r9, r0
 8006d92:	d1d6      	bne.n	8006d42 <_svfiprintf_r+0x166>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	065b      	lsls	r3, r3, #25
 8006d98:	f53f af35 	bmi.w	8006c06 <_svfiprintf_r+0x2a>
 8006d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d9e:	b01d      	add	sp, #116	; 0x74
 8006da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da4:	ab03      	add	r3, sp, #12
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	4622      	mov	r2, r4
 8006daa:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <_svfiprintf_r+0x1ec>)
 8006dac:	a904      	add	r1, sp, #16
 8006dae:	4640      	mov	r0, r8
 8006db0:	f7fe fbdc 	bl	800556c <_printf_i>
 8006db4:	e7ea      	b.n	8006d8c <_svfiprintf_r+0x1b0>
 8006db6:	bf00      	nop
 8006db8:	080070dc 	.word	0x080070dc
 8006dbc:	080070e2 	.word	0x080070e2
 8006dc0:	080070e6 	.word	0x080070e6
 8006dc4:	08005015 	.word	0x08005015
 8006dc8:	08006b27 	.word	0x08006b27

08006dcc <__ascii_mbtowc>:
 8006dcc:	b082      	sub	sp, #8
 8006dce:	b901      	cbnz	r1, 8006dd2 <__ascii_mbtowc+0x6>
 8006dd0:	a901      	add	r1, sp, #4
 8006dd2:	b142      	cbz	r2, 8006de6 <__ascii_mbtowc+0x1a>
 8006dd4:	b14b      	cbz	r3, 8006dea <__ascii_mbtowc+0x1e>
 8006dd6:	7813      	ldrb	r3, [r2, #0]
 8006dd8:	600b      	str	r3, [r1, #0]
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	1c10      	adds	r0, r2, #0
 8006dde:	bf18      	it	ne
 8006de0:	2001      	movne	r0, #1
 8006de2:	b002      	add	sp, #8
 8006de4:	4770      	bx	lr
 8006de6:	4610      	mov	r0, r2
 8006de8:	e7fb      	b.n	8006de2 <__ascii_mbtowc+0x16>
 8006dea:	f06f 0001 	mvn.w	r0, #1
 8006dee:	e7f8      	b.n	8006de2 <__ascii_mbtowc+0x16>

08006df0 <memmove>:
 8006df0:	4288      	cmp	r0, r1
 8006df2:	b510      	push	{r4, lr}
 8006df4:	eb01 0302 	add.w	r3, r1, r2
 8006df8:	d807      	bhi.n	8006e0a <memmove+0x1a>
 8006dfa:	1e42      	subs	r2, r0, #1
 8006dfc:	4299      	cmp	r1, r3
 8006dfe:	d00a      	beq.n	8006e16 <memmove+0x26>
 8006e00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e04:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e08:	e7f8      	b.n	8006dfc <memmove+0xc>
 8006e0a:	4283      	cmp	r3, r0
 8006e0c:	d9f5      	bls.n	8006dfa <memmove+0xa>
 8006e0e:	1881      	adds	r1, r0, r2
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	42d3      	cmn	r3, r2
 8006e14:	d100      	bne.n	8006e18 <memmove+0x28>
 8006e16:	bd10      	pop	{r4, pc}
 8006e18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e1c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e20:	e7f7      	b.n	8006e12 <memmove+0x22>

08006e22 <_realloc_r>:
 8006e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e24:	4607      	mov	r7, r0
 8006e26:	4614      	mov	r4, r2
 8006e28:	460e      	mov	r6, r1
 8006e2a:	b921      	cbnz	r1, 8006e36 <_realloc_r+0x14>
 8006e2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e30:	4611      	mov	r1, r2
 8006e32:	f7fe b803 	b.w	8004e3c <_malloc_r>
 8006e36:	b922      	cbnz	r2, 8006e42 <_realloc_r+0x20>
 8006e38:	f7fd ffb4 	bl	8004da4 <_free_r>
 8006e3c:	4625      	mov	r5, r4
 8006e3e:	4628      	mov	r0, r5
 8006e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e42:	f000 f821 	bl	8006e88 <_malloc_usable_size_r>
 8006e46:	42a0      	cmp	r0, r4
 8006e48:	d20f      	bcs.n	8006e6a <_realloc_r+0x48>
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	f7fd fff5 	bl	8004e3c <_malloc_r>
 8006e52:	4605      	mov	r5, r0
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d0f2      	beq.n	8006e3e <_realloc_r+0x1c>
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	f7ff fb6c 	bl	8006538 <memcpy>
 8006e60:	4631      	mov	r1, r6
 8006e62:	4638      	mov	r0, r7
 8006e64:	f7fd ff9e 	bl	8004da4 <_free_r>
 8006e68:	e7e9      	b.n	8006e3e <_realloc_r+0x1c>
 8006e6a:	4635      	mov	r5, r6
 8006e6c:	e7e7      	b.n	8006e3e <_realloc_r+0x1c>

08006e6e <__ascii_wctomb>:
 8006e6e:	b149      	cbz	r1, 8006e84 <__ascii_wctomb+0x16>
 8006e70:	2aff      	cmp	r2, #255	; 0xff
 8006e72:	bf8b      	itete	hi
 8006e74:	238a      	movhi	r3, #138	; 0x8a
 8006e76:	700a      	strbls	r2, [r1, #0]
 8006e78:	6003      	strhi	r3, [r0, #0]
 8006e7a:	2001      	movls	r0, #1
 8006e7c:	bf88      	it	hi
 8006e7e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006e82:	4770      	bx	lr
 8006e84:	4608      	mov	r0, r1
 8006e86:	4770      	bx	lr

08006e88 <_malloc_usable_size_r>:
 8006e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e8c:	1f18      	subs	r0, r3, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bfbc      	itt	lt
 8006e92:	580b      	ldrlt	r3, [r1, r0]
 8006e94:	18c0      	addlt	r0, r0, r3
 8006e96:	4770      	bx	lr

08006e98 <_init>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	bf00      	nop
 8006e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9e:	bc08      	pop	{r3}
 8006ea0:	469e      	mov	lr, r3
 8006ea2:	4770      	bx	lr

08006ea4 <_fini>:
 8006ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea6:	bf00      	nop
 8006ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eaa:	bc08      	pop	{r3}
 8006eac:	469e      	mov	lr, r3
 8006eae:	4770      	bx	lr
